###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             26/Feb/2014  14:53:22 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Components\os #
#                          al\common\osal_bufmgr.c                            #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\config\b #
#                          uildComponents.cfg (-DBROADCASTER_CFG=0x01         #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheralzeke\CC2541DB\buildCo #
#                          nfig.cfg (-DHOST_CONFIG=PERIPHERAL_CFG             #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Components\os #
#                          al\common\osal_bufmgr.c -D INT_HEAP_LEN=3074 -D    #
#                          HALNODEBUG -D OSAL_CBTIMER_NUM_TASKS=1 -D          #
#                          HAL_AES_DMA=TRUE -D HAL_DMA=TRUE -D POWER_SAVING   #
#                          -D xPLUS_BROADCASTER -D HAL_LCD=TRUE -D            #
#                          HAL_LED=TRUE -D HAL_UART=TRUE -lcN                 #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\ -o   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\ -e    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\common\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\include\ #
#                           -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ #
#                          ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\C #
#                          omponents\hal\include\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\hal\target\CC2541EB\ -I                      #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\osal\include\ -I E:\TexasInstruments\BLE-CC2 #
#                          54x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2 #
#                          541DB\..\..\..\..\Components\services\saddr\ -I    #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\include\ -I E:\TexasInstruments\BLE-CC25 #
#                          4x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC25 #
#                          41DB\..\..\..\..\Components\ble\controller\phy\    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Co #
#                          mponents\ble\controller\include\ -I                #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\..\..\Components\ble\host\ -I               #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\common\cc25 #
#                          40\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\comm #
#                          on\npi\npi_np\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\Profiles\Roles\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Si #
#                          mpleProfile\ -I E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB\. #
#                          .\..\Profiles\DevInfo\ -Ohz                        #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\osal_ #
#                          bufmgr.lst                                         #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\osal_b #
#                          ufmgr.r51                                          #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Components\osal\common\osal_bufmgr.c
      1          /**************************************************************************************************
      2            Filename:       osal_bufmgr.c
      3            Revised:        $Date: 2009-01-29 09:58:32 -0800 (Thu, 29 Jan 2009) $
      4            Revision:       $Revision: 18882 $
      5          
      6            Description:    This file contains the buffer management APIs. These APIs
      7                            are not reentrant hence cannot be called from an interrupt
      8                            contex.
      9          
     10          
     11            Copyright 2008-2013 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          
     43          /*********************************************************************
     44           * INCLUDES
     45           */
     46          #include "OSAL.h"
     47          #include "OnBoard.h"
     48          #include "osal_bufmgr.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          // 'bd_ptr' used with these macros must be of the type 'bm_desc_t *'
     54          #define START_PTR( bd_ptr )  ( (bd_ptr) + 1 )
     55          #define END_PTR( bd_ptr )    ( (uint8 *)START_PTR( bd_ptr ) + (bd_ptr)->payload_len )
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * TYPEDEFS
     63           */
     64          typedef struct bm_desc
     65          {
     66            struct bm_desc *next_ptr;    // pointer to next buffer descriptor
     67            uint16          payload_len; // length of user's buffer
     68          } bm_desc_t;
     69          
     70          /*********************************************************************
     71           * GLOBAL VARIABLES
     72           */
     73          
     74          /*********************************************************************
     75           * GLOBAL FUNCTIONS
     76           */
     77          
     78          /*********************************************************************
     79           * LOCAL VARIABLES
     80           */
     81          // Linked list of allocated buffer descriptors
     82          static bm_desc_t *bm_list_ptr = NULL;
     83          
     84          /*********************************************************************
     85           * LOCAL FUNCTIONS
     86           */
     87          static bm_desc_t *bm_desc_from_payload ( uint8 *payload_ptr );
     88          
     89          /*********************************************************************
     90           * @fn      osal_bm_alloc
     91           *
     92           * @brief   Implementation of the allocator functionality.
     93           *
     94           *          WARNING: THIS FUNCTION CAN BE CALLED ONLY FROM THE BOTTOM
     95           *                   LAYER OF THE STACK (HCI FOR DUAL MODE AND LINK
     96           *                   LAYER FOR SINGLE MODE).
     97           *
     98           * @param   size - number of bytes to allocate from the heap.
     99           *
    100           * @return  pointer to the heap allocation; NULL if error or failure.
    101           */
    102          void *osal_bm_alloc( uint16 size )
    103          {
    104            halIntState_t  cs;
    105            bm_desc_t     *bd_ptr;
    106          
    107            HAL_ENTER_CRITICAL_SECTION(cs);
    108          
    109            bd_ptr = osal_mem_alloc( sizeof( bm_desc_t ) + size );
    110          
    111            if ( bd_ptr != NULL )
    112            {
    113              // set the buffer descriptor info
    114              bd_ptr->payload_len  = size;
    115          
    116              // add item to the beginning of the list
    117              bd_ptr->next_ptr = bm_list_ptr;
    118              bm_list_ptr = bd_ptr;
    119          
    120              // return start of the buffer
    121              bd_ptr = START_PTR( bd_ptr );
    122            }
    123          
    124            HAL_EXIT_CRITICAL_SECTION(cs);
    125          
    126            return ( (void *)bd_ptr );
    127          }
    128          
    129          /*********************************************************************
    130           * @fn      osal_bm_free
    131           *
    132           * @brief   Implementation of the de-allocator functionality.
    133           *
    134           * @param   payload_ptr - pointer to the memory to free.
    135           *
    136           * @return  none
    137           */
    138          void osal_bm_free( void *payload_ptr )
    139          {
    140            halIntState_t cs;
    141            bm_desc_t *loop_ptr;
    142            bm_desc_t *prev_ptr;
    143          
    144            HAL_ENTER_CRITICAL_SECTION(cs);
    145          
    146            prev_ptr = NULL;
    147          
    148            loop_ptr = bm_list_ptr;
    149            while ( loop_ptr != NULL )
    150            {
    151              if ( payload_ptr >= (void *)START_PTR( loop_ptr ) &&
    152                   payload_ptr <= (void *)END_PTR( loop_ptr) )
    153              {
    154                // unlink item from the linked list
    155                if ( prev_ptr == NULL )
    156                {
    157                  // it's the first item on the list
    158                  bm_list_ptr = loop_ptr->next_ptr;
    159                }
    160                else
    161                {
    162                  prev_ptr->next_ptr = loop_ptr->next_ptr;
    163                }
    164          
    165                // free the memory
    166                osal_mem_free( loop_ptr );
    167          
    168                // we're done here
    169                break;
    170              }
    171          
    172              // move on to next item
    173              prev_ptr = loop_ptr;
    174              loop_ptr = loop_ptr->next_ptr;
    175            }
    176          
    177            HAL_EXIT_CRITICAL_SECTION(cs);
    178          
    179            return;
    180          }
    181          
    182          /*********************************************************************
    183           * @fn      osal_bm_adjust_header
    184           *
    185           * @brief   Add or remove header space for the payload pointer. A positive
    186           *          adjustment adds header space, and negative removes header space.
    187           *
    188           * @param   payload_ptr - pointer to payload
    189           * @param   size - +/- number of bytes to move (affecting header area)
    190           *
    191           * @return  pointer to payload at the new adjusted location
    192           */
    193          void *osal_bm_adjust_header( void *payload_ptr, int16 size )
    194          {
    195            bm_desc_t *bd_ptr;
    196            uint8 *new_payload_ptr;
    197          
    198            bd_ptr = bm_desc_from_payload( (uint8 *)payload_ptr );
    199            if ( bd_ptr != NULL )
    200            {
    201              new_payload_ptr = (uint8 *)( (uint8 *)payload_ptr - size );
    202          
    203              // make sure the new payload is within valid range
    204              if ( new_payload_ptr >= (uint8 *)START_PTR( bd_ptr ) &&
    205                   new_payload_ptr <= (uint8 *)END_PTR( bd_ptr ) )
    206              {
    207                // return new payload pointer
    208                return ( (void *)new_payload_ptr );
    209              }
    210            }
    211          
    212            // return original value
    213            return ( payload_ptr );
    214          }
    215          
    216          /*********************************************************************
    217           * @fn      osal_bm_adjust_tail
    218           *
    219           * @brief   Add or remove tail space for the payload pointer. A positive
    220           *          adjustment adds tail space, and negative removes tail space.
    221           *
    222           * @param   payload_ptr - pointer to payload
    223           * @param   size - +/- number of bytes to move (affecting header area)
    224           *
    225           * @return  pointer to payload at the new adjusted location
    226           */
    227          void *osal_bm_adjust_tail( void *payload_ptr, int16 size )
    228          {
    229            bm_desc_t *bd_ptr;
    230            uint8 *new_payload_ptr;
    231          
    232            bd_ptr = bm_desc_from_payload( (uint8 *)payload_ptr );
    233            if ( bd_ptr != NULL )
    234            {
    235              new_payload_ptr = (uint8 *)END_PTR( bd_ptr ) - size;
    236          
    237              // make sure the new payload is within valid range
    238              if ( new_payload_ptr >= (uint8 *)START_PTR( bd_ptr ) &&
    239                   new_payload_ptr <= (uint8 *)END_PTR( bd_ptr ) )
    240              {
    241                // return new payload pointer
    242                return ( (void *)new_payload_ptr );
    243              }
    244            }
    245          
    246            // return original value
    247            return ( payload_ptr );
    248          }
    249          
    250          /*********************************************************************
    251           * @fn      bm_desc_from_payload
    252           *
    253           * @brief   Find buffer descriptor from payload pointer
    254           *
    255           * @param   payload_ptr - pointer to payload
    256           *
    257           * @return  pointer to buffer descriptor
    258           */
    259          static bm_desc_t *bm_desc_from_payload ( uint8 *payload_ptr )
    260          {
    261            bm_desc_t *loop_ptr;
    262          
    263            loop_ptr = bm_list_ptr;
    264            while ( loop_ptr != NULL )
    265            {
    266              if ( payload_ptr >= (uint8 *)START_PTR( loop_ptr ) &&
    267                   payload_ptr <= (uint8 *)END_PTR( loop_ptr) )
    268              {
    269                // item found
    270                break;
    271              }
    272          
    273              // move on to next item
    274              loop_ptr = loop_ptr->next_ptr;
    275            }
    276          
    277            return ( loop_ptr );
    278          }
    279          
    280          
    281          /****************************************************************************
    282          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0     12  bm_desc_from_payload
       0      0     12  osal_bm_adjust_header
                          0 0 12 -> bm_desc_from_payload
       0      0     12  osal_bm_adjust_tail
                          0 0 12 -> bm_desc_from_payload
       0      0     12  osal_bm_alloc
                          0 0 12 -> osal_mem_alloc
       0      0     10  osal_bm_free
                          0 0 10 -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine3_0
       6  ??bm_desc_from_payload?relay
       6  ??osal_bm_adjust_header?relay
       6  ??osal_bm_adjust_tail?relay
       6  ??osal_bm_alloc?relay
       6  ??osal_bm_free?relay
       5  ?Subroutine0
      20  ?Subroutine1
       3  ?Subroutine2
       1  _A_IEN0
      66  bm_desc_from_payload
       2  bm_list_ptr
     103  osal_bm_adjust_header
      95  osal_bm_adjust_tail
      77  osal_bm_alloc
     138  osal_bm_free

 
 513 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
   1 byte  in segment SFR_AN
   2 bytes in segment XDATA_Z
 
 543 bytes of CODE  memory
   0 bytes of DATA  memory (+ 1 byte shared)
   2 bytes of XDATA memory

Errors: none
Warnings: none
