###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             24/Feb/2014  16:24:02 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\target\CC2541EB\hal_lcd.c                        #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\config\b #
#                          uildComponents.cfg (-DBROADCASTER_CFG=0x01         #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheralzeke\CC2541DB\buildCo #
#                          nfig.cfg (-DHOST_CONFIG=PERIPHERAL_CFG             #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\target\CC2541EB\hal_lcd.c -D INT_HEAP_LEN=3074   #
#                          -D HALNODEBUG -D OSAL_CBTIMER_NUM_TASKS=1 -D       #
#                          HAL_AES_DMA=TRUE -D HAL_DMA=TRUE -D POWER_SAVING   #
#                          -D xPLUS_BROADCASTER -D HAL_LCD=TRUE -D            #
#                          HAL_LED=TRUE -D HAL_UART=TRUE -lcN                 #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\ -o   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\ -e    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\common\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\include\ #
#                           -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ #
#                          ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\C #
#                          omponents\hal\include\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\hal\target\CC2541EB\ -I                      #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\osal\include\ -I E:\TexasInstruments\BLE-CC2 #
#                          54x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2 #
#                          541DB\..\..\..\..\Components\services\saddr\ -I    #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\include\ -I E:\TexasInstruments\BLE-CC25 #
#                          4x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC25 #
#                          41DB\..\..\..\..\Components\ble\controller\phy\    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Co #
#                          mponents\ble\controller\include\ -I                #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\..\..\Components\ble\host\ -I               #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\common\cc25 #
#                          40\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\comm #
#                          on\npi\npi_np\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\Profiles\Roles\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Si #
#                          mpleProfile\ -I E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB\. #
#                          .\..\Profiles\DevInfo\ -Ohz                        #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\hal_l #
#                          cd.lst                                             #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\hal_lc #
#                          d.r51                                              #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Components\hal\target\CC2541EB\hal_lcd.c
      1          /**************************************************************************************************
      2           文件名:       hal_lcd.c
      3           修改日期:     2013-02-03
      4           作者:         ghostyu在TI原有基础上修改
      5          
      6           **************************************************************************************************/
      7          
      8          /**************************************************************************************************
      9           *                                           INCLUDES
     10           **************************************************************************************************/
     11          #include "hal_types.h"
     12          #include "hal_lcd.h"
     13          #include "OSAL.h"
     14          #include "OnBoard.h"
     15          #include "hal_assert.h"
     16          
     17          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
     18          #include "DebugTrace.h"
     19          #endif
     20          
     21          /**************************************************************************************************
     22           *                                          CONSTANTS
     23           **************************************************************************************************/
     24          /*
     25           LCD pins
     26          
     27           Version-1:
     28           //control
     29           P0.0 - LCD_MODE
     30           P1.2 - LCD_CS
     31          
     32           //spi
     33           P1.5 - CLK
     34           P1.6 - MOSI
     35           P1.7 - MISO
     36          
     37           Version-2:
     38           //control
     39           P1.7 - LCD_MODE(由MISO复用,LCD并未使用到MISO引脚)
     40           P1.2 - LCD_CS
     41          
     42           //spi
     43           P1.5 - CLK
     44           P1.6 - MOSI
     45           P1.7 - MISO
     46          
     47           */
     48          #ifdef CC2530DK_V1
     49          /* LCD Control lines */
     50          #define HAL_LCD_MODE_PORT 0
     51          #define HAL_LCD_MODE_PIN  0
     52          #else
     53          /* LCD Control lines */
     54          #define HAL_LCD_MODE_PORT 1
     55          #define HAL_LCD_MODE_PIN  7
     56          #endif
     57          
     58          #define HAL_LCD_CS_PORT 1
     59          #define HAL_LCD_CS_PIN  2
     60          
     61          /* LCD SPI lines */
     62          #define HAL_LCD_CLK_PORT 1
     63          #define HAL_LCD_CLK_PIN  5
     64          
     65          #define HAL_LCD_MOSI_PORT 1
     66          #define HAL_LCD_MOSI_PIN  6
     67          
     68          #define HAL_LCD_MISO_PORT 1
     69          #define HAL_LCD_MISO_PIN  7
     70          
     71          /* SPI settings */
     72          #define HAL_SPI_CLOCK_POL_LO       0x00
     73          #define HAL_SPI_CLOCK_PHA_0        0x00
     74          #define HAL_SPI_TRANSFER_MSB_FIRST 0x20
     75          
     76          /* LCD lines */
     77          #define LCD_MAX_LINE_COUNT              8
     78          #define LCD_MAX_LINE_LENGTH             21
     79          #define LCD_MAX_BUF                     25
     80          
     81          /**************************************************************************************************
     82           *                                           MACROS
     83           **************************************************************************************************/
     84          
     85          #define HAL_IO_SET(port, pin, val)        HAL_IO_SET_PREP(port, pin, val)
     86          #define HAL_IO_SET_PREP(port, pin, val)   st( P##port##_##pin## = val; )
     87          
     88          #define HAL_CONFIG_IO_OUTPUT(port, pin, val)      HAL_CONFIG_IO_OUTPUT_PREP(port, pin, val)
     89          #define HAL_CONFIG_IO_OUTPUT_PREP(port, pin, val) st( P##port##SEL &= ~BV(pin); \
     90                                                                P##port##_##pin## = val; \
     91                                                                P##port##DIR |= BV(pin); )
     92          
     93          #define HAL_CONFIG_IO_PERIPHERAL(port, pin)      HAL_CONFIG_IO_PERIPHERAL_PREP(port, pin)
     94          #define HAL_CONFIG_IO_PERIPHERAL_PREP(port, pin) st( P##port##SEL |= BV(pin); )
     95          
     96          /* SPI interface control */
     97          #define LCD_SPI_BEGIN()     HAL_IO_SET(HAL_LCD_CS_PORT,  HAL_LCD_CS_PIN,  0); /* chip select */
     98          #define LCD_SPI_END()                                                         \
     99          {                                                                             \
    100            asm("NOP");                                                                 \
    101            asm("NOP");                                                                 \
    102            asm("NOP");                                                                 \
    103            asm("NOP");                                                                 \
    104            HAL_IO_SET(HAL_LCD_CS_PORT,  HAL_LCD_CS_PIN,  1); /* chip select */         \
    105          }
    106          /* clear the received and transmit byte status, write tx data to buffer, wait till transmit done */
    107          #define LCD_SPI_TX(x)                   { U1CSR &= ~(BV(2) | BV(1)); U1DBUF = x; while( !(U1CSR & BV(1)) ); }
    108          #define LCD_SPI_WAIT_RXRDY()            { while(!(U1CSR & BV(1))); }
    109          
    110          /* Control macros */
    111          #define LCD_DO_WRITE()        HAL_IO_SET(HAL_LCD_MODE_PORT,  HAL_LCD_MODE_PIN,  1);
    112          #define LCD_DO_CONTROL()      HAL_IO_SET(HAL_LCD_MODE_PORT,  HAL_LCD_MODE_PIN,  0);
    113          
    114          #if (HAL_LCD == TRUE)
    115          /**************************************************************************************************
    116           *                                       LOCAL VARIABLES
    117           **************************************************************************************************/
    118          
    119          static uint8 *Lcd_Line1;
    120          const uint8 ascii_table_5x7[95][5];
    121          /**************************************************************************************************
    122           *                                       FUNCTIONS - API
    123           **************************************************************************************************/
    124          
    125          void HalLcd_HW_Init(void);
    126          void HalLcd_HW_WaitUs(uint16 i);
    127          void HalLcd_HW_Clear(void);
    128          void HalLcd_HW_ClearAllSpecChars(void);
    129          void HalLcd_HW_Control(uint8 cmd);
    130          void HalLcd_HW_Write(uint8 data);
    131          void HalLcd_HW_SetContrast(uint8 value);
    132          void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
    133          void HalLcd_HW_WriteLine(uint8 line, const char *pText);
    134          
    135          //ghostyu添加
    136          void set_ddram_line_col(uint8 line,uint8 col);
    137          void DisplayByte_5x7(uint8 page,uint8 column,uint8 text);
    138          
    139          #endif //LCD
    140          #if (HAL_LCD == TRUE)
    141          /*
    142           作用    设置LCD 文本显示的其实行和列
    143           参数1   line,范围:0~7,即能够显示的行为1~8行，也就是lcd手册里提到的page
    144           参数2   col,范围:0~127,即lcd的总列数，显示的起始位置可以设置到每一列
    145           */
    146          void set_ddram_line_col(uint8 line,uint8 col)
    147          {
    148          
    149          	uint8 page,coll,coll_l,coll_h;
    150          	page = line;
    151          	coll = col;
    152          	coll_h = coll>>4;
    153          	coll_l = coll&0x0f;
    154          	HalLcd_HW_Control(0xB0+page);
    155          	HalLcd_HW_WaitUs(15); // 15 us
    156          	HalLcd_HW_Control(0x10+coll_h);
    157          	HalLcd_HW_WaitUs(15);// 15 us
    158          	HalLcd_HW_Control(0x00+coll_l);
    159          	HalLcd_HW_WaitUs(15);// 15 us
    160          }
    161          
    162          /*
    163           作用     显示一个字节的字符，该字符大小为宽5个点，高7个点
    164           参数1    page,范围0~7,共8行
    165           参数2    column,范围0~127
    166           参数3    text,要显示的字符，该值为ascii码
    167           */
    168          void DisplayByte_5x7(uint8 page,uint8 column,uint8 text)
    169          {
    170          	int j,k;
    171          
    172          	if((text>=0x20)&&(text<0x7e)) {/*需要显示的文字*/
    173          		j=text-0x20;/*寻址，通过字符的ascii码找到点阵库中的改字符的位置*/
    174          		set_ddram_line_col(page,column);
    175          		for(k=0;k<5;k++)
    176          		{
    177          			HalLcd_HW_Write(ascii_table_5x7[j][k]);/*显示5x7的ASCII字到LCD上，y为页地址，x为列地址，最后为数据*/
    178          		}
    179          		//第六列写入0，即清除上一次留下来的数据
    180          		HalLcd_HW_Write(0x00);
    181          		column+=6;
    182          	} else if(text==0x00) {/*不需要显示，清空指定位置*/
    183          		set_ddram_line_col(page,column);
    184          		for(k=0;k<5;k++) {
    185          			HalLcd_HW_Write(0x00); //清空指定的字符位置
    186          		}
    187          	}
    188          
    189          }
    190          
    191          #endif
    192          
    193          /**************************************************************************************************
    194           z-stack代码,未修改
    195           **************************************************************************************************/
    196          void HalLcdInit(void) {
    197          #if (HAL_LCD == TRUE)
    198          	Lcd_Line1 = NULL;
    199          	HalLcd_HW_Init();
    200          #endif
    201          }
    202          
    203          /*************************************************************************************************
    204           *                    LCD EMULATION FUNCTIONS
    205           *
    206           * Some evaluation boards are equipped with Liquid Crystal Displays
    207           * (LCD) which may be used to display diagnostic information. These
    208           * functions provide LCD emulation, sending the diagnostic strings
    209           * to Z-Tool via the RS232 serial port. These functions are enabled
    210           * when the "LCD_SUPPORTED" compiler flag is placed in the makefile.
    211           *
    212           * Most applications update both lines (1 and 2) of the LCD whenever
    213           * text is posted to the device. This emulator assumes that line 1 is
    214           * updated first (saved locally) and the formatting and send operation
    215           * is triggered by receipt of line 2. Nothing will be transmitted if
    216           * only line 1 is updated.
    217           *
    218           *************************************************************************************************/
    219          
    220          /**************************************************************************************************
    221           z-stack代码,未修改
    222           **************************************************************************************************/
    223          void HalLcdWriteString(char *str, uint8 option) {
    224          #if (HAL_LCD == TRUE)
    225          
    226          	uint8 strLen = 0;
    227          	uint8 totalLen = 0;
    228          	uint8 *buf;
    229          	uint8 tmpLen;
    230          
    231          	if ( Lcd_Line1 == NULL )
    232          	{
    233          		Lcd_Line1 = osal_mem_alloc( HAL_LCD_MAX_CHARS+1 );
    234          		HalLcdWriteString( "TexasInstruments", 1 );
    235          	}
    236          
    237          	strLen = (uint8)osal_strlen( (char*)str );
    238          
    239          	/* Check boundries */
    240          	if ( strLen > HAL_LCD_MAX_CHARS )
    241          	strLen = HAL_LCD_MAX_CHARS;
    242          
    243          	if ( option == HAL_LCD_LINE_1 )
    244          	{
    245          		/* Line 1 gets saved for later */
    246          		osal_memcpy( Lcd_Line1, str, strLen );
    247          		Lcd_Line1[strLen] = '\0';
    248          	}
    249          	else
    250          	{
    251          		/* Line 2 triggers action */
    252          		tmpLen = (uint8)osal_strlen( (char*)Lcd_Line1 );
    253          		totalLen = tmpLen + 1 + strLen + 1;
    254          		buf = osal_mem_alloc( totalLen );
    255          		if ( buf != NULL )
    256          		{
    257          			/* Concatenate strings */
    258          			osal_memcpy( buf, Lcd_Line1, tmpLen );
    259          			buf[tmpLen++] = ' ';
    260          			osal_memcpy( &buf[tmpLen], str, strLen );
    261          			buf[tmpLen+strLen] = '\0';
    262          
    263          			/* Send it out */
    264          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    265          
    266          #if defined(SERIAL_DEBUG_SUPPORTED)
    267          			debug_str( (uint8*)buf );
    268          #endif //LCD_SUPPORTED
    269          #endif //ZTOOL_P1
    270          			/* Free mem */
    271          			osal_mem_free( buf );
    272          		}
    273          	}
    274          
    275          	/* Display the string */
    276          	HalLcd_HW_WriteLine (option, str);
    277          
    278          #endif //HAL_LCD
    279          }
    280          
    281          /**************************************************************************************************
    282           * @fn      HalLcdWriteValue
    283           *
    284           * @brief   Write a value to the LCD,
    285           向lcd指定行写入一个32位的值
    286           *
    287           * @param   value  - value that will be displayed,
    288           需要显示的32位数
    289           *          radix  - 8, 10, 16,
    290           进制，8进制显示 10进制显示，16进制显示
    291           *          option - display options,
    292           指定行显示
    293           *
    294           * @return  None
    295           **************************************************************************************************/
    296          void HalLcdWriteValue(uint32 value, const uint8 radix, uint8 option) {
    297          #if (HAL_LCD == TRUE)
    298          	uint8 buf[LCD_MAX_BUF];
    299          
    300          	_ltoa( value, &buf[0], radix );
    301          	HalLcdWriteString( (char*)buf, option );
    302          #endif
    303          }
    304          
    305          /**************************************************************************************************
    306           z-stack代码,未修改
    307           **************************************************************************************************/
    308          void HalLcdWriteScreen(char *line1, char *line2) {
    309          #if (HAL_LCD == TRUE)
    310          	HalLcdWriteString( line1, 1 );
    311          	HalLcdWriteString( line2, 2 );
    312          #endif
    313          }
    314          
    315          /**************************************************************************************************
    316           z-stack代码,未修改
    317           **************************************************************************************************/
    318          void HalLcdWriteStringValue(char *title, uint16 value, uint8 format, uint8 line) {
    319          #if (HAL_LCD == TRUE)
    320          	uint8 tmpLen;
    321          	uint8 buf[LCD_MAX_BUF];
    322          	uint32 err;
    323          
    324          	tmpLen = (uint8)osal_strlen( (char*)title );
    325          	osal_memcpy( buf, title, tmpLen );
    326          	buf[tmpLen] = ' ';
    327          	err = (uint32)(value);
    328          	_ltoa( err, &buf[tmpLen+1], format );
    329          	HalLcdWriteString( (char*)buf, line );
    330          #endif
    331          }
    332          
    333          /**************************************************************************************************
    334           z-stack代码,未修改
    335           **************************************************************************************************/
    336          void HalLcdWriteStringValueValue(char *title, uint16 value1, uint8 format1, uint16 value2, uint8 format2, uint8 line) {
    337          
    338          #if (HAL_LCD == TRUE)
    339          
    340          	uint8 tmpLen;
    341          	uint8 buf[LCD_MAX_BUF];
    342          	uint32 err;
    343          
    344          	tmpLen = (uint8)osal_strlen( (char*)title );
    345          	if ( tmpLen )
    346          	{
    347          		osal_memcpy( buf, title, tmpLen );
    348          		buf[tmpLen++] = ' ';
    349          	}
    350          
    351          	err = (uint32)(value1);
    352          	_ltoa( err, &buf[tmpLen], format1 );
    353          	tmpLen = (uint8)osal_strlen( (char*)buf );
    354          
    355          	buf[tmpLen++] = ',';
    356          	buf[tmpLen++] = ' ';
    357          	err = (uint32)(value2);
    358          	_ltoa( err, &buf[tmpLen], format2 );
    359          
    360          	HalLcdWriteString( (char *)buf, line );
    361          
    362          #endif
    363          }
    364          
    365          /**************************************************************************************************
    366           z-stack代码,未修改
    367           **************************************************************************************************/
    368          void HalLcdDisplayPercentBar(char *title, uint8 value) {
    369          #if (HAL_LCD == TRUE)
    370          
    371          	uint8 percent;
    372          	uint8 leftOver;
    373          	uint8 buf[17];
    374          	uint32 err;
    375          	uint8 x;
    376          
    377          	/* Write the title: */
    378          	HalLcdWriteString( title, HAL_LCD_LINE_1 );
    379          
    380          	if ( value > 100 )
    381          	value = 100;
    382          
    383          	/* convert to blocks */
    384          	percent = (uint8)(value / 10);
    385          	leftOver = (uint8)(value % 10);
    386          
    387          	/* Make window */
    388          	osal_memcpy( buf, "[          ]  ", 15 );
    389          
    390          	for ( x = 0; x < percent; x ++ )
    391          	{
    392          		buf[1+x] = '>';
    393          	}
    394          
    395          	if ( leftOver >= 5 )
    396          	buf[1+x] = '+';
    397          
    398          	err = (uint32)value;
    399          	_ltoa( err, (uint8*)&buf[13], 10 );
    400          
    401          	HalLcdWriteString( (char*)buf, HAL_LCD_LINE_2 );
    402          
    403          #endif
    404          
    405          }
    406          
    407          #if (HAL_LCD == TRUE)
    408          /**************************************************************************************************
    409           *                                    HARDWARE LCD
    410           **************************************************************************************************/
    411          
    412          /**************************************************************************************************
    413           lcd所需的GPIO口配置
    414           **************************************************************************************************/
    415          static void halLcd_ConfigIO(void)
    416          {
    417          	/* GPIO configuration */
    418          #ifdef CC2530DK_V1
    419          	HAL_CONFIG_IO_OUTPUT(HAL_LCD_MODE_PORT, HAL_LCD_MODE_PIN, 1);
    420          #else
    421          
    422          #endif
    423          	HAL_CONFIG_IO_OUTPUT(HAL_LCD_CS_PORT, HAL_LCD_CS_PIN, 1);
    424          }
    425          
    426          /**************************************************************************************************
    427           SPI总线寄存器配置
    428           **************************************************************************************************/
    429          static void halLcd_ConfigSPI(void)
    430          {
    431          	/* UART/SPI Peripheral configuration */
    432          
    433          	uint8 baud_exponent;
    434          	uint8 baud_mantissa;
    435          
    436          	/* Set SPI on UART 1 alternative 2 */
    437          	PERCFG |= 0x02;
    438          
    439          	/* Configure clk, master out and master in lines */
    440          	HAL_CONFIG_IO_PERIPHERAL(HAL_LCD_CLK_PORT, HAL_LCD_CLK_PIN);
    441          	HAL_CONFIG_IO_PERIPHERAL(HAL_LCD_MOSI_PORT, HAL_LCD_MOSI_PIN);
    442          	HAL_CONFIG_IO_PERIPHERAL(HAL_LCD_MISO_PORT, HAL_LCD_MISO_PIN);
    443          
    444          	/* Set SPI speed to 1 MHz (the values assume system clk of 32MHz)
    445          	 * Confirm on board that this results in 1MHz spi clk.
    446          	 */
    447          	baud_exponent = 15;
    448          	baud_mantissa = 0;
    449          
    450          	/* Configure SPI */
    451          	U1UCR = 0x80; /* Flush and goto IDLE state. 8-N-1. */
    452          	U1CSR = 0x00; /* SPI mode, master. */
    453          	U1GCR = HAL_SPI_TRANSFER_MSB_FIRST | HAL_SPI_CLOCK_PHA_0 | HAL_SPI_CLOCK_POL_LO | baud_exponent;
    454          	U1BAUD = baud_mantissa;
    455          }
    456          
    457          /**************************************************************************************************
    458           初始化，已根据lcd12864手册更改
    459           **************************************************************************************************/
    460          void HalLcd_HW_Init(void)
    461          {
    462          	/* Initialize LCD IO lines */
    463          	halLcd_ConfigIO();
    464          
    465          	/* Initialize SPI */
    466          	halLcd_ConfigSPI();
    467          
    468          	HalLcd_HW_Control(0xe2); //软复位
    469          	HalLcd_HW_WaitUs(15000);// 15 us
    470          	HalLcd_HW_Control(0x2c);//升压步聚1
    471          	HalLcd_HW_WaitUs(15);// 15 us
    472          	HalLcd_HW_Control(0x2e);//升压步聚2
    473          	HalLcd_HW_WaitUs(15);// 15 us
    474          	HalLcd_HW_Control(0x2f);//升压步聚3
    475          	HalLcd_HW_WaitUs(150);// 15 us
    476          	HalLcd_HW_Control(0x23);//粗调对比度，可设置范围0x20～0x27
    477          	HalLcd_HW_WaitUs(15);// 15 us
    478          	HalLcd_HW_Control(0x81);//微调对比度
    479          	HalLcd_HW_WaitUs(15);// 15 us
    480          	HalLcd_HW_Control(0x28);//0x1a,微调对比度的值，可设置范围0x00～0x3f
    481          	HalLcd_HW_WaitUs(15);// 15 us
    482          
    483          	HalLcd_HW_Control(0xa2);// 1/9偏压比（bias）
    484          	HalLcd_HW_WaitUs(15);// 15 us
    485          	HalLcd_HW_Control(0xa0);//行扫描顺序：从上到下
    486          	HalLcd_HW_WaitUs(15);// 15 us
    487          	HalLcd_HW_Control(0xc8);//列扫描顺序：从左到右
    488          	HalLcd_HW_WaitUs(15);// 15 us
    489          	HalLcd_HW_Control(0x40);//起始行：第一行开始
    490          	HalLcd_HW_WaitUs(15);// 15 us
    491          	HalLcd_HW_Control(0xaf);//打开显示
    492          	HalLcd_HW_WaitUs(15);// 15 us
    493          	HalLcd_HW_Control(0xa4);
    494          	HalLcd_HW_WaitUs(15);// 15 us
    495          
    496          	HalLcd_HW_Clear();
    497          	//display_string_5x7(1,1,"abcdefghijklmnopqrstuvwxyz");
    498          	//display_string_5x7(8,1,"uvwxyz0123456789");
    499          	//while(1);
    500          
    501          }
    502          
    503          /**************************************************************************************************
    504           z-stack代码,SPI总线写命令
    505           **************************************************************************************************/
    506          void HalLcd_HW_Control(uint8 cmd)
    507          {
    508          #ifdef CC2530DK_V1
    509          	//do nothiing
    510          #else
    511          	//保存原来MISO引脚的设置
    512          	uint8 dir = P1DIR;
    513          	uint8 sel = P1SEL;
    514          	P1DIR |=BV(7);
    515          	/*
    516          	 0为GPIO,1为外设，
    517          	 这里用到的是MISO引脚的GPIO功能，
    518          	 因此相应引脚设为0?  */
    519          	P1SEL &=~(BV(7));
    520          #endif
    521          	LCD_SPI_BEGIN();
    522          	LCD_DO_CONTROL();
    523          	LCD_SPI_TX(cmd);
    524          	LCD_SPI_WAIT_RXRDY();
    525          	LCD_SPI_END();
    526          
    527          #ifdef CC2530DK_V1
    528          	//do nothiing
    529          #else
    530          	P1DIR =dir;
    531          	P1SEL =sel;
    532          #endif
    533          }
    534          
    535          /**************************************************************************************************
    536           z-stack代码,SPI总线写数据
    537           **************************************************************************************************/
    538          void HalLcd_HW_Write(uint8 data)
    539          {
    540          #ifdef CC2530DK_V1
    541          	//do nothiing
    542          #else
    543          	//保存原来MISO引脚的设置，方向和功能选择
    544          	uint8 dir = P1DIR;
    545          	uint8 sel = P1SEL;
    546          	/*
    547          	 0为input 1为output
    548          	 这里要设为输出，控制lcd的A0(命令或数据选择)
    549          	 */
    550          	P1DIR |=BV(7);
    551          	/*
    552          	 0为GPIO,1为外设，
    553          	 这里用到的是MISO引脚的GPIO功能，
    554          	 因此相应引脚设为0?  */
    555          	P1SEL &=~(BV(7));
    556          #endif
    557          	LCD_SPI_BEGIN();
    558          	LCD_DO_WRITE();
    559          	LCD_SPI_TX(data);
    560          	LCD_SPI_WAIT_RXRDY();
    561          	LCD_SPI_END();
    562          #ifdef CC2530DK_V1
    563          	//do nothiing
    564          #else
    565          	P1DIR =dir;
    566          	P1SEL =sel;
    567          #endif
    568          }
    569          
    570          /**************************************************************************************************
    571           z-stack代码
    572           **************************************************************************************************/
    573          void HalLcd_HW_SetContrast(uint8 value)
    574          {
    575          
    576          }
    577          
    578          /**************************************************************************************************
    579           作用    清屏
    580           **************************************************************************************************/
    581          void HalLcd_HW_Clear(void)
    582          {
    583          
    584          	int i,j;
    585          	for(i=0;i<8;i++) {
    586          		set_ddram_line_col(i,0);
    587          		for(j=0;j<128;j++) {
    588          			HalLcd_HW_Write(0x00);
    589          		}
    590          	}
    591          }
    592          
    593          /**************************************************************************************************
    594           z-stack代码
    595           **************************************************************************************************/
    596          void HalLcd_HW_ClearAllSpecChars(void)
    597          {
    598          
    599          }
    600          
    601          /**************************************************************************************************
    602           作用    向指定的行和列写入一个字符
    603           参数1   line，范围1~8,带显示的行,注意这里的范围是1~8,而不是0~7,目的是兼容上层的代码
    604           参数2   col，范围1~LCD_MAX_LINE_LENGTH,待显示的列,注意，这里将128等分成LCD_MAX_LINE_LENGTH个区域，每个区域显示一个字符
    605           参数3   text，需要显示的ascii字符
    606           **************************************************************************************************/
    607          void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text)
    608          {
    609          	uint8 column = 1+col*6;
    610          	uint8 page = line-1;
    611          	if(col > LCD_MAX_LINE_LENGTH)/*超出部分不显示*/
    612          	return;
    613          	DisplayByte_5x7(page,column,(unsigned char)text);
    614          }
    615          
    616          /**************************************************************************************************
    617           作用    向指定行写入一串字符串
    618           参数1   line。范围1~8
    619           参数2   pText。待显示的字符串
    620           **************************************************************************************************/
    621          void HalLcd_HW_WriteLine(uint8 line, const char *pText)
    622          {
    623          	uint8 count;
    624          	uint8 totalLength = (uint8)osal_strlen( (char *)pText );
    625          	/* Write the content first */
    626          	for (count=0; count<totalLength; count++)
    627          	{
    628          		HalLcd_HW_WriteChar(line, count, (*(pText++)));
    629          	}
    630          
    631          	/* Write blank spaces to rest of the line */
    632          	for(count=totalLength; count<LCD_MAX_LINE_LENGTH;count++)
    633          	{
    634          		HalLcd_HW_WriteChar(line, count, 0x00);
    635          	}
    636          }
    637          
    638          /**************************************************************************************************
    639           * @fn      HalLcd_HW_WaitUs
    640           *
    641           * @brief   wait for x us. @ 32MHz MCU clock it takes 32 "nop"s for 1 us delay.
    642           *
    643           * @param   x us. range[0-65536]
    644           *
    645           * @return  None
    646           **************************************************************************************************/
    647          void HalLcd_HW_WaitUs(uint16 microSecs)
    648          {
    649          	while(microSecs--)
    650          	{
    651          		/* 32 NOPs == 1 usecs */
    652          		asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
    653          		asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
    654          		asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
    655          		asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
    656          		asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
    657          		asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
    658          		asm("nop"); asm("nop");
    659          	}
    660          }
    661          
    662          #if 1
    663          /*全体ASCII 列表:5x7点阵库*/
    664          const uint8 ascii_table_5x7[95][5]= {
    665          	0x00,0x00,0x00,0x00,0x00, //space
    666          	0x00,0x00,0x4f,0x00,0x00,//!
    667          	0x00,0x07,0x00,0x07,0x00,//"
    668          	0x14,0x7f,0x14,0x7f,0x14,//#
    669          	0x24,0x2a,0x7f,0x2a,0x12,//$
    670          	0x23,0x13,0x08,0x64,0x62,//%
    671          	0x36,0x49,0x55,0x22,0x50,//&
    672          	0x00,0x05,0x07,0x00,0x00,//]
    673          	0x00,0x1c,0x22,0x41,0x00,//(
    674          	0x00,0x41,0x22,0x1c,0x00,//)
    675          	0x14,0x08,0x3e,0x08,0x14,//*
    676          	0x08,0x08,0x3e,0x08,0x08,//+
    677          	0x00,0x50,0x30,0x00,0x00,//,
    678          	0x08,0x08,0x08,0x08,0x08,//-
    679          	0x00,0x60,0x60,0x00,0x00,//.
    680          	0x20,0x10,0x08,0x04,0x02,///
    681          	0x3e,0x51,0x49,0x45,0x3e,//0
    682          	0x00,0x42,0x7f,0x40,0x00,//1
    683          	0x42,0x61,0x51,0x49,0x46,//2
    684          	0x21,0x41,0x45,0x4b,0x31,//3
    685          	0x18,0x14,0x12,0x7f,0x10,//4
    686          	0x27,0x45,0x45,0x45,0x39,//5
    687          	0x3c,0x4a,0x49,0x49,0x30,//6
    688          	0x01,0x71,0x09,0x05,0x03,//7
    689          	0x36,0x49,0x49,0x49,0x36,//8
    690          	0x06,0x49,0x49,0x29,0x1e,//9
    691          	0x00,0x36,0x36,0x00,0x00,//:
    692          	0x00,0x56,0x36,0x00,0x00,//;
    693          	0x08,0x14,0x22,0x41,0x00,//<
    694          	0x14,0x14,0x14,0x14,0x14,//=
    695          	0x00,0x41,0x22,0x14,0x08,//>
    696          	0x02,0x01,0x51,0x09,0x06,//?
    697          	0x32,0x49,0x79,0x41,0x3e,//@
    698          	0x7e,0x11,0x11,0x11,0x7e,//A
    699          	0x7f,0x49,0x49,0x49,0x36,//B
    700          	0x3e,0x41,0x41,0x41,0x22,//C
    701          	0x7f,0x41,0x41,0x22,0x1c,//D
    702          	0x7f,0x49,0x49,0x49,0x41,//E
    703          	0x7f,0x09,0x09,0x09,0x01,//F
    704          	0x3e,0x41,0x49,0x49,0x7a,//G
    705          	0x7f,0x08,0x08,0x08,0x7f,//H
    706          	0x00,0x41,0x7f,0x41,0x00,//I
    707          	0x20,0x40,0x41,0x3f,0x01,//J
    708          	0x7f,0x08,0x14,0x22,0x41,//K
    709          	0x7f,0x40,0x40,0x40,0x40,//L
    710          	0x7f,0x02,0x0c,0x02,0x7f,//M
    711          	0x7f,0x04,0x08,0x10,0x7f,//N
    712          	0x3e,0x41,0x41,0x41,0x3e,//O
    713          	0x7f,0x09,0x09,0x09,0x06,//P
    714          	0x3e,0x41,0x51,0x21,0x5e,//Q
    715          	0x7f,0x09,0x19,0x29,0x46,//R
    716          	0x46,0x49,0x49,0x49,0x31,//S
    717          	0x01,0x01,0x7f,0x01,0x01,//T
    718          	0x3f,0x40,0x40,0x40,0x3f,//U
    719          	0x1f,0x20,0x40,0x20,0x1f,//V
    720          	0x3f,0x40,0x38,0x40,0x3f,//W
    721          	0x63,0x14,0x08,0x14,0x63,//X
    722          	0x07,0x08,0x70,0x08,0x07,//Y
    723          	0x61,0x51,0x49,0x45,0x43,//Z
    724          	0x00,0x7f,0x41,0x41,0x00,//[
    725          	0x02,0x04,0x08,0x10,0x20,// 斜杠
    726          	0x00,0x41,0x41,0x7f,0x00,//]
    727          	0x04,0x02,0x01,0x02,0x04,//^
    728          	0x40,0x40,0x40,0x40,0x40,//_
    729          	0x01,0x02,0x04,0x00,0x00,//`
    730          	0x20,0x54,0x54,0x54,0x78,//a
    731          	0x7f,0x48,0x48,0x48,0x30,//b
    732          	0x38,0x44,0x44,0x44,0x44,//c
    733          	0x30,0x48,0x48,0x48,0x7f,//d
    734          	0x38,0x54,0x54,0x54,0x58,//e
    735          	0x00,0x08,0x7e,0x09,0x02,//f
    736          	0x48,0x54,0x54,0x54,0x3c,//g
    737          	0x7f,0x08,0x08,0x08,0x70,//h
    738          	0x00,0x00,0x7a,0x00,0x00,//i
    739          	0x20,0x40,0x40,0x3d,0x00,//j
    740          	0x7f,0x20,0x28,0x44,0x00,//k
    741          	0x00,0x41,0x7f,0x40,0x00,//l
    742          	0x7c,0x04,0x38,0x04,0x7c,//m
    743          	0x7c,0x08,0x04,0x04,0x78,//n
    744          	0x38,0x44,0x44,0x44,0x38,//o
    745          	0x7c,0x14,0x14,0x14,0x08,//p
    746          	0x08,0x14,0x14,0x14,0x7c,//q
    747          	0x7c,0x08,0x04,0x04,0x08,//r
    748          	0x48,0x54,0x54,0x54,0x24,//s
    749          	0x04,0x04,0x3f,0x44,0x24,//t
    750          	0x3c,0x40,0x40,0x40,0x3c,//u
    751          	0x1c,0x20,0x40,0x20,0x1c,//v
    752          	0x3c,0x40,0x30,0x40,0x3c,//w
    753          	0x44,0x28,0x10,0x28,0x44,//x
    754          	0x04,0x48,0x30,0x08,0x04,//y
    755          	0x44,0x64,0x54,0x4c,0x44,//z
    756          	0x08,0x36,0x41,0x41,0x00,//{
    757          	0x00,0x00,0x77,0x00,0x00,//|
    758          	0x00,0x41,0x41,0x36,0x08,//}
    759          	0x04,0x02,0x02,0x02,0x01,//~
    760          };
    761          #endif
    762          
    763          #endif
    764          
    765          /**************************************************************************************************
    766           **************************************************************************************************/
    767          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     22  DisplayByte_5x7
                          0 0 13 -> HalLcd_HW_Write
                          0 0 13 -> set_ddram_line_col
       0      0     31  HalLcdDisplayPercentBar
                          0 0 29 -> HalLcdWriteString
                          0 0 31 -> _ltoa
                          0 0 31 -> osal_memcpy
       2      0      0  HalLcdInit
                          2 0  0 -> HalLcd_HW_Init
       0      0      9  HalLcdWriteScreen
                          0 0  9 -> HalLcdWriteString
       0      0     65  HalLcdWriteString
                          0 0 18 -> HalLcdWriteString
                          0 0 18 -> HalLcd_HW_WriteLine
                          0 0 18 -> osal_mem_alloc
                          0 0 18 -> osal_mem_free
                          0 0 20 -> osal_memcpy
                          0 0 18 -> osal_strlen
       0      0     44  HalLcdWriteStringValue
                          0 0 41 -> HalLcdWriteString
                          0 0 43 -> _ltoa
                          0 0 43 -> osal_memcpy
                          0 0 41 -> osal_strlen
       0      0     51  HalLcdWriteStringValueValue
                          0 0 45 -> HalLcdWriteString
                          0 0 47 -> _ltoa
                          0 0 47 -> osal_memcpy
                          0 0 45 -> osal_strlen
       0      0     44  HalLcdWriteValue
                          0 0 41 -> HalLcdWriteString
                          0 0 43 -> _ltoa
       0      0      9  HalLcd_HW_Clear
                          0 0  9 -> HalLcd_HW_Write
                          0 0  9 -> set_ddram_line_col
       0      0      0  HalLcd_HW_ClearAllSpecChars
       0      0      9  HalLcd_HW_Control
       2      0      0  HalLcd_HW_Init
                          2 0  0 -> HalLcd_HW_Clear
                          2 0  0 -> HalLcd_HW_Control
                          2 0  0 -> HalLcd_HW_WaitUs
       0      0      0  HalLcd_HW_SetContrast
       0      0      9  HalLcd_HW_WaitUs
       0      0     13  HalLcd_HW_Write
       0      0     20  HalLcd_HW_WriteChar
                          0 0  9 -> DisplayByte_5x7
       0      0     29  HalLcd_HW_WriteLine
                          0 0 11 -> HalLcd_HW_WriteChar
                          0 0 11 -> osal_strlen
       0      0     22  set_ddram_line_col
                          0 0  9 -> HalLcd_HW_Control
                          0 0  9 -> HalLcd_HW_WaitUs


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      17  ?<Constant "TexasInstruments">
      15  ?<Constant "[          ]  ">
       6  ??DisplayByte_5x7?relay
       6  ??HalLcdDisplayPercentBar?relay
       6  ??HalLcdInit?relay
       6  ??HalLcdWriteScreen?relay
       6  ??HalLcdWriteString?relay
       6  ??HalLcdWriteStringValue?relay
       6  ??HalLcdWriteStringValueValue?relay
       6  ??HalLcdWriteValue?relay
       6  ??HalLcd_HW_Clear?relay
       6  ??HalLcd_HW_ClearAllSpecChars?relay
       6  ??HalLcd_HW_Control?relay
       6  ??HalLcd_HW_Init?relay
       6  ??HalLcd_HW_SetContrast?relay
       6  ??HalLcd_HW_WaitUs?relay
       6  ??HalLcd_HW_Write?relay
       6  ??HalLcd_HW_WriteChar?relay
       6  ??HalLcd_HW_WriteLine?relay
       8  ??Subroutine7_0
       6  ??set_ddram_line_col?relay
       5  ?Subroutine0
       9  ?Subroutine1
       7  ?Subroutine2
      23  ?Subroutine3
       4  ?Subroutine4
      11  ?Subroutine5
      15  ?Subroutine6
     114  DisplayByte_5x7
     193  HalLcdDisplayPercentBar
      14  HalLcdInit
      26  HalLcdWriteScreen
     276  HalLcdWriteString
     112  HalLcdWriteStringValue
     268  HalLcdWriteStringValueValue
      44  HalLcdWriteValue
      45  HalLcd_HW_Clear
       3  HalLcd_HW_ClearAllSpecChars
      22  HalLcd_HW_Control
     198  HalLcd_HW_Init
       3  HalLcd_HW_SetContrast
      53  HalLcd_HW_WaitUs
      24  HalLcd_HW_Write
      24  HalLcd_HW_WriteChar
      81  HalLcd_HW_WriteLine
       2  Lcd_Line1
       1  P1DIR
       1  P1SEL
       1  PERCFG
       1  U1BAUD
       1  U1DBUF
       1  U1GCR
       1  U1UCR
       1  _A_P1
       1  _A_U1CSR
     475  ascii_table_5x7
      57  set_ddram_line_col

 
 1 639 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     9 bytes in segment SFR_AN
   507 bytes in segment XDATA_ROM_C
     2 bytes in segment XDATA_Z
 
 1 747 bytes of CODE  memory
   507 bytes of CONST memory
     0 bytes of DATA  memory (+ 9 bytes shared)
     2 bytes of XDATA memory

Errors: none
Warnings: 1
