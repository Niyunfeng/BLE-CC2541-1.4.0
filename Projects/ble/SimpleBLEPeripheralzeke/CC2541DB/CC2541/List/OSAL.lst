###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             25/Feb/2014  11:52:15 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Components\os #
#                          al\common\OSAL.c                                   #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\config\b #
#                          uildComponents.cfg (-DBROADCASTER_CFG=0x01         #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheralzeke\CC2541DB\buildCo #
#                          nfig.cfg (-DHOST_CONFIG=PERIPHERAL_CFG             #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Components\os #
#                          al\common\OSAL.c -D INT_HEAP_LEN=3074 -D           #
#                          HALNODEBUG -D OSAL_CBTIMER_NUM_TASKS=1 -D          #
#                          HAL_AES_DMA=TRUE -D HAL_DMA=TRUE -D POWER_SAVING   #
#                          -D xPLUS_BROADCASTER -D HAL_LCD=TRUE -D            #
#                          HAL_LED=TRUE -D HAL_UART=TRUE -lcN                 #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\ -o   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\ -e    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\common\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\include\ #
#                           -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ #
#                          ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\C #
#                          omponents\hal\include\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\hal\target\CC2541EB\ -I                      #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\osal\include\ -I E:\TexasInstruments\BLE-CC2 #
#                          54x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2 #
#                          541DB\..\..\..\..\Components\services\saddr\ -I    #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\include\ -I E:\TexasInstruments\BLE-CC25 #
#                          4x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC25 #
#                          41DB\..\..\..\..\Components\ble\controller\phy\    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Co #
#                          mponents\ble\controller\include\ -I                #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\..\..\Components\ble\host\ -I               #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\common\cc25 #
#                          40\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\comm #
#                          on\npi\npi_np\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\Profiles\Roles\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Si #
#                          mpleProfile\ -I E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB\. #
#                          .\..\Profiles\DevInfo\ -Ohz                        #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\OSAL. #
#                          lst                                                #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\OSAL.r #
#                          51                                                 #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Components\osal\common\OSAL.c
      1          /**************************************************************************************************
      2            Filename:       OSAL.c
      3            Revised:        $Date: 2012-02-02 12:55:32 -0800 (Thu, 02 Feb 2012) $
      4            Revision:       $Revision: 29143 $
      5          
      6            Description:    This API allows the software components in the Z-stack to be written
      7                            independently of the specifics of the operating system, kernel or tasking
      8                            environment (including control loops or connect-to-interrupt systems).
      9          
     10          
     11            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License"). You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product. Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include <string.h>
     47          
     48          #include "comdef.h"
     49          #include "hal_board.h"
     50          #include "OSAL.h"
     51          #include "OSAL_Tasks.h"
     52          #include "OSAL_Memory.h"
     53          #include "OSAL_PwrMgr.h"
     54          #include "OSAL_Clock.h"
     55          
     56          #include "OnBoard.h"
     57          
     58          /* HAL */
     59          #include "hal_drivers.h"
     60          
     61          #ifdef IAR_ARMCM3_LM
     62            #include "FreeRTOSConfig.h"
     63            #include "osal_task.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          /*********************************************************************
     71           * CONSTANTS
     72           */
     73          
     74          /*********************************************************************
     75           * TYPEDEFS
     76           */
     77          
     78          /*********************************************************************
     79           * GLOBAL VARIABLES
     80           */
     81          
     82          // Message Pool Definitions
     83          osal_msg_q_t osal_qHead;
     84          
     85          /*********************************************************************
     86           * EXTERNAL VARIABLES
     87           */
     88          
     89          /*********************************************************************
     90           * EXTERNAL FUNCTIONS
     91           */
     92          
     93          /*********************************************************************
     94           * LOCAL VARIABLES
     95           */
     96          
     97          // Index of active task
     98          static uint8 activeTaskID = TASK_NO_TASK;
     99          
    100          /*********************************************************************
    101           * LOCAL FUNCTION PROTOTYPES
    102           */
    103          
    104          static uint8 osal_msg_enqueue_push( uint8 destination_task, uint8 *msg_ptr, uint8 urgent );
    105          
    106          /*********************************************************************
    107           * HELPER FUNCTIONS
    108           */
    109          /* very ugly stub so Keil can compile */
    110          #ifdef __KEIL__
    111          char *  itoa ( int value, char * buffer, int radix )
    112          {
    113            return(buffer);
    114          }
    115          #endif
    116          
    117          /*********************************************************************
    118           * @fn      osal_strlen
    119           *
    120           * @brief
    121           *
    122           *   Calculates the length of a string.  The string must be null
    123           *   terminated.
    124           *
    125           * @param   char *pString - pointer to text string
    126           *
    127           * @return  int - number of characters
    128           */
    129          int osal_strlen( char *pString )
    130          {
    131            return (int)( strlen( pString ) );
    132          }
    133          
    134          /*********************************************************************
    135           * @fn      osal_memcpy
    136           *
    137           * @brief
    138           *
    139           *   Generic memory copy.
    140           *
    141           *   Note: This function differs from the standard memcpy(), since
    142           *         it returns the pointer to the next destination uint8. The
    143           *         standard memcpy() returns the original destination address.
    144           *
    145           * @param   dst - destination address
    146           * @param   src - source address
    147           * @param   len - number of bytes to copy
    148           *
    149           * @return  pointer to end of destination buffer
    150           */
    151          void *osal_memcpy( void *dst, const void GENERIC *src, unsigned int len )
    152          {
    153            uint8 *pDst;
    154            const uint8 GENERIC *pSrc;
    155          
    156            pSrc = src;
    157            pDst = dst;
    158          
    159            while ( len-- )
    160              *pDst++ = *pSrc++;
    161          
    162            return ( pDst );
    163          }
    164          
    165          /*********************************************************************
    166           * @fn      osal_revmemcpy
    167           *
    168           * @brief   Generic reverse memory copy.  Starts at the end of the
    169           *   source buffer, by taking the source address pointer and moving
    170           *   pointer ahead "len" bytes, then decrementing the pointer.
    171           *
    172           *   Note: This function differs from the standard memcpy(), since
    173           *         it returns the pointer to the next destination uint8. The
    174           *         standard memcpy() returns the original destination address.
    175           *
    176           * @param   dst - destination address
    177           * @param   src - source address
    178           * @param   len - number of bytes to copy
    179           *
    180           * @return  pointer to end of destination buffer
    181           */
    182          void *osal_revmemcpy( void *dst, const void GENERIC *src, unsigned int len )
    183          {
    184            uint8 *pDst;
    185            const uint8 GENERIC *pSrc;
    186          
    187            pSrc = src;
    188            pSrc += (len-1);
    189            pDst = dst;
    190          
    191            while ( len-- )
    192              *pDst++ = *pSrc--;
    193          
    194            return ( pDst );
    195          }
    196          
    197          /*********************************************************************
    198           * @fn      osal_memdup
    199           *
    200           * @brief   Allocates a buffer [with osal_mem_alloc()] and copies
    201           *          the src buffer into the newly allocated space.
    202           *
    203           * @param   src - source address
    204           * @param   len - number of bytes to copy
    205           *
    206           * @return  pointer to the new allocated buffer, or NULL if
    207           *          allocation problem.
    208           */
    209          void *osal_memdup( const void GENERIC *src, unsigned int len )
    210          {
    211            uint8 *pDst;
    212          
    213            pDst = osal_mem_alloc( len );
    214            if ( pDst )
    215            {
    216              VOID osal_memcpy( pDst, src, len );
    217            }
    218          
    219            return ( (void *)pDst );
    220          }
    221          
    222          /*********************************************************************
    223           * @fn      osal_memcmp
    224           *
    225           * @brief
    226           *
    227           *   Generic memory compare.
    228           *
    229           * @param   src1 - source 1 addrexx
    230           * @param   src2 - source 2 address
    231           * @param   len - number of bytes to compare
    232           *
    233           * @return  TRUE - same, FALSE - different
    234           */
    235          uint8 osal_memcmp( const void GENERIC *src1, const void GENERIC *src2, unsigned int len )
    236          {
    237            const uint8 GENERIC *pSrc1;
    238            const uint8 GENERIC *pSrc2;
    239          
    240            pSrc1 = src1;
    241            pSrc2 = src2;
    242          
    243            while ( len-- )
    244            {
    245              if( *pSrc1++ != *pSrc2++ )
    246                return FALSE;
    247            }
    248            return TRUE;
    249          }
    250          
    251          
    252          /*********************************************************************
    253           * @fn      osal_memset
    254           *
    255           * @brief
    256           *
    257           *   Set memory buffer to value.
    258           *
    259           * @param   dest - pointer to buffer
    260           * @param   value - what to set each uint8 of the message
    261           * @param   size - how big
    262           *
    263           * @return  pointer to destination buffer
    264           */
    265          void *osal_memset( void *dest, uint8 value, int len )
    266          {
    267            return memset( dest, value, len );
    268          }
    269          
    270          /*********************************************************************
    271           * @fn      osal_build_uint16
    272           *
    273           * @brief
    274           *
    275           *   Build a uint16 out of 2 bytes (0 then 1).
    276           *
    277           * @param   swapped - 0 then 1
    278           *
    279           * @return  uint16
    280           */
    281          uint16 osal_build_uint16( uint8 *swapped )
    282          {
    283            return ( BUILD_UINT16( swapped[0], swapped[1] ) );
    284          }
    285          
    286          /*********************************************************************
    287           * @fn      osal_build_uint32
    288           *
    289           * @brief
    290           *
    291           *   Build a uint32 out of sequential bytes.
    292           *
    293           * @param   swapped - sequential bytes
    294           * @param   len - number of bytes in the uint8 array
    295           *
    296           * @return  uint32
    297           */
    298          uint32 osal_build_uint32( uint8 *swapped, uint8 len )
    299          {
    300            if ( len == 2 )
    301              return ( BUILD_UINT32( swapped[0], swapped[1], 0L, 0L ) );
    302            else if ( len == 3 )
    303              return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], 0L ) );
    304            else if ( len == 4 )
    305              return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], swapped[3] ) );
    306            else
    307              return ( (uint32)swapped[0] );
    308          }
    309          
    310          #if !defined ( ZBIT ) && !defined ( ZBIT2 ) && !defined (UBIT)
    311          /*********************************************************************
    312           * @fn      _ltoa
    313           *
    314           * @brief
    315           *
    316           *   convert a long unsigned int to a string.
    317           *
    318           * @param  l - long to convert
    319           * @param  buf - buffer to convert to
    320           * @param  radix - 10 dec, 16 hex
    321           *
    322           * @return  pointer to buffer
    323           */
    324          unsigned char * _ltoa(unsigned long l, unsigned char *buf, unsigned char radix)
    325          {
    326          #if defined( __GNUC__ )
    327            return ( (char*)ltoa( l, buf, radix ) );
    328          #else
    329            unsigned char tmp1[10] = "", tmp2[10] = "", tmp3[10] = "";
    330            unsigned short num1, num2, num3;
    331            unsigned char i;
    332          
    333            buf[0] = '\0';
    334          
    335            if ( radix == 10 )
    336            {
    337              num1 = l % 10000;
    338              num2 = (l / 10000) % 10000;
    339              num3 = (unsigned short)(l / 100000000);
    340          
    341              if (num3) _itoa(num3, tmp3, 10);
    342              if (num2) _itoa(num2, tmp2, 10);
    343              if (num1) _itoa(num1, tmp1, 10);
    344          
    345              if (num3)
    346              {
    347                strcpy((char*)buf, (char const*)tmp3);
    348                for (i = 0; i < 4 - strlen((char const*)tmp2); i++)
    349                  strcat((char*)buf, "0");
    350              }
    351              strcat((char*)buf, (char const*)tmp2);
    352              if (num3 || num2)
    353              {
    354                for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
    355                  strcat((char*)buf, "0");
    356              }
    357              strcat((char*)buf, (char const*)tmp1);
    358              if (!num3 && !num2 && !num1)
    359                strcpy((char*)buf, "0");
    360            }
    361            else if ( radix == 16 )
    362            {
    363              num1 = l & 0x0000FFFF;
    364              num2 = l >> 16;
    365          
    366              if (num2) _itoa(num2, tmp2, 16);
    367              if (num1) _itoa(num1, tmp1, 16);
    368          
    369              if (num2)
    370              {
    371                strcpy((char*)buf,(char const*)tmp2);
    372                for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
    373                  strcat((char*)buf, "0");
    374              }
    375              strcat((char*)buf, (char const*)tmp1);
    376              if (!num2 && !num1)
    377                strcpy((char*)buf, "0");
    378            }
    379            else
    380              return NULL;
    381          
    382            return buf;
    383          #endif
    384          }
    385          #endif // !defined(ZBIT) && !defined(ZBIT2)
    386          
    387          /*********************************************************************
    388           * @fn        osal_rand
    389           *
    390           * @brief    Random number generator
    391           *
    392           * @param   none
    393           *
    394           * @return  uint16 - new random number
    395           */
    396          uint16 osal_rand( void )
    397          {
    398            return ( Onboard_rand() );
    399          }
    400          
    401          /*********************************************************************
    402           * API FUNCTIONS
    403           *********************************************************************/
    404          
    405          /*********************************************************************
    406           * @fn      osal_msg_allocate
    407           *
    408           * @brief
    409           *
    410           *    This function is called by a task to allocate a message buffer
    411           *    into which the task will encode the particular message it wishes
    412           *    to send.  This common buffer scheme is used to strictly limit the
    413           *    creation of message buffers within the system due to RAM size
    414           *    limitations on the microprocessor.   Note that all message buffers
    415           *    are a fixed size (at least initially).  The parameter len is kept
    416           *    in case a message pool with varying fixed message sizes is later
    417           *    created (for example, a pool of message buffers of size LARGE,
    418           *    MEDIUM and SMALL could be maintained and allocated based on request
    419           *    from the tasks).
    420           *
    421           *
    422           * @param   uint8 len  - wanted buffer length
    423           *
    424           *
    425           * @return  pointer to allocated buffer or NULL if allocation failed.
    426           */
    427          uint8 * osal_msg_allocate( uint16 len )
    428          {
    429            osal_msg_hdr_t *hdr;
    430          
    431            if ( len == 0 )
    432              return ( NULL );
    433          
    434            hdr = (osal_msg_hdr_t *) osal_mem_alloc( (short)(len + sizeof( osal_msg_hdr_t )) );
    435            if ( hdr )
    436            {
    437              hdr->next = NULL;
    438              hdr->len = len;
    439              hdr->dest_id = TASK_NO_TASK;
    440              return ( (uint8 *) (hdr + 1) );
    441            }
    442            else
    443              return ( NULL );
    444          }
    445          
    446          /*********************************************************************
    447           * @fn      osal_msg_deallocate
    448           *
    449           * @brief
    450           *
    451           *    This function is used to deallocate a message buffer. This function
    452           *    is called by a task (or processing element) after it has finished
    453           *    processing a received message.
    454           *
    455           *
    456           * @param   uint8 *msg_ptr - pointer to new message buffer
    457           *
    458           * @return  SUCCESS, INVALID_MSG_POINTER
    459           */
    460          uint8 osal_msg_deallocate( uint8 *msg_ptr )
    461          {
    462            uint8 *x;
    463          
    464            if ( msg_ptr == NULL )
    465              return ( INVALID_MSG_POINTER );
    466          
    467            // don't deallocate queued buffer
    468            if ( OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
    469              return ( MSG_BUFFER_NOT_AVAIL );
    470          
    471            x = (uint8 *)((uint8 *)msg_ptr - sizeof( osal_msg_hdr_t ));
    472          
    473            osal_mem_free( (void *)x );
    474          
    475            return ( SUCCESS );
    476          }
    477          
    478          /*********************************************************************
    479           * @fn      osal_msg_send
    480           *
    481           * @brief
    482           *
    483           *    This function is called by a task to send a command message to
    484           *    another task or processing element.  The sending_task field must
    485           *    refer to a valid task, since the task ID will be used
    486           *    for the response message.  This function will also set a message
    487           *    ready event in the destination tasks event list.
    488           *
    489           *
    490           * @param   uint8 destination_task - Send msg to Task ID
    491           * @param   uint8 *msg_ptr - pointer to new message buffer
    492           *
    493           * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
    494           */
    495          uint8 osal_msg_send( uint8 destination_task, uint8 *msg_ptr )
    496          {
    497            return ( osal_msg_enqueue_push( destination_task, msg_ptr, FALSE ) );
    498          }
    499          
    500          /*********************************************************************
    501           * @fn      osal_msg_push_front
    502           *
    503           * @brief
    504           *
    505           *    This function is called by a task to push a command message
    506           *    to the head of the OSAL queue. The destination_task field
    507           *    must refer to a valid task, since the task ID will be used to
    508           *    send the message to. This function will also set a message
    509           *    ready event in the destination task's event list.
    510           *
    511           * @param   uint8 destination_task - Send msg to Task ID
    512           * @param   uint8 *msg_ptr - pointer to message buffer
    513           *
    514           * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
    515           */
    516          uint8 osal_msg_push_front( uint8 destination_task, uint8 *msg_ptr )
    517          {
    518            return ( osal_msg_enqueue_push( destination_task, msg_ptr, TRUE ) );
    519          }
    520          
    521          /*********************************************************************
    522           * @fn      osal_msg_enqueue_push
    523           *
    524           * @brief
    525           *
    526           *    This function is called by a task to either enqueue (append to
    527           *    queue) or push (prepend to queue) a command message to the OSAL
    528           *    queue. The destination_task field must refer to a valid task,
    529           *    since the task ID will be used to send the message to. This 
    530           *    function will also set a message ready event in the destination
    531           *    task's event list.
    532           *
    533           * @param   uint8 destination_task - Send msg to Task ID
    534           * @param   uint8 *msg_ptr - pointer to message buffer
    535           * @param   uint8 push - TRUE to push, otherwise enqueue
    536           *
    537           * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
    538           */
    539          static uint8 osal_msg_enqueue_push( uint8 destination_task, uint8 *msg_ptr, uint8 push )
    540          {
    541            if ( msg_ptr == NULL )
    542            {
    543              return ( INVALID_MSG_POINTER );
    544            }
    545          
    546            if ( destination_task >= tasksCnt )
    547            {
    548              osal_msg_deallocate( msg_ptr );
    549              return ( INVALID_TASK );
    550            }
    551          
    552            // Check the message header
    553            if ( OSAL_MSG_NEXT( msg_ptr ) != NULL ||
    554                 OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
    555            {
    556              osal_msg_deallocate( msg_ptr );
    557              return ( INVALID_MSG_POINTER );
    558            }
    559          
    560            OSAL_MSG_ID( msg_ptr ) = destination_task;
    561          
    562            if ( push == TRUE )
    563            {
    564              // prepend the message
    565              osal_msg_push( &osal_qHead, msg_ptr );
    566            }
    567            else
    568            {
    569              // append the message
    570              osal_msg_enqueue( &osal_qHead, msg_ptr );
    571            }
    572          
    573            // Signal the task that a message is waiting
    574            osal_set_event( destination_task, SYS_EVENT_MSG );
    575          
    576            return ( SUCCESS );
    577          }
    578          
    579          /*********************************************************************
    580           * @fn      osal_msg_receive
    581           *
    582           * @brief
    583           *
    584           *    This function is called by a task to retrieve a received command
    585           *    message. The calling task must deallocate the message buffer after
    586           *    processing the message using the osal_msg_deallocate() call.
    587           *
    588           * @param   uint8 task_id - receiving tasks ID
    589           *
    590           * @return  *uint8 - message information or NULL if no message
    591           */
    592          uint8 *osal_msg_receive( uint8 task_id )
    593          {
    594            osal_msg_hdr_t *listHdr;
    595            osal_msg_hdr_t *prevHdr = NULL;
    596            osal_msg_hdr_t *foundHdr = NULL;
    597            halIntState_t   intState;
    598          
    599            // Hold off interrupts
    600            HAL_ENTER_CRITICAL_SECTION(intState);
    601          
    602            // Point to the top of the queue
    603            listHdr = osal_qHead;
    604          
    605            // Look through the queue for a message that belongs to the asking task
    606            while ( listHdr != NULL )
    607            {
    608              if ( (listHdr - 1)->dest_id == task_id )
    609              {
    610                if ( foundHdr == NULL )
    611                {
    612                  // Save the first one
    613                  foundHdr = listHdr;
    614                }
    615                else
    616                {
    617                  // Second msg found, stop looking
    618                  break;
    619                }
    620              }
    621              if ( foundHdr == NULL )
    622              {
    623                prevHdr = listHdr;
    624              }
    625              listHdr = OSAL_MSG_NEXT( listHdr );
    626            }
    627          
    628            // Is there more than one?
    629            if ( listHdr != NULL )
    630            {
    631              // Yes, Signal the task that a message is waiting
    632              osal_set_event( task_id, SYS_EVENT_MSG );
    633            }
    634            else
    635            {
    636              // No more
    637              osal_clear_event( task_id, SYS_EVENT_MSG );
    638            }
    639          
    640            // Did we find a message?
    641            if ( foundHdr != NULL )
    642            {
    643              // Take out of the link list
    644              osal_msg_extract( &osal_qHead, foundHdr, prevHdr );
    645            }
    646          
    647            // Release interrupts
    648            HAL_EXIT_CRITICAL_SECTION(intState);
    649          
    650            return ( (uint8*) foundHdr );
    651          }
    652          
    653          /**************************************************************************************************
    654           * @fn          osal_msg_find
    655           *
    656           * @brief       This function finds in place an OSAL message matching the task_id and event
    657           *              parameters.
    658           *
    659           * input parameters
    660           *
    661           * @param       task_id - The OSAL task id that the enqueued OSAL message must match.
    662           * @param       event - The OSAL event id that the enqueued OSAL message must match.
    663           *
    664           * output parameters
    665           *
    666           * None.
    667           *
    668           * @return      NULL if no match, otherwise an in place pointer to the matching OSAL message.
    669           **************************************************************************************************
    670           */
    671          osal_event_hdr_t *osal_msg_find(uint8 task_id, uint8 event)
    672          {
    673            osal_msg_hdr_t *pHdr;
    674            halIntState_t intState;
    675          
    676            HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
    677          
    678            pHdr = osal_qHead;  // Point to the top of the queue.
    679          
    680            // Look through the queue for a message that matches the task_id and event parameters.
    681            while (pHdr != NULL)
    682            {
    683              if (((pHdr-1)->dest_id == task_id) && (((osal_event_hdr_t *)pHdr)->event == event))
    684              {
    685                break;
    686              }
    687          
    688              pHdr = OSAL_MSG_NEXT(pHdr);
    689            }
    690          
    691            HAL_EXIT_CRITICAL_SECTION(intState);  // Release interrupts.
    692          
    693            return (osal_event_hdr_t *)pHdr;
    694          }
    695          
    696          /*********************************************************************
    697           * @fn      osal_msg_enqueue
    698           *
    699           * @brief
    700           *
    701           *    This function enqueues an OSAL message into an OSAL queue.
    702           *
    703           * @param   osal_msg_q_t *q_ptr - OSAL queue
    704           * @param   void *msg_ptr  - OSAL message
    705           *
    706           * @return  none
    707           */
    708          void osal_msg_enqueue( osal_msg_q_t *q_ptr, void *msg_ptr )
    709          {
    710            void *list;
    711            halIntState_t intState;
    712          
    713            // Hold off interrupts
    714            HAL_ENTER_CRITICAL_SECTION(intState);
    715          
    716            OSAL_MSG_NEXT( msg_ptr ) = NULL;
    717            // If first message in queue
    718            if ( *q_ptr == NULL )
    719            {
    720              *q_ptr = msg_ptr;
    721            }
    722            else
    723            {
    724              // Find end of queue
    725              for ( list = *q_ptr; OSAL_MSG_NEXT( list ) != NULL; list = OSAL_MSG_NEXT( list ) );
    726          
    727              // Add message to end of queue
    728              OSAL_MSG_NEXT( list ) = msg_ptr;
    729            }
    730          
    731            // Re-enable interrupts
    732            HAL_EXIT_CRITICAL_SECTION(intState);
    733          }
    734          
    735          /*********************************************************************
    736           * @fn      osal_msg_dequeue
    737           *
    738           * @brief
    739           *
    740           *    This function dequeues an OSAL message from an OSAL queue.
    741           *
    742           * @param   osal_msg_q_t *q_ptr - OSAL queue
    743           *
    744           * @return  void * - pointer to OSAL message or NULL of queue is empty.
    745           */
    746          void *osal_msg_dequeue( osal_msg_q_t *q_ptr )
    747          {
    748            void *msg_ptr = NULL;
    749            halIntState_t intState;
    750          
    751            // Hold off interrupts
    752            HAL_ENTER_CRITICAL_SECTION(intState);
    753          
    754            if ( *q_ptr != NULL )
    755            {
    756              // Dequeue message
    757              msg_ptr = *q_ptr;
    758              *q_ptr = OSAL_MSG_NEXT( msg_ptr );
    759              OSAL_MSG_NEXT( msg_ptr ) = NULL;
    760              OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
    761            }
    762          
    763            // Re-enable interrupts
    764            HAL_EXIT_CRITICAL_SECTION(intState);
    765          
    766            return msg_ptr;
    767          }
    768          
    769          /*********************************************************************
    770           * @fn      osal_msg_push
    771           *
    772           * @brief
    773           *
    774           *    This function pushes an OSAL message to the head of an OSAL
    775           *    queue.
    776           *
    777           * @param   osal_msg_q_t *q_ptr - OSAL queue
    778           * @param   void *msg_ptr  - OSAL message
    779           *
    780           * @return  none
    781           */
    782          void osal_msg_push( osal_msg_q_t *q_ptr, void *msg_ptr )
    783          {
    784            halIntState_t intState;
    785          
    786            // Hold off interrupts
    787            HAL_ENTER_CRITICAL_SECTION(intState);
    788          
    789            // Push message to head of queue
    790            OSAL_MSG_NEXT( msg_ptr ) = *q_ptr;
    791            *q_ptr = msg_ptr;
    792          
    793            // Re-enable interrupts
    794            HAL_EXIT_CRITICAL_SECTION(intState);
    795          }
    796          
    797          /*********************************************************************
    798           * @fn      osal_msg_extract
    799           *
    800           * @brief
    801           *
    802           *    This function extracts and removes an OSAL message from the
    803           *    middle of an OSAL queue.
    804           *
    805           * @param   osal_msg_q_t *q_ptr - OSAL queue
    806           * @param   void *msg_ptr  - OSAL message to be extracted
    807           * @param   void *prev_ptr  - OSAL message before msg_ptr in queue
    808           *
    809           * @return  none
    810           */
    811          void osal_msg_extract( osal_msg_q_t *q_ptr, void *msg_ptr, void *prev_ptr )
    812          {
    813            halIntState_t intState;
    814          
    815            // Hold off interrupts
    816            HAL_ENTER_CRITICAL_SECTION(intState);
    817          
    818            if ( msg_ptr == *q_ptr )
    819            {
    820              // remove from first
    821              *q_ptr = OSAL_MSG_NEXT( msg_ptr );
    822            }
    823            else
    824            {
    825              // remove from middle
    826              OSAL_MSG_NEXT( prev_ptr ) = OSAL_MSG_NEXT( msg_ptr );
    827            }
    828            OSAL_MSG_NEXT( msg_ptr ) = NULL;
    829            OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
    830          
    831            // Re-enable interrupts
    832            HAL_EXIT_CRITICAL_SECTION(intState);
    833          }
    834          
    835          /*********************************************************************
    836           * @fn      osal_msg_enqueue_max
    837           *
    838           * @brief
    839           *
    840           *    This function enqueues an OSAL message into an OSAL queue if
    841           *    the length of the queue is less than max.
    842           *
    843           * @param   osal_msg_q_t *q_ptr - OSAL queue
    844           * @param   void *msg_ptr  - OSAL message
    845           * @param   uint8 max - maximum length of queue
    846           *
    847           * @return  TRUE if message was enqueued, FALSE otherwise
    848           */
    849          uint8 osal_msg_enqueue_max( osal_msg_q_t *q_ptr, void *msg_ptr, uint8 max )
    850          {
    851            void *list;
    852            uint8 ret = FALSE;
    853            halIntState_t intState;
    854          
    855            // Hold off interrupts
    856            HAL_ENTER_CRITICAL_SECTION(intState);
    857          
    858            // If first message in queue
    859            if ( *q_ptr == NULL )
    860            {
    861              *q_ptr = msg_ptr;
    862              ret = TRUE;
    863            }
    864            else
    865            {
    866              // Find end of queue or max
    867              list = *q_ptr;
    868              max--;
    869              while ( (OSAL_MSG_NEXT( list ) != NULL) && (max > 0) )
    870              {
    871                list = OSAL_MSG_NEXT( list );
    872                max--;
    873              }
    874          
    875              // Add message to end of queue if max not reached
    876              if ( max != 0 )
    877              {
    878                OSAL_MSG_NEXT( list ) = msg_ptr;
    879                ret = TRUE;
    880              }
    881            }
    882          
    883            // Re-enable interrupts
    884            HAL_EXIT_CRITICAL_SECTION(intState);
    885          
    886            return ret;
    887          }
    888          
    889          /*********************************************************************
    890           * @fn      osal_set_event
    891           *
    892           * @brief
    893           *
    894           *    This function is called to set the event flags for a task. The
    895           *    event passed in is OR'd into the task's event variable.
    896           *
    897           * @param   uint8 task_id - receiving tasks ID
    898           * @param   uint8 event_flag - what event to set
    899           *
    900           * @return  SUCCESS, INVALID_TASK
    901           */
    902          uint8 osal_set_event( uint8 task_id, uint16 event_flag )
    903          {
    904            if ( task_id < tasksCnt )
    905            {
    906              halIntState_t   intState;
    907              HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
    908              tasksEvents[task_id] |= event_flag;  // Stuff the event bit(s)
    909              HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
    910              return ( SUCCESS );
    911            }
    912             else
    913            {
    914              return ( INVALID_TASK );
    915            }
    916          }
    917          
    918          /*********************************************************************
    919           * @fn      osal_clear_event
    920           *
    921           * @brief
    922           *
    923           *    This function is called to clear the event flags for a task. The
    924           *    event passed in is masked out of the task's event variable.
    925           *
    926           * @param   uint8 task_id - receiving tasks ID
    927           * @param   uint8 event_flag - what event to clear
    928           *
    929           * @return  SUCCESS, INVALID_TASK
    930           */
    931          uint8 osal_clear_event( uint8 task_id, uint16 event_flag )
    932          {
    933            if ( task_id < tasksCnt )
    934            {
    935              halIntState_t   intState;
    936              HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
    937              tasksEvents[task_id] &= ~(event_flag);   // Clear the event bit(s)
    938              HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
    939              return ( SUCCESS );
    940            }
    941             else
    942            {
    943              return ( INVALID_TASK );
    944            }
    945          }
    946          
    947          /*********************************************************************
    948           * @fn      osal_isr_register
    949           *
    950           * @brief
    951           *
    952           *   This function is called to register a service routine with an
    953           *   interrupt. When the interrupt occurs, this service routine is called.
    954           *
    955           * @param   uint8 interrupt_id - Interrupt number
    956           * @param   void (*isr_ptr)( uint8* ) - function pointer to ISR
    957           *
    958           * @return  SUCCESS, INVALID_INTERRUPT_ID,
    959           */
    960          uint8 osal_isr_register( uint8 interrupt_id, void (*isr_ptr)( uint8* ) )
    961          {
    962            // Remove these statements when functionality is complete
    963            (void)interrupt_id;
    964            (void)isr_ptr;
    965            return ( SUCCESS );
    966          }
    967          
    968          /*********************************************************************
    969           * @fn      osal_int_enable
    970           *
    971           * @brief
    972           *
    973           *   This function is called to enable an interrupt. Once enabled,
    974           *   occurrence of the interrupt causes the service routine associated
    975           *   with that interrupt to be called.
    976           *
    977           *   If INTS_ALL is the interrupt_id, interrupts (in general) are enabled.
    978           *   If a single interrupt is passed in, then interrupts still have
    979           *   to be enabled with another call to INTS_ALL.
    980           *
    981           * @param   uint8 interrupt_id - Interrupt number
    982           *
    983           * @return  SUCCESS or INVALID_INTERRUPT_ID
    984           */
    985          uint8 osal_int_enable( uint8 interrupt_id )
    986          {
    987          
    988            if ( interrupt_id == INTS_ALL )
    989            {
    990              HAL_ENABLE_INTERRUPTS();
    991              return ( SUCCESS );
    992            }
    993            else
    994            {
    995              return ( INVALID_INTERRUPT_ID );
    996            }
    997          }
    998          
    999          /*********************************************************************
   1000           * @fn      osal_int_disable
   1001           *
   1002           * @brief
   1003           *
   1004           *   This function is called to disable an interrupt. When a disabled
   1005           *   interrupt occurs, the service routine associated with that
   1006           *   interrupt is not called.
   1007           *
   1008           *   If INTS_ALL is the interrupt_id, interrupts (in general) are disabled.
   1009           *   If a single interrupt is passed in, then just that interrupt is disabled.
   1010           *
   1011           * @param   uint8 interrupt_id - Interrupt number
   1012           *
   1013           * @return  SUCCESS or INVALID_INTERRUPT_ID
   1014           */
   1015          uint8 osal_int_disable( uint8 interrupt_id )
   1016          {
   1017          
   1018            if ( interrupt_id == INTS_ALL )
   1019            {
   1020              HAL_DISABLE_INTERRUPTS();
   1021              return ( SUCCESS );
   1022            }
   1023            else
   1024            {
   1025              return ( INVALID_INTERRUPT_ID );
   1026            }
   1027          }
   1028          
   1029          /*********************************************************************
   1030           * @fn      osal_init_system
   1031           *
   1032           * @brief
   1033           *
   1034           *   This function initializes the "task" system by creating the
   1035           *   tasks defined in the task table (OSAL_Tasks.h).
   1036           *
   1037           * @param   void
   1038           *
   1039           * @return  SUCCESS
   1040           */
   1041          uint8 osal_init_system( void )
   1042          {
   1043            // Initialize the Memory Allocation System
   1044            osal_mem_init();
   1045          
   1046            // Initialize the message queue
   1047            osal_qHead = NULL;
   1048          
   1049            // Initialize the timers
   1050            osalTimerInit();
   1051          
   1052            // Initialize the Power Management System
   1053            osal_pwrmgr_init();
   1054          
   1055            // Initialize the system tasks.
   1056            osalInitTasks();
   1057          
   1058            // Setup efficient search for the first free block of heap.
   1059            osal_mem_kick();
   1060          
   1061            return ( SUCCESS );
   1062          }
   1063          
   1064          /*********************************************************************
   1065           * @fn      osal_start_system
   1066           *
   1067           * @brief
   1068           *
   1069           *   This function is the main loop function of the task system (if
   1070           *   ZBIT and UBIT are not defined). This Function doesn't return.
   1071           *
   1072           * @param   void
   1073           *
   1074           * @return  none
   1075           */
   1076          void osal_start_system( void )
   1077          {
   1078          #if !defined ( ZBIT ) && !defined ( UBIT )
   1079            for(;;)  // Forever Loop
   1080          #endif
   1081            {
   1082              osal_run_system();
   1083            }
   1084          }
   1085          
   1086          /*********************************************************************
   1087           * @fn      osal_run_system
   1088           *
   1089           * @brief
   1090           *
   1091           *   This function will make one pass through the OSAL taskEvents table
   1092           *   and call the task_event_processor() function for the first task that
   1093           *   is found with at least one event pending. If there are no pending
   1094           *   events (all tasks), this function puts the processor into Sleep.
   1095           *
   1096           * @param   void
   1097           *
   1098           * @return  none
   1099           */
   1100          void osal_run_system( void )
   1101          {
   1102            uint8 idx = 0;
   1103          
   1104          #ifndef HAL_BOARD_CC2538
   1105            osalTimeUpdate();
   1106          #endif
   1107            
   1108            Hal_ProcessPoll();
   1109          
   1110            do {
   1111              if (tasksEvents[idx])  // Task is highest priority that is ready.
   1112              {
   1113                break;
   1114              }
   1115            } while (++idx < tasksCnt);
   1116          
   1117            if (idx < tasksCnt)
   1118            {
   1119              uint16 events;
   1120              halIntState_t intState;
   1121          
   1122              HAL_ENTER_CRITICAL_SECTION(intState);
   1123              events = tasksEvents[idx];
   1124              tasksEvents[idx] = 0;  // Clear the Events for this task.
   1125              HAL_EXIT_CRITICAL_SECTION(intState);
   1126          
   1127              activeTaskID = idx;
   1128              events = (tasksArr[idx])( idx, events );
   1129              activeTaskID = TASK_NO_TASK;
   1130          
   1131              HAL_ENTER_CRITICAL_SECTION(intState);
   1132              tasksEvents[idx] |= events;  // Add back unprocessed events to the current task.
   1133              HAL_EXIT_CRITICAL_SECTION(intState);
   1134            }
   1135          #if defined( POWER_SAVING )
   1136            else  // Complete pass through all task events with no activity?
   1137            {
   1138              osal_pwrmgr_powerconserve();  // Put the processor/system into sleep
   1139            }
   1140          #endif
   1141          
   1142            /* Yield in case cooperative scheduling is being used. */
   1143          #if defined (configUSE_PREEMPTION) && (configUSE_PREEMPTION == 0)
   1144            {
   1145              osal_task_yield();
   1146            }
   1147          #endif
   1148          }
   1149          
   1150          /*********************************************************************
   1151           * @fn      osal_buffer_uint32
   1152           *
   1153           * @brief
   1154           *
   1155           *   Buffer an uint32 value - LSB first.
   1156           *
   1157           * @param   buf - buffer
   1158           * @param   val - uint32 value
   1159           *
   1160           * @return  pointer to end of destination buffer
   1161           */
   1162          uint8* osal_buffer_uint32( uint8 *buf, uint32 val )
   1163          {
   1164            *buf++ = BREAK_UINT32( val, 0 );
   1165            *buf++ = BREAK_UINT32( val, 1 );
   1166            *buf++ = BREAK_UINT32( val, 2 );
   1167            *buf++ = BREAK_UINT32( val, 3 );
   1168          
   1169            return buf;
   1170          }
   1171          
   1172          /*********************************************************************
   1173           * @fn      osal_buffer_uint24
   1174           *
   1175           * @brief
   1176           *
   1177           *   Buffer an uint24 value - LSB first. Note that type uint24 is
   1178           *   typedef to uint32 in comdef.h
   1179           *
   1180           * @param   buf - buffer
   1181           * @param   val - uint24 value
   1182           *
   1183           * @return  pointer to end of destination buffer
   1184           */
   1185          uint8* osal_buffer_uint24( uint8 *buf, uint24 val )
   1186          {
   1187            *buf++ = BREAK_UINT32( val, 0 );
   1188            *buf++ = BREAK_UINT32( val, 1 );
   1189            *buf++ = BREAK_UINT32( val, 2 );
   1190          
   1191            return buf;
   1192          }
   1193          
   1194          /*********************************************************************
   1195           * @fn      osal_isbufset
   1196           *
   1197           * @brief
   1198           *
   1199           *   Is all of the array elements set to a value?
   1200           *
   1201           * @param   buf - buffer to check
   1202           * @param   val - value to check each array element for
   1203           * @param   len - length to check
   1204           *
   1205           * @return  TRUE if all "val"
   1206           *          FALSE otherwise
   1207           */
   1208          uint8 osal_isbufset( uint8 *buf, uint8 val, uint8 len )
   1209          {
   1210            uint8 x;
   1211          
   1212            if ( buf == NULL )
   1213            {
   1214              return ( FALSE );
   1215            }
   1216          
   1217            for ( x = 0; x < len; x++ )
   1218            {
   1219              // Check for non-initialized value
   1220              if ( buf[x] != val )
   1221              {
   1222                return ( FALSE );
   1223              }
   1224            }
   1225            return ( TRUE );
   1226          }
   1227          
   1228          /*********************************************************************
   1229           * @fn      osal_self
   1230           *
   1231           * @brief
   1232           *
   1233           *   This function returns the task ID of the current (active) task.
   1234           *
   1235           * @param   void
   1236           *
   1237           * @return   active task ID or TASK_NO_TASK if no task is active
   1238           */
   1239          uint8 osal_self( void )
   1240          {
   1241            return ( activeTaskID );
   1242          }
   1243          
   1244          /*********************************************************************
   1245           */

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0     59  _ltoa
                          0 0 57 -> _itoa
                          0 0 57 -> strcat
                          0 0 57 -> strcpy
                          0 0 57 -> strlen
       1      0     20  osal_buffer_uint24
       1      0     20  osal_buffer_uint32
       2      0      0  osal_build_uint16
       0      0     16  osal_build_uint32
       0      0     23  osal_clear_event
       2      0      0  osal_init_system
                          2 0  0 -> osalInitTasks
                          2 0  0 -> osalTimerInit
                          2 0  0 -> osal_mem_init
                          2 0  0 -> osal_mem_kick
                          2 0  0 -> osal_pwrmgr_init
       0      0      0  osal_int_disable
       0      0      0  osal_int_enable
       0      0     10  osal_isbufset
       0      0      0  osal_isr_register
       0      0     13  osal_memcmp
       1      0     25  osal_memcpy
       0      0     16  osal_memdup
                          0 0 14 -> osal_mem_alloc
                          0 0 16 -> osal_memcpy
       0      0     12  osal_memset
                          0 0 12 -> memset
       0      0     10  osal_msg_allocate
                          0 0 10 -> osal_mem_alloc
       2      0      9  osal_msg_deallocate
                          2 0  0 -> osal_mem_free
       0      0     10  osal_msg_dequeue
       0      0     18  osal_msg_enqueue
       0      0      9  osal_msg_enqueue_max
       1      0     18  osal_msg_enqueue_push
                          0 0  9 -> osal_msg_deallocate
                          0 0  9 -> osal_msg_enqueue
                          0 0  9 -> osal_msg_push
                          0 0  9 -> osal_set_event
       0      0     29  osal_msg_extract
       2      0      0  osal_msg_find
       0      0     18  osal_msg_push
       0      0      9  osal_msg_push_front
                          0 0  9 -> osal_msg_enqueue_push
       0      0     16  osal_msg_receive
                          0 0 14 -> osal_clear_event
                          0 0 16 -> osal_msg_extract
                          0 0 14 -> osal_set_event
       0      0      9  osal_msg_send
                          0 0  9 -> osal_msg_enqueue_push
       2      0      0  osal_rand
                          2 0  0 -> Onboard_rand
       1      0     11  osal_revmemcpy
       0      0     12  osal_run_system
                          0 0 12 -> Hal_ProcessPoll
                          0 0 12 -> osalTimeUpdate
                          0 0 12 -> osal_pwrmgr_powerconserve
       2      0      0  osal_self
       0      0     23  osal_set_event
       2      0      0  osal_start_system
                          2 0  0 -> osal_run_system
       2      0      0  osal_strlen
                          2 0  0 -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
       1  ?<Constant "">_1
       1  ?<Constant "">_2
       2  ?<Constant "0">
       1  ?<Initializer for activeTaskID>
       5  ??Subroutine21_0
       3  ??Subroutine22_0
       5  ??Subroutine23_0
       8  ??Subroutine24_0
       5  ??Subroutine25_0
       6  ??_ltoa?relay
       6  ??osal_buffer_uint24?relay
       6  ??osal_buffer_uint32?relay
       6  ??osal_build_uint16?relay
       6  ??osal_build_uint32?relay
       6  ??osal_clear_event?relay
       6  ??osal_init_system?relay
       6  ??osal_int_disable?relay
       6  ??osal_int_enable?relay
       6  ??osal_isbufset?relay
       6  ??osal_isr_register?relay
       6  ??osal_memcmp?relay
       6  ??osal_memcpy?relay
       6  ??osal_memdup?relay
       6  ??osal_memset?relay
       6  ??osal_msg_allocate?relay
       6  ??osal_msg_deallocate?relay
       6  ??osal_msg_dequeue?relay
       6  ??osal_msg_enqueue?relay
       6  ??osal_msg_enqueue_max?relay
       6  ??osal_msg_enqueue_push?relay
       6  ??osal_msg_extract?relay
       6  ??osal_msg_find?relay
       6  ??osal_msg_push?relay
       6  ??osal_msg_push_front?relay
       6  ??osal_msg_receive?relay
       6  ??osal_msg_send?relay
       6  ??osal_rand?relay
       6  ??osal_revmemcpy?relay
       6  ??osal_run_system?relay
       6  ??osal_self?relay
       6  ??osal_set_event?relay
       6  ??osal_start_system?relay
       6  ??osal_strlen?relay
       7  ?Subroutine0
       3  ?Subroutine1
       6  ?Subroutine10
      20  ?Subroutine11
      15  ?Subroutine12
       9  ?Subroutine13
      13  ?Subroutine14
       3  ?Subroutine15
      10  ?Subroutine16
      10  ?Subroutine17
      21  ?Subroutine18
      13  ?Subroutine19
       9  ?Subroutine2
      14  ?Subroutine20
       5  ?Subroutine3
      13  ?Subroutine4
       4  ?Subroutine5
       6  ?Subroutine6
       4  ?Subroutine7
       8  ?Subroutine8
       6  ?Subroutine9
       1  _A_IEN0
       4  __Constant_2710
       4  __Constant_5f5e100
     699  _ltoa
       1  activeTaskID
      31  osal_buffer_uint24
      46  osal_buffer_uint32
      23  osal_build_uint16
     125  osal_build_uint32
      55  osal_clear_event
      31  osal_init_system
      18  osal_int_disable
      18  osal_int_enable
      46  osal_isbufset
       5  osal_isr_register
      90  osal_memcmp
      62  osal_memcpy
      49  osal_memdup
      33  osal_memset
      77  osal_msg_allocate
      34  osal_msg_deallocate
      77  osal_msg_dequeue
      47  osal_msg_enqueue
      61  osal_msg_enqueue_max
      95  osal_msg_enqueue_push
     116  osal_msg_extract
      54  osal_msg_find
      48  osal_msg_push
      10  osal_msg_push_front
     140  osal_msg_receive
      10  osal_msg_send
       2  osal_qHead
       9  osal_rand
      73  osal_revmemcpy
     164  osal_run_system
      12  osal_self
      65  osal_set_event
       9  osal_start_system
      10  osal_strlen

 
 2 667 bytes in segment BANKED_CODE
   204 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    13 bytes in segment XDATA_ROM_C
     2 bytes in segment XDATA_Z
 
 2 872 bytes of CODE  memory
     5 bytes of CONST memory (+ 8 bytes shared)
     0 bytes of DATA  memory (+ 1 byte  shared)
     3 bytes of XDATA memory

Errors: none
Warnings: 1
