###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             28/Feb/2014  16:48:37 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Components\os #
#                          al\common\OSAL_Timers.c                            #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\config\b #
#                          uildComponents.cfg (-DBROADCASTER_CFG=0x01         #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheralzeke\CC2541DB\buildCo #
#                          nfig.cfg (-DHOST_CONFIG=PERIPHERAL_CFG             #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Components\os #
#                          al\common\OSAL_Timers.c -D INT_HEAP_LEN=3074 -D    #
#                          HALNODEBUG -D OSAL_CBTIMER_NUM_TASKS=1 -D          #
#                          HAL_AES_DMA=TRUE -D HAL_DMA=TRUE -D POWER_SAVING   #
#                          -D xPLUS_BROADCASTER -D HAL_LCD=TRUE -D            #
#                          HAL_LED=TRUE -D HAL_UART=TRUE -lcN                 #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\ -o   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\ -e    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\common\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\include\ #
#                           -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ #
#                          ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\C #
#                          omponents\hal\include\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\hal\target\CC2541EB\ -I                      #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\osal\include\ -I E:\TexasInstruments\BLE-CC2 #
#                          54x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2 #
#                          541DB\..\..\..\..\Components\services\saddr\ -I    #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\include\ -I E:\TexasInstruments\BLE-CC25 #
#                          4x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC25 #
#                          41DB\..\..\..\..\Components\ble\controller\phy\    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Co #
#                          mponents\ble\controller\include\ -I                #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\..\..\Components\ble\host\ -I               #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\common\cc25 #
#                          40\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\comm #
#                          on\npi\npi_np\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\Profiles\Roles\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Si #
#                          mpleProfile\ -I E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB\. #
#                          .\..\Profiles\DevInfo\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Ba #
#                          tt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\Prof #
#                          iles\HIDDev\ -Ohz                                  #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\OSAL_ #
#                          Timers.lst                                         #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\OSAL_T #
#                          imers.r51                                          #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Components\osal\common\OSAL_Timers.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Timers.c
      3            Revised:        $Date: 2012-11-28 00:37:02 -0800 (Wed, 28 Nov 2012) $
      4            Revision:       $Revision: 32329 $
      5          
      6            Description:    OSAL Timer definition and manipulation functions.
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "comdef.h"
     45          #include "OnBoard.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Timers.h"
     48          #include "hal_timer.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          
     58          /*********************************************************************
     59           * TYPEDEFS
     60           */
     61          
     62          typedef union {
     63            uint32 time32;
     64            uint16 time16[2];
     65            uint8 time8[4];
     66          } osalTime_t;
     67          
     68          typedef struct
     69          {
     70            void   *next;
     71            osalTime_t timeout;
     72            uint16 event_flag;
     73            uint8  task_id;
     74            uint32 reloadTimeout;
     75          } osalTimerRec_t;
     76          
     77          /*********************************************************************
     78           * GLOBAL VARIABLES
     79           */
     80          
     81          osalTimerRec_t *timerHead;
     82          
     83          /*********************************************************************
     84           * EXTERNAL VARIABLES
     85           */
     86          
     87          /*********************************************************************
     88           * EXTERNAL FUNCTIONS
     89           */
     90          
     91          /*********************************************************************
     92           * LOCAL VARIABLES
     93           */
     94          // Milliseconds since last reboot
     95          static uint32 osal_systemClock;
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTION PROTOTYPES
     99           */
    100          osalTimerRec_t  *osalAddTimer( uint8 task_id, uint16 event_flag, uint32 timeout );
    101          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag );
    102          void osalDeleteTimer( osalTimerRec_t *rmTimer );
    103          
    104          /*********************************************************************
    105           * FUNCTIONS
    106           *********************************************************************/
    107          
    108          /*********************************************************************
    109           * @fn      osalTimerInit
    110           *
    111           * @brief   Initialization for the OSAL Timer System.
    112           *
    113           * @param   none
    114           *
    115           * @return
    116           */
    117          void osalTimerInit( void )
    118          {
    119            osal_systemClock = 0;
    120          }
    121          
    122          /*********************************************************************
    123           * @fn      osalAddTimer
    124           *
    125           * @brief   Add a timer to the timer list.
    126           *          Ints must be disabled.
    127           *
    128           * @param   task_id
    129           * @param   event_flag
    130           * @param   timeout
    131           *
    132           * @return  osalTimerRec_t * - pointer to newly created timer
    133           */
    134          osalTimerRec_t * osalAddTimer( uint8 task_id, uint16 event_flag, uint32 timeout )
    135          {
    136            osalTimerRec_t *newTimer;
    137            osalTimerRec_t *srchTimer;
    138          
    139            // Look for an existing timer first
    140            newTimer = osalFindTimer( task_id, event_flag );
    141            if ( newTimer )
    142            {
    143              // Timer is found - update it.
    144              newTimer->timeout.time32 = timeout;
    145          
    146              return ( newTimer );
    147            }
    148            else
    149            {
    150              // New Timer
    151              newTimer = osal_mem_alloc( sizeof( osalTimerRec_t ) );
    152          
    153              if ( newTimer )
    154              {
    155                // Fill in new timer
    156                newTimer->task_id = task_id;
    157                newTimer->event_flag = event_flag;
    158                newTimer->timeout.time32 = timeout;
    159                newTimer->next = (void *)NULL;
    160                newTimer->reloadTimeout = 0;
    161          
    162                // Does the timer list already exist
    163                if ( timerHead == NULL )
    164                {
    165                  // Start task list
    166                  timerHead = newTimer;
    167                }
    168                else
    169                {
    170                  // Add it to the end of the timer list
    171                  srchTimer = timerHead;
    172          
    173                  // Stop at the last record
    174                  while ( srchTimer->next )
    175                    srchTimer = srchTimer->next;
    176          
    177                  // Add to the list
    178                  srchTimer->next = newTimer;
    179                }
    180          
    181                return ( newTimer );
    182              }
    183              else
    184              {
    185                return ( (osalTimerRec_t *)NULL );
    186              }
    187            }
    188          }
    189          
    190          /*********************************************************************
    191           * @fn      osalFindTimer
    192           *
    193           * @brief   Find a timer in a timer list.
    194           *          Ints must be disabled.
    195           *
    196           * @param   task_id
    197           * @param   event_flag
    198           *
    199           * @return  osalTimerRec_t *
    200           */
    201          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag )
    202          {
    203            osalTimerRec_t *srchTimer;
    204          
    205            // Head of the timer list
    206            srchTimer = timerHead;
    207          
    208            // Stop when found or at the end
    209            while ( srchTimer )
    210            {
    211              if ( srchTimer->event_flag == event_flag &&
    212                   srchTimer->task_id == task_id )
    213              {
    214                break;
    215              }
    216          
    217              // Not this one, check another
    218              srchTimer = srchTimer->next;
    219            }
    220          
    221            return ( srchTimer );
    222          }
    223          
    224          /*********************************************************************
    225           * @fn      osalDeleteTimer
    226           *
    227           * @brief   Delete a timer from a timer list.
    228           *
    229           * @param   table
    230           * @param   rmTimer
    231           *
    232           * @return  none
    233           */
    234          void osalDeleteTimer( osalTimerRec_t *rmTimer )
    235          {
    236            // Does the timer list really exist
    237            if ( rmTimer )
    238            {
    239              // Clear the event flag and osalTimerUpdate() will delete
    240              // the timer from the list.
    241              rmTimer->event_flag = 0;
    242            }
    243          }
    244          
    245          /*********************************************************************
    246           * @fn      osal_start_timerEx
    247           *
    248           * @brief
    249           *
    250           *   This function is called to start a timer to expire in n mSecs.
    251           *   When the timer expires, the calling task will get the specified event.
    252           *
    253           * @param   uint8 taskID - task id to set timer for
    254           * @param   uint16 event_id - event to be notified with
    255           * @param   uint32 timeout_value - in milliseconds.
    256           *
    257           * @return  SUCCESS, or NO_TIMER_AVAIL.
    258           */
    259          uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint32 timeout_value )
    260          {
    261            halIntState_t intState;
    262            osalTimerRec_t *newTimer;
    263          
    264            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    265          
    266            // Add timer
    267            newTimer = osalAddTimer( taskID, event_id, timeout_value );
    268          
    269            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
    270          
    271            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
    272          }
    273          
    274          /*********************************************************************
    275           * @fn      osal_start_reload_timer
    276           *
    277           * @brief
    278           *
    279           *   This function is called to start a timer to expire in n mSecs.
    280           *   When the timer expires, the calling task will get the specified event
    281           *   and the timer will be reloaded with the timeout value.
    282           *
    283           * @param   uint8 taskID - task id to set timer for
    284           * @param   uint16 event_id - event to be notified with
    285           * @param   UNINT16 timeout_value - in milliseconds.
    286           *
    287           * @return  SUCCESS, or NO_TIMER_AVAIL.
    288           */
    289          uint8 osal_start_reload_timer( uint8 taskID, uint16 event_id, uint32 timeout_value )
    290          {
    291            halIntState_t intState;
    292            osalTimerRec_t *newTimer;
    293          
    294            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    295          
    296            // Add timer
    297            newTimer = osalAddTimer( taskID, event_id, timeout_value );
    298            if ( newTimer )
    299            {
    300              // Load the reload timeout value
    301              newTimer->reloadTimeout = timeout_value;
    302            }
    303          
    304            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
    305          
    306            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
    307          }
    308          
    309          /*********************************************************************
    310           * @fn      osal_stop_timerEx
    311           *
    312           * @brief
    313           *
    314           *   This function is called to stop a timer that has already been started.
    315           *   If ZSUCCESS, the function will cancel the timer and prevent the event
    316           *   associated with the timer from being set for the calling task.
    317           *
    318           * @param   uint8 task_id - task id of timer to stop
    319           * @param   uint16 event_id - identifier of the timer that is to be stopped
    320           *
    321           * @return  SUCCESS or INVALID_EVENT_ID
    322           */
    323          uint8 osal_stop_timerEx( uint8 task_id, uint16 event_id )
    324          {
    325            halIntState_t intState;
    326            osalTimerRec_t *foundTimer;
    327          
    328            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    329          
    330            // Find the timer to stop
    331            foundTimer = osalFindTimer( task_id, event_id );
    332            if ( foundTimer )
    333            {
    334              osalDeleteTimer( foundTimer );
    335            }
    336          
    337            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
    338          
    339            return ( (foundTimer != NULL) ? SUCCESS : INVALID_EVENT_ID );
    340          }
    341          
    342          /*********************************************************************
    343           * @fn      osal_get_timeoutEx
    344           *
    345           * @brief
    346           *
    347           * @param   uint8 task_id - task id of timer to check
    348           * @param   uint16 event_id - identifier of timer to be checked
    349           *
    350           * @return  Return the timer's tick count if found, zero otherwise.
    351           */
    352          uint32 osal_get_timeoutEx( uint8 task_id, uint16 event_id )
    353          {
    354            halIntState_t intState;
    355            uint32 rtrn = 0;
    356            osalTimerRec_t *tmr;
    357          
    358            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    359          
    360            tmr = osalFindTimer( task_id, event_id );
    361          
    362            if ( tmr )
    363            {
    364              rtrn = tmr->timeout.time32;
    365            }
    366          
    367            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
    368          
    369            return rtrn;
    370          }
    371          
    372          /*********************************************************************
    373           * @fn      osal_timer_num_active
    374           *
    375           * @brief
    376           *
    377           *   This function counts the number of active timers.
    378           *
    379           * @return  uint8 - number of timers
    380           */
    381          uint8 osal_timer_num_active( void )
    382          {
    383            halIntState_t intState;
    384            uint8 num_timers = 0;
    385            osalTimerRec_t *srchTimer;
    386          
    387            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    388          
    389            // Head of the timer list
    390            srchTimer = timerHead;
    391          
    392            // Count timers in the list
    393            while ( srchTimer != NULL )
    394            {
    395              num_timers++;
    396              srchTimer = srchTimer->next;
    397            }
    398          
    399            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
    400          
    401            return num_timers;
    402          }
    403          
    404          /*********************************************************************
    405           * @fn      osalTimerUpdate
    406           *
    407           * @brief   Update the timer structures for a timer tick.
    408           *
    409           * @param   none
    410           *
    411           * @return  none
    412           *********************************************************************/
    413          void osalTimerUpdate( uint32 updateTime )
    414          {
    415            halIntState_t intState;
    416            osalTimerRec_t *srchTimer;
    417            osalTimerRec_t *prevTimer;
    418          
    419            osalTime_t timeUnion;
    420            timeUnion.time32 = updateTime;
    421          
    422            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    423            // Update the system time
    424            osal_systemClock += updateTime;
    425            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
    426          
    427            // Look for open timer slot
    428            if ( timerHead != NULL )
    429            {
    430              // Add it to the end of the timer list
    431              srchTimer = timerHead;
    432              prevTimer = (void *)NULL;
    433          
    434              // Look for open timer slot
    435              while ( srchTimer )
    436              {
    437                osalTimerRec_t *freeTimer = NULL;
    438          
    439                HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    440          
    441                // To minimize time in this critical section, avoid 32-bit math
    442                if ((timeUnion.time16[1] == 0) && (timeUnion.time8[1] == 0))
    443                {
    444                  // If upper 24 bits are zero, check lower 8 bits for roll over
    445                  if (srchTimer->timeout.time8[0] >= timeUnion.time8[0])
    446                  {
    447                    // 8-bit math
    448                    srchTimer->timeout.time8[0] -= timeUnion.time8[0];
    449                  }
    450                  else
    451                  {
    452                    // 32-bit math
    453                    if (srchTimer->timeout.time32 > timeUnion.time32)
    454                    {
    455                      srchTimer->timeout.time32 -= timeUnion.time32;
    456                    }
    457                    else
    458                    {
    459                      srchTimer->timeout.time32 = 0;
    460                    }
    461                  }
    462                }
    463                else
    464                {
    465                    // 32-bit math
    466                  if (srchTimer->timeout.time32 > timeUnion.time32)
    467                  {
    468                    srchTimer->timeout.time32 -= timeUnion.time32;
    469                  }
    470                  else
    471                  {
    472                    srchTimer->timeout.time32 = 0;
    473                  }
    474                }
    475          
    476                // Check for reloading
    477                if ( (srchTimer->timeout.time16[0] == 0) && (srchTimer->timeout.time16[1] == 0) &&
    478                     (srchTimer->reloadTimeout) && (srchTimer->event_flag) )
    479                {
    480                  // Notify the task of a timeout
    481                  osal_set_event( srchTimer->task_id, srchTimer->event_flag );
    482          
    483                  // Reload the timer timeout value
    484                  srchTimer->timeout.time32 = srchTimer->reloadTimeout;
    485                }
    486          
    487                // When timeout or delete (event_flag == 0)
    488                if ( ((srchTimer->timeout.time16[0] == 0) && (srchTimer->timeout.time16[1] == 0)) ||
    489                      (srchTimer->event_flag == 0) )
    490                {
    491                  // Take out of list
    492                  if ( prevTimer == NULL )
    493                  {
    494                    timerHead = srchTimer->next;
    495                  }
    496                  else
    497                  {
    498                    prevTimer->next = srchTimer->next;
    499                  }
    500          
    501                  // Setup to free memory
    502                  freeTimer = srchTimer;
    503          
    504                  // Next
    505                  srchTimer = srchTimer->next;
    506                }
    507                else
    508                {
    509                  // Get next
    510                  prevTimer = srchTimer;
    511                  srchTimer = srchTimer->next;
    512                }
    513          
    514                HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
    515          
    516                if ( freeTimer )
    517                {
    518                  if ( (freeTimer->timeout.time16[0] == 0) && (freeTimer->timeout.time16[1] == 0) )
    519                  {
    520                    osal_set_event( freeTimer->task_id, freeTimer->event_flag );
    521                  }
    522                  osal_mem_free( freeTimer );
    523                }
    524              }
    525            }
    526          }
    527          
    528          #ifdef POWER_SAVING
    529          /*********************************************************************
    530           * @fn      osal_adjust_timers
    531           *
    532           * @brief   Update the timer structures for elapsed ticks.
    533           *
    534           * @param   none
    535           *
    536           * @return  none
    537           *********************************************************************/
    538          void osal_adjust_timers( void )
    539          {
    540            uint32 eTime;
    541          
    542            if ( timerHead != NULL )
    543            {
    544              // Compute elapsed time (msec)
    545              eTime = TimerElapsed() / TICK_COUNT;
    546          
    547              if ( eTime )
    548              {
    549                osalTimerUpdate( eTime );
    550              }
    551            }
    552          }
    553          
    554          /*********************************************************************
    555           * @fn      osal_next_timeout
    556           *
    557           * @brief
    558           *
    559           *   Search timer table to return the lowest timeout value. If the
    560           *   timer list is empty, then the returned timeout will be zero.
    561           *
    562           * @param   none
    563           *
    564           * @return  none
    565           *********************************************************************/
    566          uint32 osal_next_timeout( void )
    567          {
    568            uint32 nextTimeout;
    569            osalTimerRec_t *srchTimer;
    570          
    571            if ( timerHead != NULL )
    572            {
    573              // Head of the timer list
    574              srchTimer = timerHead;
    575              nextTimeout = OSAL_TIMERS_MAX_TIMEOUT;
    576          
    577              // Look for the next timeout timer
    578              while ( srchTimer != NULL )
    579              {
    580                if (srchTimer->timeout.time32 < nextTimeout)
    581                {
    582                  nextTimeout = srchTimer->timeout.time32;
    583                }
    584                // Check next timer
    585                srchTimer = srchTimer->next;
    586              }
    587            }
    588            else
    589            {
    590              // No timers
    591              nextTimeout = 0;
    592            }
    593          
    594            return ( nextTimeout );
    595          }
    596          #endif // POWER_SAVING
    597          
    598          /*********************************************************************
    599           * @fn      osal_GetSystemClock()
    600           *
    601           * @brief   Read the local system clock.
    602           *
    603           * @param   none
    604           *
    605           * @return  local clock in milliseconds
    606           */
    607          uint32 osal_GetSystemClock( void )
    608          {
    609            return ( osal_systemClock );
    610          }
    611          
    612          /*********************************************************************
    613          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       1      0     34  osalAddTimer
                          0 0 16 -> osalFindTimer
                          0 0 16 -> osal_mem_alloc
       2      0     12  osalDeleteTimer
       2      0     16  osalFindTimer
       0      0      9  osalTimerInit
       1      0     41  osalTimerUpdate
                          0 0 29 -> osal_mem_free
                          0 0 29 -> osal_set_event
       2      0      0  osal_GetSystemClock
       0      0     12  osal_adjust_timers
                          0 0 12 -> TimerElapsed
                          0 0 12 -> osalTimerUpdate
       0      0     14  osal_get_timeoutEx
                          0 0 14 -> osalFindTimer
       0      0     16  osal_next_timeout
       0      0     22  osal_start_reload_timer
                          0 0 18 -> osalAddTimer
       0      0     20  osal_start_timerEx
                          0 0 16 -> osalAddTimer
       0      0     12  osal_stop_timerEx
                          0 0 12 -> osalDeleteTimer
                          0 0 12 -> osalFindTimer
       2      0      0  osal_timer_num_active


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ??Subroutine6_0
       6  ??Subroutine7_0
       6  ??osalAddTimer?relay
       6  ??osalDeleteTimer?relay
       6  ??osalFindTimer?relay
       6  ??osalTimerInit?relay
       6  ??osalTimerUpdate?relay
       6  ??osal_GetSystemClock?relay
       6  ??osal_adjust_timers?relay
       6  ??osal_get_timeoutEx?relay
       6  ??osal_next_timeout?relay
       6  ??osal_start_reload_timer?relay
       6  ??osal_start_timerEx?relay
       6  ??osal_stop_timerEx?relay
       6  ??osal_timer_num_active?relay
       5  ?Subroutine0
       7  ?Subroutine1
       5  ?Subroutine2
       5  ?Subroutine3
       3  ?Subroutine4
       6  ?Subroutine5
       1  _A_IEN0
     171  osalAddTimer
      25  osalDeleteTimer
      64  osalFindTimer
      21  osalTimerInit
     502  osalTimerUpdate
      13  osal_GetSystemClock
      34  osal_adjust_timers
      59  osal_get_timeoutEx
     102  osal_next_timeout
      72  osal_start_reload_timer
      54  osal_start_timerEx
      50  osal_stop_timerEx
       4  osal_systemClock
      37  osal_timer_num_active
       2  timerHead

 
 1 249 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     6 bytes in segment XDATA_Z
 
 1 327 bytes of CODE  memory
     0 bytes of DATA  memory (+ 1 byte shared)
     6 bytes of XDATA memory

Errors: none
Warnings: 1
