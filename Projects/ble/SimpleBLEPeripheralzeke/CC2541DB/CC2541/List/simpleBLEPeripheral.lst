###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             10/Mar/2014  10:30:49 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\Source\simpleBLEPeripheral #
#                          .c                                                 #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\config\b #
#                          uildComponents.cfg (-DBROADCASTER_CFG=0x01         #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheralzeke\CC2541DB\buildCo #
#                          nfig.cfg (-DHOST_CONFIG=PERIPHERAL_CFG             #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\Source\simpleBLEPeripheral #
#                          .c -D INT_HEAP_LEN=3074 -D HALNODEBUG -D           #
#                          OSAL_CBTIMER_NUM_TASKS=1 -D xHAL_AES_DMA=TRUE -D   #
#                          HAL_DMA=TRUE -D POWER_SAVING -D xPLUS_BROADCASTER  #
#                          -D HAL_LCD=TRUE -D HAL_LED=TRUE -D HAL_UART=TRUE   #
#                          -D HAL_ADC=TRUE -lcN E:\TexasInstruments\BLE-CC254 #
#                          x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC254 #
#                          1DB\CC2541\List\ -o E:\TexasInstruments\BLE-CC254x #
#                          -1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541 #
#                          DB\CC2541\Obj\ -e --debug --core=plain             #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I E:\TexasInstruments\BLE-CC #
#                          254x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC #
#                          2541DB\..\..\common\ -I E:\TexasInstruments\BLE-CC #
#                          254x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC #
#                          2541DB\..\..\include\ -I                           #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\hal\include\ -I E:\TexasInstruments\BLE-CC25 #
#                          4x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC25 #
#                          41DB\..\..\..\..\Components\hal\target\CC2541EB\   #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\services\saddr\ -I                           #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\include\ -I E:\TexasInstruments\BLE-CC25 #
#                          4x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC25 #
#                          41DB\..\..\..\..\Components\ble\controller\phy\    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Co #
#                          mponents\ble\controller\include\ -I                #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\..\..\Components\ble\host\ -I               #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\common\cc25 #
#                          40\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\comm #
#                          on\npi\npi_np\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\Profiles\Roles\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Si #
#                          mpleProfile\ -I E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB\. #
#                          .\..\Profiles\DevInfo\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Ba #
#                          tt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\Prof #
#                          iles\HIDDev\ -Ohz                                  #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\simpl #
#                          eBLEPeripheral.lst                                 #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\simple #
#                          BLEPeripheral.r51                                  #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\Source\simpleBLEPeripheral.c
      1          /**************************************************************************************************
      2           Filename:       simpleBLEPeripheral.c
      3           Revised:        $Date: 2010-08-06 08:56:11 -0700 (Fri, 06 Aug 2010) $
      4           Revision:       $Revision: 23333 $
      5          
      6           Description:    This file contains the Simple BLE Peripheral sample application
      7           for use with the CC2540 Bluetooth Low Energy Protocol Stack.
      8          
      9           Copyright 2010 - 2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11           IMPORTANT: Your use of this Software is limited to those specific rights
     12           granted under the terms of a software license agreement between the user
     13           who downloaded the software, his/her employer (which must be your employer)
     14           and Texas Instruments Incorporated (the "License").  You may not use this
     15           Software unless you agree to abide by the terms of the License. The License
     16           limits your use, and you acknowledge, that the Software may not be modified,
     17           copied or distributed unless embedded on a Texas Instruments microcontroller
     18           or used solely and exclusively in conjunction with a Texas Instruments radio
     19           frequency transceiver, which is integrated into your product.  Other than for
     20           the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21           works of, modify, distribute, perform, display or sell this Software and/or
     22           its documentation for any purpose.
     23          
     24           YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25           PROVIDED ï¿½AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26           INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27           NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28           TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29           NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30           LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31           INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32           OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33           OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34           (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36           Should you have any questions regarding your right to use this Software,
     37           contact Texas Instruments Incorporated at www.TI.com.
     38           **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bcomdef.h"
     45          #include "OSAL.h"
     46          #include "OSAL_PwrMgr.h"
     47          #include "osal_snv.h"
     48          
     49          #include "OnBoard.h"
     50          #include "hal_adc.h"
     51          #include "hal_led.h"
     52          #include "hal_key.h"
     53          #include "hal_lcd.h"
     54          #include "SimpleBLESerialUart.h"
     55          
     56          #include "gatt.h"
     57          
     58          #include "hci.h"
     59          
     60          #include "gapgattserver.h"
     61          #include "gattservapp.h"
     62          #include "devinfoservice.h"
     63          #include "simpleGATTprofile.h"
     64          
     65          #if defined ( PLUS_BROADCASTER )
     66          #include "peripheralBroadcaster.h"
     67          #else
     68          #include "peripheral.h"
     69          #endif
     70          
     71          #include "gapbondmgr.h"
     72          
     73          #include "simpleBLEPeripheral.h"
     74          
     75          #if defined FEATURE_OAD
     76          #include "oad.h"
     77          #include "oad_target.h"
     78          #endif
     79          
     80          #include "hal_i2c.h"
     81          #include "hal_eeprom.h"
     82          #include "hal_at24c32.h"
     83          #include "hal_ds1307.h"
     84          #include "SimpleEepromUtils.h"
     85          #include "SimpleRTCInterrupt.h"
     86          #include "SimpleBLESPIFlash.h"
     87          #include "battservice.h"
     88          #include "SimpleTemperature.h"
     89          #include "SimpleDS18B20.h"
     90          /*********************************************************************
     91           * MACROS
     92           */
     93          
     94          /*********************************************************************
     95           * CONSTANTS
     96           */
     97          
     98          // How often to perform periodic event
     99          #define SBP_PERIODIC_EVT_PERIOD                   5000
    100          
    101          #define TEMP_CHECK_PERIOD                         2000//3600000
    102          
    103          // How often to check battery voltage (in ms)
    104          #define BATTERY_CHECK_PERIOD                     13000////////////////////////////////////batt
    105          
    106          // What is the advertising interval when device is discoverable (units of 625us, 160=100ms)
    107          #define DEFAULT_ADVERTISING_INTERVAL          160
    108          
    109          // Whether to enable automatic parameter update request when a connection is formed
    110          #define DEFAULT_ENABLE_UPDATE_REQUEST         FALSE
    111          
    112          // Limited discoverable mode advertises for 30.72s, and then stops
    113          // General discoverable mode advertises indefinitely
    114          
    115          #if defined ( CC2540_MINIDK )
    116          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_LIMITED
    117          #else
    118          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_GENERAL
    119          #endif  // defined ( CC2540_MINIDK )
    120          // Minimum connection interval (units of 1.25ms, 80=100ms) if automatic parameter update request is enabled
    121          #define DEFAULT_DESIRED_MIN_CONN_INTERVAL     80
    122          
    123          // Maximum connection interval (units of 1.25ms, 800=1000ms) if automatic parameter update request is enabled
    124          #define DEFAULT_DESIRED_MAX_CONN_INTERVAL     800
    125          
    126          // Slave latency to use if automatic parameter update request is enabled
    127          #define DEFAULT_DESIRED_SLAVE_LATENCY         10
    128          
    129          // Supervision timeout value (units of 10ms, 1000=10s) if automatic parameter update request is enabled
    130          #define DEFAULT_DESIRED_CONN_TIMEOUT          1000
    131          
    132          // Company Identifier: Texas Instruments Inc. (13)
    133          #define TI_COMPANY_ID                         0x000D
    134          
    135          #define INVALID_CONNHANDLE                    0xFFFF
    136          
    137          // Length of bd addr as a string
    138          #define B_ADDR_STR_LEN                        15
    139          
    140          #if defined ( PLUS_BROADCASTER )
    141          #define ADV_IN_CONN_WAIT                    500 // delay 500 ms
    142          #endif
    143          
    144          // GAP connection handle
    145          static uint16 gapConnHandle;
    146          
    147          extern uint8 SBP_UART_STUDY_CMD;
    148          extern uint8 SBP_UART_STUDY_CMD_LEN;
    149          
    150          /*************************************************************
    151           *  recv data define
    152           */
    153          //XDATA uint8 a[3000]={0};
    154          extern UartState u_state;
    155          #define TRANSFER_DATA_SIGN 0xFE
    156          #define TRANSFER_DATA_SIGN_RE 0xFF
    157          #define UART_DATA_START_INDEX 2
    158          #define one_time_data_len 125
    159          // uint8 code recv_value1[2540] = { 0 };
    160          static uint8  recv_value[254] = { 0 };
    161          static uint8 TRANSFER_DATA_STATE_IN = FALSE;
    162          static char newValueBuf[20] = { 0 };
    163          static uint8 data_len = 0, cur_data_len = 0, data_len_index = 0, send_times = 0;
    164          
    165          /*********************************************************************
    166           * SPI FLASH
    167           */
    168          uint8 buf[20];
    169          uint8 bufrx[20];
    170          
    171          /*********************************************************************
    172           * temperature
    173           */
    174          uint8 temperature[20];
    175          uint8 temp_18b20[10];
    176          uint8 temp_flag=0;
    177          uint8 temp_18b20_flag=0;
    178          
    179          /*********************************************************************
    180           * GLOBAL VARIABLES
    181           */
    182          
    183          /*********************************************************************
    184           * EXTERNAL VARIABLES
    185           */
    186          
    187          /*********************************************************************
    188           * EXTERNAL FUNCTIONS
    189           */
    190          
    191          /*********************************************************************
    192           * LOCAL VARIABLES
    193           */
    194          static uint8 simpleBLEPeripheral_TaskID; // Task ID for internal task/event processing
    195          
    196          static gaprole_States_t gapProfileState = GAPROLE_INIT;
    197          
    198          // GAP - SCAN RSP data (max size = 31 bytes)
    199          static uint8 scanRspData[] = {
    200          // complete name
    201          		0x14,// length of this data
    202          		GAP_ADTYPE_LOCAL_NAME_COMPLETE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    203          		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    204          
    205          		// connection interval range
    206          		0x05,// length of this data
    207          		GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE, LO_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), // 100ms
    208          		HI_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), LO_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL), // 1s
    209          		HI_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL),
    210          
    211          		// Tx power level
    212          		0x02,// length of this data
    213          		GAP_ADTYPE_POWER_LEVEL, 0 // 0dBm
    214          		};
    215          
    216          // GAP - Advertisement data (max size = 31 bytes, though this is
    217          // best kept short to conserve power while advertisting)
    218          static uint8 advertData[] = {
    219          // Flags; this sets the device to use limited discoverable
    220          // mode (advertises for 30 seconds at a time) instead of general
    221          // discoverable mode (advertises indefinitely)
    222          		0x02,// length of this data
    223          		GAP_ADTYPE_FLAGS, DEFAULT_DISCOVERABLE_MODE | GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED,
    224          
    225          		// service UUID, to notify central devices what services are included
    226          		// in this peripheral
    227          		0x03,// length of this data
    228          		GAP_ADTYPE_16BIT_MORE, // some of the UUID's, but not all
    229          		LO_UINT16(SIMPLEPROFILE_SERV_UUID), HI_UINT16(SIMPLEPROFILE_SERV_UUID),
    230          
    231          };
    232          
    233          // GAP GATT Attributes
    234          static uint8 attDeviceName[GAP_DEVICE_NAME_LEN] = "zekezang";
    235          
    236          /*********************************************************************
    237           * LOCAL FUNCTIONS
    238           */
    239          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg);
    240          static void peripheralStateNotificationCB(gaprole_States_t newState);
    241          static void performPeriodicTask(void);
    242          static void simpleProfileChangeCB(uint8 paramID);
    243          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys);
    244          //static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs);
    245          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status);
    246          static char *bdAddr2Str(uint8 *pAddr);
    247          static void gettemp(void);
    248          //static void updateDeviceName(char *name, uint8 len);
    249          /*********************************************************************
    250           * PROFILE CALLBACKS
    251           */
    252          
    253          // GAP Role Callbacks
    254          static gapRolesCBs_t simpleBLEPeripheral_PeripheralCBs = { peripheralStateNotificationCB, // Profile State Change Callbacks
    255          		NULL // When a valid RSSI is read from controller (not used by application)
    256          		};
    257          
    258          // GAP Bond Manager Callbacks
    259          static gapBondCBs_t simpleBLEPeripheral_BondMgrCBs = { NULL, // Passcode callback (not used by application)
    260          		simpleBLEPeripheralPairStateCB // Pairing / Bonding state Callback (not used by application)
    261          		};
    262          
    263          // Simple GATT Profile Callbacks
    264          static simpleProfileCBs_t simpleBLEPeripheral_SimpleProfileCBs = { simpleProfileChangeCB // Charactersitic value change callback
    265          		};
    266          
    267          /*********************************************************************
    268           * @fn      pairStateCB
    269           * @brief   Pairing state callback.
    270           * @return  none
    271           */
    272          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status) {
    273          	if (state == GAPBOND_PAIRING_STATE_STARTED) {
    274          		HalLcdWriteString("Pairing started", HAL_LCD_LINE_7);
    275          	} else if (state == GAPBOND_PAIRING_STATE_COMPLETE) {
    276          		if (status == SUCCESS) {
    277          			HalLcdWriteString("Pairing success", HAL_LCD_LINE_7);
    278          		} else {
    279          			HalLcdWriteStringValue("Pairing fail", status, 10, HAL_LCD_LINE_7);
    280          			uint8 a = GAPRole_TerminateConnection();
    281          			HalLcdWriteStringValue("Pairing fail--a", a, 10, HAL_LCD_LINE_7);
    282          		}
    283          	} else if (state == GAPBOND_PAIRING_STATE_BONDED) {
    284          		if (status == SUCCESS) {
    285          			HalLcdWriteString("Bonding success", HAL_LCD_LINE_1);
    286          		}
    287          	}
    288          
    289          	//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_ZEKEZANG_EVT, 5000);
    290          }
    291          
    292          /*********************************************************************
    293           * @fn      simpleBLECentralPasscodeCB
    294           * @brief   Passcode callback.
    295           * @return  none
    296          
    297           static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs) {
    298           HalLcdWriteStringValue("uiInputs:", uiInputs, 10, HAL_LCD_LINE_5);
    299           HalLcdWriteStringValue("uiOutputs", uiOutputs, 10, HAL_LCD_LINE_6);
    300           }
    301           */
    302          
    303          /*********************************************************************
    304           * @fn      readWriteFlash
    305           * @brief   readWriteFlash
    306           * @return  none
    307          
    308           static uint32 passs = 0;
    309           static void readWriteFlash() {
    310           uint8 * aa;
    311           aa = osal_msg_allocate(15);
    312           osal_memset(aa, 0, 15);
    313           osal_memcpy(aa, "as", 2);
    314           uint16 p = 1234;
    315           if (osal_snv_write(0xE0, sizeof(uint16), &p) == SUCCESS) {
    316           HalLcdWriteString("write ok", HAL_LCD_LINE_2);
    317           }
    318           osal_msg_deallocate(aa);
    319           uint8 bb[15] = { 0x0 };
    320           uint16 bb = 0;
    321           if (osal_snv_read(0xE0, 15, &bb) == SUCCESS) {
    322           HalLcdWriteString("read ok", HAL_LCD_LINE_2);
    323           passs = bb;
    324           }
    325           }
    326           */
    327          
    328          void gettemp(void)
    329          {
    330               // osal_snv_read(0xE0,6,&temperature);
    331                 // uint8 TempValue[6];  
    332                  uint8 AvgTemp=0,i=0,j;
    333                  uint8 sensor_data_value;  //ä¼ æå¨æ°æ®
    334          
    335                  initTempSensor();
    336                  AvgTemp = getTemperature();  
    337                  temperature[temp_flag]=AvgTemp;
    338                  temp_flag++;
    339                 
    340                  DS18B20_SendConvert();
    341                  //å»¶æ¶1S
    342                  for(j=20; j>0; j--)
    343                    delay_nus(50000);
    344                  sensor_data_value=DS18B20_GetTem();
    345                  temp_18b20[temp_18b20_flag]=sensor_data_value;
    346                  temp_18b20_flag++;
    347          
    348                  if(temp_flag==6)
    349                  {
    350          
    351                    for(i=0;i<temp_flag;i++)
    352                    // HalLcdWriteStringValue("AvgTemp:", temperature[i], 10, i+1);
    353                     HalLcdWriteStringValueValue("Temp,18b20:", temperature[i], 10, temp_18b20[i],10,i+1);
    354                  }
    355                  
    356                  
    357          }
    358          /*********************************************************************
    359           * PUBLIC FUNCTIONS
    360           */
    361          
    362          /*********************************************************************
    363           * @fn      SimpleBLEPeripheral_Init
    364           *
    365           * @brief   Initialization function for the Simple BLE Peripheral App Task.
    366           *          This is called during initialization and should contain
    367           *          any application specific initialization (ie. hardware
    368           *          initialization/setup, table initialization, power up
    369           *          notificaiton ... ).
    370           *
    371           * @param   task_id - the ID assigned by OSAL.  This ID should be
    372           *                    used to send messages and set timers.
    373           *
    374           * @return  none
    375           */
    376          void SimpleBLEPeripheral_Init(uint8 task_id) {
    377          	simpleBLEPeripheral_TaskID = task_id;
    378          	SbpHalUART_Init(task_id);
    379                  
    380          	// Setup the GAP Peripheral Role Profile
    381          	{
    382          
    383          #if defined( CC2540_MINIDK )
    384          		// For the CC2540DK-MINI keyfob, device doesn't start advertising until button is pressed
    385          		uint8 initial_advertising_enable = FALSE;
    386          #else
    387          		// For other hardware platforms, device starts advertising upon initialization
    388          		uint8 initial_advertising_enable = TRUE;
    389          #endif
    390          
    391          		// By setting this to zero, the device will go into the waiting state after
    392          		// being discoverable for 30.72 second, and will not being advertising again
    393          		// until the enabler is set back to TRUE
    394          		uint16 gapRole_AdvertOffTime = 0;
    395          
    396          		uint8 enable_update_request = DEFAULT_ENABLE_UPDATE_REQUEST;
    397          		uint16 desired_min_interval = DEFAULT_DESIRED_MIN_CONN_INTERVAL;
    398          		uint16 desired_max_interval = DEFAULT_DESIRED_MAX_CONN_INTERVAL;
    399          		uint16 desired_slave_latency = DEFAULT_DESIRED_SLAVE_LATENCY;
    400          		uint16 desired_conn_timeout = DEFAULT_DESIRED_CONN_TIMEOUT;
    401          
    402          		// Set the GAP Role Parameters
    403          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    404          		GAPRole_SetParameter(GAPROLE_ADVERT_OFF_TIME, sizeof(uint16), &gapRole_AdvertOffTime);
    405          
    406          		GAPRole_SetParameter(GAPROLE_SCAN_RSP_DATA, sizeof(scanRspData), scanRspData);
    407          		GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(advertData), advertData);
    408          
    409          		GAPRole_SetParameter(GAPROLE_PARAM_UPDATE_ENABLE, sizeof(uint8), &enable_update_request);
    410          		GAPRole_SetParameter(GAPROLE_MIN_CONN_INTERVAL, sizeof(uint16), &desired_min_interval);
    411          		GAPRole_SetParameter(GAPROLE_MAX_CONN_INTERVAL, sizeof(uint16), &desired_max_interval);
    412          		GAPRole_SetParameter(GAPROLE_SLAVE_LATENCY, sizeof(uint16), &desired_slave_latency);
    413          		GAPRole_SetParameter(GAPROLE_TIMEOUT_MULTIPLIER, sizeof(uint16), &desired_conn_timeout);
    414          	}
    415          
    416          	//readWriteFlash();
    417          
    418          	// Set the GAP Characteristics
    419          	GGS_SetParameter(GGS_DEVICE_NAME_ATT, GAP_DEVICE_NAME_LEN, attDeviceName);
    420          
    421          	// Set advertising interval
    422          	{
    423          		uint16 advInt = DEFAULT_ADVERTISING_INTERVAL;
    424          
    425          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MIN, advInt);
    426          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MAX, advInt);
    427          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MIN, advInt);
    428          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MAX, advInt);
    429          	}
    430          
    431          	//HalLcdWriteStringValue("bb:", passs, 10, HAL_LCD_LINE_6);
    432          	// Setup the GAP Bond Manager
    433          	{
    434          		uint32 passkey = 1234; // passkey "000000"
    435          		//uint8 pairMode = GAPBOND_PAIRING_MODE_WAIT_FOR_REQ;
    436          		uint8 pairMode = GAPBOND_PAIRING_MODE_INITIATE;
    437          		uint8 mitm = TRUE;
    438          		uint8 ioCap = GAPBOND_IO_CAP_DISPLAY_ONLY;
    439          		uint8 bonding = FALSE;
    440          		GAPBondMgr_SetParameter(GAPBOND_DEFAULT_PASSCODE, sizeof(uint32), &passkey);
    441          		GAPBondMgr_SetParameter(GAPBOND_PAIRING_MODE, sizeof(uint8), &pairMode);
    442          		GAPBondMgr_SetParameter(GAPBOND_MITM_PROTECTION, sizeof(uint8), &mitm);
    443          		GAPBondMgr_SetParameter(GAPBOND_IO_CAPABILITIES, sizeof(uint8), &ioCap);
    444          		GAPBondMgr_SetParameter(GAPBOND_BONDING_ENABLED, sizeof(uint8), &bonding);
    445          	}
    446          
    447          	// Initialize GATT attributes
    448          	GGS_AddService(GATT_ALL_SERVICES); // GAP
    449          	GATTServApp_AddService(GATT_ALL_SERVICES); // GATT attributes
    450          	DevInfo_AddService(); // Device Information Service
    451          	SimpleProfile_AddService(GATT_ALL_SERVICES); // Simple GATT Profile
    452                  Batt_AddService( );     // Battery Service
    453                  
    454                  
    455                  
    456                  
    457          #if defined FEATURE_OAD
    458          			VOID OADTarget_AddService(); // OAD Profile
    459          #endif
    460          
    461          	// Setup the SimpleProfile Characteristic Values
    462          	{
    463          		uint8 charValue1 = 1;
    464          		uint8 charValue2 = 2;
    465          		uint8 charValue3 = 3;
    466          		uint8 charValue4 = 4;
    467          		uint8 charValue5[SIMPLEPROFILE_CHAR5_LEN] = { 1, 2, 3, 4, 5 };
    468          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR1, sizeof(uint8), &charValue1);
    469          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR2, sizeof(uint8), &charValue2);
    470          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR3, sizeof(uint8), &charValue3);
    471          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &charValue4);
    472          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR5, SIMPLEPROFILE_CHAR5_LEN, charValue5);
    473          	}
    474          
    475          	HalLcdWriteString("BLE slave aico", HAL_LCD_LINE_1);
    476          
    477          	// Register callback with SimpleGATTprofile
    478          	VOID SimpleProfile_RegisterAppCBs(&simpleBLEPeripheral_SimpleProfileCBs);
    479          
    480          	//who open who byebye
    481          	//HCI_EXT_ClkDivOnHaltCmd(HCI_EXT_ENABLE_CLK_DIVIDE_ON_HALT); no no no...
    482          
    483          	// Register for all key events - This app will handle all key events
    484          	RegisterForKeys(simpleBLEPeripheral_TaskID);
    485          
    486          #if defined ( DC_DC_P0_7 )
    487          	// Enable stack to toggle bypass control on TPS62730 (DC/DC converter)
    488          	HCI_EXT_MapPmIoPortCmd( HCI_EXT_PM_IO_PORT_P0, HCI_EXT_PM_IO_PORT_PIN7 );
    489          #endif // defined ( DC_DC_P0_7 )
    490          	// Setup a delayed profile startup
    491          	osal_set_event(simpleBLEPeripheral_TaskID, SBP_START_DEVICE_EVT);
    492                  
    493                  
    494                   // initialize the ADC for battery reads
    495                  HalAdcInit();
    496          
    497          	/***********************************test something zekezang**********************************/
    498          	HalLcdWriteString(" start", HAL_LCD_LINE_1);
    499          	
    500                      XNV_SPI_INIT();
    501                  /*     uint8 i; 
    502                  uint8 TempValue[6];  
    503                  uint8 AvgTemp; 
    504                  initTempSensor();
    505                  
    506                  while(1) 
    507                  { 
    508                    AvgTemp = 0;          
    509                  
    510                      AvgTemp = getTemperature();  
    511                   
    512                   // æ¸©åº¦è½¬æ¢æasciiç åé
    513                    TempValue[0] = (unsigned char)(AvgTemp)/10 + 48;          //åä½
    514                    TempValue[1] = (unsigned char)(AvgTemp)%10 + 48;          //ä¸ªä½
    515          //          TempValue[2] = '.';                                       //å°æ°ç¹ 
    516          //          TempValue[3] = (unsigned char)(AvgTemp*10)%10+48;         //ååä½
    517          //          TempValue[4] = (unsigned char)(AvgTemp*100)%10+48;        //ç¾åä½
    518                    TempValue[2] = '\0';                                       //å­ç¬¦ä¸²ç»æç¬¦  
    519                    
    520                    HalLcdWriteString(TempValue, HAL_LCD_LINE_7);
    521                   
    522                    UART_HAL_DELAY(10000); 
    523                  }*/
    524                        
    525                        
    526          //              uint8 i;
    527          //              uint8 buf[10];
    528          //              uint8 sensor_data_value;  //ä¼ æå¨æ°æ®
    529          //              while(1){
    530          //                   
    531          //                //å¼å§è½¬æ¢
    532          //                DS18B20_SendConvert();
    533          //                //å»¶æ¶1S
    534          //                for(i=20; i>0; i--)
    535          //                  delay_nus(50000);
    536          //                sensor_data_value=DS18B20_GetTem();
    537          //                HalLcdWriteStringValue("sensor_value:",  sensor_data_value, 10, HAL_LCD_LINE_4);
    538          //                IntToStr(buf,sensor_data_value);
    539          //                
    540          //                HalLcdWriteString(buf, HAL_LCD_LINE_6);
    541          //              }
    542          
    543          
    544          //osal_start_timerEx(simpleBLEPeripheral_TaskID, TEMP_EVT, TEMP_CHECK_PERIOD ); 
    545          
    546          
    547          	/***********************************test something zekezang**********************************/
    548          }
    549          
    550          /*********************************************************************
    551           * @fn      SimpleBLEPeripheral_ProcessEvent
    552           *
    553           * @brief   Simple BLE Peripheral Application Task event processor.  This function
    554           *          is called to process all events for the task.  Events
    555           *          include timers, messages and any other user defined events.
    556           *
    557           * @param   task_id  - The OSAL assigned task ID.
    558           * @param   events - events to process.  This is a bit map and can
    559           *                   contain more than one event.
    560           *
    561           * @return  events not processed
    562           */
    563          uint16 SimpleBLEPeripheral_ProcessEvent(uint8 task_id, uint16 events) {
    564          
    565          	VOID task_id; // OSAL required parameter that isn't used in this function
    566                  uint8 i;
    567          	if (events & SYS_EVENT_MSG) {
    568          		uint8 *pMsg;
    569          
    570          		if ((pMsg = osal_msg_receive(simpleBLEPeripheral_TaskID)) != NULL) {
    571          			simpleBLEPeripheral_ProcessOSALMsg((osal_event_hdr_t *) pMsg);
    572          
    573          			// Release the OSAL message
    574          			VOID osal_msg_deallocate(pMsg);
    575          		}
    576          
    577          		// return unprocessed events
    578          		return (events ^ SYS_EVENT_MSG);
    579          	}
    580          
    581          	if (events & SBP_START_DEVICE_EVT) {
    582          		// Start the Device
    583          		GAPRole_StartDevice(&simpleBLEPeripheral_PeripheralCBs);
    584          
    585          		// Start Bond Manager
    586          		GAPBondMgr_Register(&simpleBLEPeripheral_BondMgrCBs);
    587          
    588          		// Set timer for first periodic event
    589          		//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, SBP_PERIODIC_EVT_PERIOD);
    590                          
    591                          // Set timer for first battery read event
    592                          osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, BATTERY_CHECK_PERIOD );
    593                          
    594          
    595                          osal_start_timerEx(simpleBLEPeripheral_TaskID, TEMP_EVT, TEMP_CHECK_PERIOD );
    596                    
    597          		return (events ^ SBP_START_DEVICE_EVT);
    598          	}
    599          
    600          	if (events & SBP_PERIODIC_EVT) {
    601          		
    602          //                 // Restart timer
    603          //                if ( BATTERY_CHECK_PERIOD )
    604          //               {
    605          //                 osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, BATTERY_CHECK_PERIOD );
    606          //                }
    607          //                 
    608          //               HalLedSet(HAL_LED_1, HAL_LED_MODE_ON ); 
    609          //                 //å»¶æ¶1S
    610          //               for(i=20; i>0; i--)
    611          //                  delay_nus(50000);
    612          //               HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF );
    613          //               // perform battery level check
    614          //               Batt_MeasLevel();
    615                         
    616          		return (events ^ SBP_PERIODIC_EVT);
    617          	}
    618          
    619          	if (events & SBP_ZEKEZANG_EVT) {
    620          		uint8 initial_advertising_enable = FALSE;
    621          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    622          		return (events ^ SBP_ZEKEZANG_EVT);
    623          	}
    624          
    625          	if (events & SBP_SEND_IRDATA_EVT) {
    626          		HalLcdWriteString("send plan complete...", HAL_LCD_LINE_4);
    627          		return (events ^ SBP_SEND_IRDATA_EVT);
    628          	}
    629          
    630          	if (events & SBP_ADV_IN_CONNECTION_EVT) {
    631          		uint8 turnOnAdv = TRUE;
    632          		// Turn on advertising while in a connection
    633          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &turnOnAdv);
    634          
    635          		return (events ^ SBP_ADV_IN_CONNECTION_EVT);
    636          	}
    637                  
    638                  if (events & TEMP_EVT) {
    639                        // HalLcdWriteString("start get temp", HAL_LCD_LINE_5);
    640                         HalLedSet(HAL_LED_2, HAL_LED_MODE_ON ); 
    641                           //å»¶æ¶1S
    642                         for(i=20; i>0; i--)
    643                            delay_nus(50000);
    644                         HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF );
    645          	       gettemp();
    646                         osal_start_timerEx(simpleBLEPeripheral_TaskID, TEMP_EVT, TEMP_CHECK_PERIOD ); 
    647                          
    648          	       return (events ^ TEMP_EVT);
    649          	}
    650                  
    651          
    652          	return 0;
    653          }
    654          
    655          /*********************************************************************
    656           * @fn      simpleBLEPeripheral_ProcessOSALMsg
    657           *
    658           * @brief   Process an incoming task message.
    659           *
    660           * @param   pMsg - message to process
    661           *
    662           * @return  none
    663           */
    664          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg) {
    665          	switch (pMsg->event) {
    666          	case KEY_CHANGE:
    667          		simpleBLEPeripheral_HandleKeys(((keyChange_t *) pMsg)->state, ((keyChange_t *) pMsg)->keys);
    668          		break;
    669          	default:
    670          		// do nothing
    671          		break;
    672          	}
    673          }
    674          
    675          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys) {
    676          	if (keys & HAL_KEY_UP) {
    677          		u_state = IR_DATA_STUDY_CMD_START_BEGIN_STATE;
    678          		SbpHalUARTWrite(&SBP_UART_STUDY_CMD, SBP_UART_STUDY_CMD_LEN);
    679          	}
    680          
    681          	if (keys & HAL_KEY_LEFT) {
    682          		HalLcdWriteString("read rtc ...", HAL_LCD_LINE_3);
    683          	}
    684          
    685          	if (keys & HAL_KEY_DOWN) {
    686          		HalLcdWriteString("send after 3s...", HAL_LCD_LINE_4);
    687          		osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT, 3000);
    688          	}
    689          
    690          	if (keys & HAL_KEY_RIGHT) {
    691          		HalLcdWriteStringValue("data_len:", data_len, 10, HAL_LCD_LINE_2);
    692          	}
    693          
    694          }
    695          
    696          /*********************************************************************
    697           * @fn      peripheralStateNotificationCB
    698           *
    699           * @brief   Notification from the profile of a state change.
    700           *
    701           * @param   newState - new state
    702           *
    703           * @return  none
    704           */
    705          static void peripheralStateNotificationCB(gaprole_States_t newState) {
    706          
    707          	//HalLcdWriteStringValue("newState", newState, 10, HAL_LCD_LINE_4);
    708          
    709          	switch (newState) {
    710          	case GAPROLE_STARTED: {
    711          		uint8 ownAddress[B_ADDR_LEN];
    712          		uint8 systemId[DEVINFO_SYSTEM_ID_LEN];
    713          
    714          		GAPRole_GetParameter(GAPROLE_BD_ADDR, ownAddress);
    715          
    716          		// use 6 bytes of device address for 8 bytes of system ID value
    717          		systemId[0] = ownAddress[0];
    718          		systemId[1] = ownAddress[1];
    719          		systemId[2] = ownAddress[2];
    720          
    721          		// set middle bytes to zero
    722          		systemId[4] = 0x00;
    723          		systemId[3] = 0x00;
    724          
    725          		// shift three bytes up
    726          		systemId[7] = ownAddress[5];
    727          		systemId[6] = ownAddress[4];
    728          		systemId[5] = ownAddress[3];
    729          
    730          		DevInfo_SetParameter(DEVINFO_SYSTEM_ID, DEVINFO_SYSTEM_ID_LEN, systemId);
    731          
    732          		// Display device address
    733          		bdAddr2Str(ownAddress);
    734          		//HalLcdWriteString(bdAddr2Str(ownAddress), HAL_LCD_LINE_3);
    735          		//HalLcdWriteString("Initialized", HAL_LCD_LINE_3);
    736          	}
    737          		break;
    738          
    739          	case GAPROLE_ADVERTISING: {
    740          		//HalLcdWriteString("Advertising", HAL_LCD_LINE_3);
    741          	}
    742          		break;
    743          
    744          	case GAPROLE_CONNECTED: {
    745          		//HalLcdWriteString("Connected", HAL_LCD_LINE_3);
    746          		//simpleProfile_StateNotify( uint16 connHandle, attHandleValueNoti_t *pNoti )
    747          		GAPRole_GetParameter(GAPROLE_CONNHANDLE, &gapConnHandle);
    748          	}
    749          		break;
    750          
    751          	case GAPROLE_WAITING: {
    752          		//HalLcdWriteString("Disconnected", HAL_LCD_LINE_3);
    753          	}
    754          		break;
    755          
    756          	case GAPROLE_WAITING_AFTER_TIMEOUT: {
    757          		//HalLcdWriteString("Timed Out", HAL_LCD_LINE_3);
    758          	}
    759          		break;
    760          
    761          	case GAPROLE_ERROR: {
    762          		//HalLcdWriteString("Error", HAL_LCD_LINE_3);
    763          	}
    764          		break;
    765          
    766          	default: {
    767          		//HalLcdWriteString("", HAL_LCD_LINE_3);
    768          	}
    769          		break;
    770          
    771          	}
    772          
    773          	gapProfileState = newState;
    774          
    775          #if !defined( CC2540_MINIDK )
    776          	VOID gapProfileState; // added to prevent compiler warning with
    777          						  // "CC2540 Slave" configurations
    778          #endif
    779          
    780          }
    781          
    782          /*********************************************************************
    783           * @fn      performPeriodicTask
    784           *
    785           * @brief   Perform a periodic application task. This function gets
    786           *          called every five seconds as a result of the SBP_PERIODIC_EVT
    787           *          OSAL event. In this example, the value of the third
    788           *          characteristic in the SimpleGATTProfile service is retrieved
    789           *          from the profile, and then copied into the value of the
    790           *          the fourth characteristic.
    791           *
    792           * @param   none
    793           *
    794           * @return  none
    795           */
    796          static void performPeriodicTask(void) {
    797          	uint8 valueToCopy;
    798          	uint8 stat;
    799          
    800          	// Call to retrieve the value of the third characteristic in the profile
    801          	stat = SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR3, &valueToCopy);
    802          
    803          	if (stat == SUCCESS) {
    804          		/*
    805          		 * Call to set that value of the fourth characteristic in the profile. Note
    806          		 * that if notifications of the fourth characteristic have been enabled by
    807          		 * a GATT client device, then a notification will be sent every time this
    808          		 * function is called.
    809          		 */
    810          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &valueToCopy);
    811          	}
    812          }
    813          
    814          /*********************************************************************
    815           * @fn      simpleProfileChangeCB
    816           * @brief   Callback from SimpleBLEProfile indicating a value change
    817           * @param   paramID - parameter ID of the value that was changed.
    818           *
    819           * @return  none
    820           */
    821          static void simpleProfileChangeCB(uint8 paramID) {
    822          	osal_memset(buf, 0, 20);
    823          	switch (paramID) {
    824          	case SIMPLEPROFILE_CHAR1:
    825          		SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR1,buf);
    826                           HalSPIWrite(0x0,buf,20);
    827                           HalLcdWriteString((uint8*)buf, HAL_LCD_LINE_6);
    828          		  //HalLcd_HW_WriteLine(HAL_LCD_LINE_4, "Write:"); 
    829          		 // HalLcd_HW_WriteLine(HAL_LCD_LINE_5, buf); 
    830          		  //æ³¨æï¼è¿ç»­è¯»åä¹é´è³å°è¦å»¶æ¶800us
    831          		  //HalHW_WaitUs(800);
    832          	          HalSPIRead(0x0,bufrx,20);
    833                             HalLcdWriteString((uint8*)bufrx, HAL_LCD_LINE_7);
    834          		  //HalLcd_HW_WriteLine(HAL_LCD_LINE_6, "Read:"); 
    835          		 // HalLcd_HW_WriteLine(HAL_LCD_LINE_7, bufrx); 
    836          
    837          		
    838          
    839          		break;
    840          	case SIMPLEPROFILE_CHAR3:
    841          		//SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR3, &newValue);
    842          		break;
    843          	default:
    844          		// should not reach here!
    845          		break;
    846          	}
    847          }
    848          
    849          /*********************************************************************
    850           * @fn      bdAddr2Str
    851           *
    852           * @brief   Convert Bluetooth address to string. Only needed when
    853           *          LCD display is used.
    854           *
    855           * @return  none
    856           */
    857          char *bdAddr2Str(uint8 *pAddr) {
    858          	uint8 i;
    859          	char hex[] = "0123456789ABCDEF";
    860          	static char str[B_ADDR_STR_LEN];
    861          	char *pStr = str;
    862          
    863          	*pStr++ = '0';
    864          	*pStr++ = 'x';
    865          
    866          	// Start from end of addr
    867          	pAddr += B_ADDR_LEN;
    868          
    869          	for (i = B_ADDR_LEN; i > 0; i--) {
    870          		*pStr++ = hex[*--pAddr >> 4];
    871          		*pStr++ = hex[*pAddr & 0x0F];
    872          	}
    873          
    874          	*pStr = 0;
    875          
    876          	return str;
    877          }
    878          /*********************************************************************
    879           *********************************************************************/
    880          //static int ascii2hex(char c) {
    881          //	int ret = -1;
    882          //	if ((c >= '0') && (c <= '9')) {
    883          //		ret = c - '0';
    884          //	} else if ((c >= 'A') && (c <= 'Z')) {
    885          //		ret = c - 'A' + 65;
    886          //	} else if ((c >= 'a') && (c <= 'z')) {
    887          //		ret = c - 'a' + 97;
    888          //	}
    889          //	return ret;
    890          //}
    891          //static void updateDeviceName(char *name, uint8 len) {
    892          //	uint8 k = 0;
    893          //	for (k = 0; k < len; k++) {
    894          //		scanRspData[k + 2] = ascii2hex(*(name + k));
    895          //	}
    896          //}

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0     38  SimpleBLEPeripheral_Init
                          0 0 38 -> Batt_AddService
                          0 0 38 -> DevInfo_AddService
                          0 0 38 -> GAPBondMgr_SetParameter
                          0 0 38 -> GAPRole_SetParameter
                          0 0 38 -> GAP_SetParamValue
                          0 0 38 -> GATTServApp_AddService
                          0 0 38 -> GGS_AddService
                          0 0 38 -> GGS_SetParameter
                          0 0 38 -> HalAdcInit
                          0 0 38 -> HalLcdWriteString
                          0 0 38 -> RegisterForKeys
                          0 0 38 -> SbpHalUART_Init
                          0 0 38 -> SimpleProfile_AddService
                          0 0 38 -> SimpleProfile_RegisterAppCBs
                          0 0 38 -> SimpleProfile_SetParameter
                          0 0 38 -> osal_set_event
       0      0     17  SimpleBLEPeripheral_ProcessEvent
                          0 0 13 -> GAPBondMgr_Register
                          0 0 13 -> GAPRole_SetParameter
                          0 0 13 -> GAPRole_StartDevice
                          0 0 13 -> HalLcdWriteString
                          0 0 14 -> HalLcdWriteStringValue
                          0 0 13 -> HalLedSet
                          0 0 13 -> SbpHalUARTWrite
                          0 0 13 -> delay_nus
                          0 0 13 -> gettemp
                          0 0 13 -> osal_msg_deallocate
                          0 0 13 -> osal_msg_receive
                          0 0 17 -> osal_start_timerEx
       2      0     49  bdAddr2Str
       1      0     27  gettemp
                          0 0 10 -> DS18B20_GetTem
                          0 0 10 -> DS18B20_SendConvert
                          0 0 14 -> HalLcdWriteStringValueValue
                          0 0 10 -> delay_nus
                          0 0 10 -> getTemperature
                          0 0 10 -> initTempSensor
       1      0     23  peripheralStateNotificationCB
                          0 0 23 -> DevInfo_SetParameter
                          0 0 23 -> GAPRole_GetParameter
                          0 0 23 -> bdAddr2Str
       0      0     12  simpleBLEPeripheralPairStateCB
                          0 0 12 -> GAPRole_TerminateConnection
                          0 0 11 -> HalLcdWriteString
                          0 0 12 -> HalLcdWriteStringValue
       0      0     14  simpleProfileChangeCB
                          0 0 10 -> HalLcdWriteString
                          0 0 14 -> HalSPIRead
                          0 0 14 -> HalSPIWrite
                          0 0 10 -> SimpleProfile_GetParameter
                          0 0 10 -> osal_memset


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant " start">
      17  ?<Constant "0123456789ABCDEF">
      15  ?<Constant "BLE slave aico">
      16  ?<Constant "Bonding success">
      13  ?<Constant "Pairing fail">
      16  ?<Constant "Pairing fail--a">
      16  ?<Constant "Pairing started">
      16  ?<Constant "Pairing success">
      12  ?<Constant "Temp,18b20:">
      10  ?<Constant "data_len:">
      13  ?<Constant "read rtc ...">
      17  ?<Constant "send after 3s...">
      22  ?<Constant "send plan complete...">
       5  ?<Constant {1, 2, 3, 4, 5}>
       7  ?<Initializer for advertData>
      22  ?<Initializer for attDeviceName>
      30  ?<Initializer for scanRspData>
       4  ?<Initializer for simpleBLEPeripheral_BondMgrC
       4  ?<Initializer for simpleBLEPeripheral_Peripher
       2  ?<Initializer for simpleBLEPeripheral_SimplePr
       6  ??SimpleBLEPeripheral_Init?relay
       6  ??SimpleBLEPeripheral_ProcessEvent?relay
       6  ??bdAddr2Str?relay
       6  ??gettemp?relay
       6  ??peripheralStateNotificationCB?relay
       6  ??simpleBLEPeripheralPairStateCB?relay
       6  ??simpleProfileChangeCB?relay
       5  ?Subroutine0
       8  ?Subroutine1
      28  ?Subroutine2
       1  P1DIR
       1  P1SEL
       1  P2SEL
       1  PERCFG
     686  SimpleBLEPeripheral_Init
     428  SimpleBLEPeripheral_ProcessEvent
       1  U1BAUD
       1  U1GCR
       1  _A_P1
       1  _A_U1CSR
       4  __Constant_0
       4  __Constant_32c8
       4  __Constant_7d0
       4  __Constant_bb8
       4  __Constant_ffffffff
       7  advertData
      22  attDeviceName
     102  bdAddr2Str
      20  buf
      20  bufrx
       1  data_len
       2  gapConnHandle
       1  gapProfileState
     172  gettemp
     205  peripheralStateNotificationCB
      30  scanRspData
     115  simpleBLEPeripheralPairStateCB
       4  simpleBLEPeripheral_BondMgrCBs
       4  simpleBLEPeripheral_PeripheralCBs
       2  simpleBLEPeripheral_SimpleProfileCBs
       1  simpleBLEPeripheral_TaskID
     125  simpleProfileChangeCB
      15  str
      10  temp_18b20
       1  temp_18b20_flag
       1  temp_flag
      20  temperature

 
 1 874 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     8 bytes in segment SFR_AN
    69 bytes in segment XDATA_I
    69 bytes in segment XDATA_ID
   215 bytes in segment XDATA_ROM_C
    92 bytes in segment XDATA_Z
 
 1 985 bytes of CODE  memory
   195 bytes of CONST memory (+ 20 bytes shared)
     0 bytes of DATA  memory (+  8 bytes shared)
   161 bytes of XDATA memory

Errors: none
Warnings: 10
