###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             27/Feb/2014  14:10:34 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\Source\simpleBLEPeripheral #
#                          .c                                                 #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\config\b #
#                          uildComponents.cfg (-DBROADCASTER_CFG=0x01         #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheralzeke\CC2541DB\buildCo #
#                          nfig.cfg (-DHOST_CONFIG=PERIPHERAL_CFG             #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\Source\simpleBLEPeripheral #
#                          .c -D INT_HEAP_LEN=3074 -D HALNODEBUG -D           #
#                          OSAL_CBTIMER_NUM_TASKS=1 -D HAL_AES_DMA=TRUE -D    #
#                          HAL_DMA=TRUE -D POWER_SAVING -D xPLUS_BROADCASTER  #
#                          -D HAL_LCD=TRUE -D HAL_LED=TRUE -D HAL_UART=TRUE   #
#                          -lcN E:\TexasInstruments\BLE-CC254x-1.4.0\Projects #
#                          \ble\SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\ #
#                           -o E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ #
#                          ble\SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\   #
#                          -e --debug --core=plain --dptr=16,1                #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\common\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\include\ #
#                           -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ #
#                          ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\C #
#                          omponents\hal\include\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\hal\target\CC2541EB\ -I                      #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\osal\include\ -I E:\TexasInstruments\BLE-CC2 #
#                          54x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2 #
#                          541DB\..\..\..\..\Components\services\saddr\ -I    #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\include\ -I E:\TexasInstruments\BLE-CC25 #
#                          4x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC25 #
#                          41DB\..\..\..\..\Components\ble\controller\phy\    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Co #
#                          mponents\ble\controller\include\ -I                #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\..\..\Components\ble\host\ -I               #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\common\cc25 #
#                          40\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\comm #
#                          on\npi\npi_np\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\Profiles\Roles\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Si #
#                          mpleProfile\ -I E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB\. #
#                          .\..\Profiles\DevInfo\ -Ohz                        #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\simpl #
#                          eBLEPeripheral.lst                                 #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\simple #
#                          BLEPeripheral.r51                                  #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\Source\simpleBLEPeripheral.c
      1          /**************************************************************************************************
      2           Filename:       simpleBLEPeripheral.c
      3           Revised:        $Date: 2010-08-06 08:56:11 -0700 (Fri, 06 Aug 2010) $
      4           Revision:       $Revision: 23333 $
      5          
      6           Description:    This file contains the Simple BLE Peripheral sample application
      7           for use with the CC2540 Bluetooth Low Energy Protocol Stack.
      8          
      9           Copyright 2010 - 2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11           IMPORTANT: Your use of this Software is limited to those specific rights
     12           granted under the terms of a software license agreement between the user
     13           who downloaded the software, his/her employer (which must be your employer)
     14           and Texas Instruments Incorporated (the "License").  You may not use this
     15           Software unless you agree to abide by the terms of the License. The License
     16           limits your use, and you acknowledge, that the Software may not be modified,
     17           copied or distributed unless embedded on a Texas Instruments microcontroller
     18           or used solely and exclusively in conjunction with a Texas Instruments radio
     19           frequency transceiver, which is integrated into your product.  Other than for
     20           the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21           works of, modify, distribute, perform, display or sell this Software and/or
     22           its documentation for any purpose.
     23          
     24           YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25           PROVIDED ï¿½AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26           INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27           NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28           TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29           NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30           LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31           INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32           OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33           OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34           (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36           Should you have any questions regarding your right to use this Software,
     37           contact Texas Instruments Incorporated at www.TI.com.
     38           **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bcomdef.h"
     45          #include "OSAL.h"
     46          #include "OSAL_PwrMgr.h"
     47          #include "osal_snv.h"
     48          
     49          #include "OnBoard.h"
     50          #include "hal_adc.h"
     51          #include "hal_led.h"
     52          #include "hal_key.h"
     53          #include "hal_lcd.h"
     54          #include "SimpleBLESerialUart.h"
     55          
     56          #include "gatt.h"
     57          
     58          #include "hci.h"
     59          
     60          #include "gapgattserver.h"
     61          #include "gattservapp.h"
     62          #include "devinfoservice.h"
     63          #include "simpleGATTprofile.h"
     64          
     65          #if defined ( PLUS_BROADCASTER )
     66          #include "peripheralBroadcaster.h"
     67          #else
     68          #include "peripheral.h"
     69          #endif
     70          
     71          #include "gapbondmgr.h"
     72          
     73          #include "simpleBLEPeripheral.h"
     74          
     75          #if defined FEATURE_OAD
     76          #include "oad.h"
     77          #include "oad_target.h"
     78          #endif
     79          
     80          #include "hal_i2c.h"
     81          #include "hal_eeprom.h"
     82          #include "hal_at24c32.h"
     83          #include "hal_ds1307.h"
     84          #include "SimpleEepromUtils.h"
     85          #include "SimpleRTCInterrupt.h"
     86          #include "SimpleBLESPIFlash.h"
     87          
     88          /*********************************************************************
     89           * MACROS
     90           */
     91          
     92          /*********************************************************************
     93           * CONSTANTS
     94           */
     95          
     96          // How often to perform periodic event
     97          #define SBP_PERIODIC_EVT_PERIOD                   5000
     98          
     99          // What is the advertising interval when device is discoverable (units of 625us, 160=100ms)
    100          #define DEFAULT_ADVERTISING_INTERVAL          160
    101          
    102          // Whether to enable automatic parameter update request when a connection is formed
    103          #define DEFAULT_ENABLE_UPDATE_REQUEST         FALSE
    104          
    105          // Limited discoverable mode advertises for 30.72s, and then stops
    106          // General discoverable mode advertises indefinitely
    107          
    108          #if defined ( CC2540_MINIDK )
    109          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_LIMITED
    110          #else
    111          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_GENERAL
    112          #endif  // defined ( CC2540_MINIDK )
    113          // Minimum connection interval (units of 1.25ms, 80=100ms) if automatic parameter update request is enabled
    114          #define DEFAULT_DESIRED_MIN_CONN_INTERVAL     80
    115          
    116          // Maximum connection interval (units of 1.25ms, 800=1000ms) if automatic parameter update request is enabled
    117          #define DEFAULT_DESIRED_MAX_CONN_INTERVAL     800
    118          
    119          // Slave latency to use if automatic parameter update request is enabled
    120          #define DEFAULT_DESIRED_SLAVE_LATENCY         10
    121          
    122          // Supervision timeout value (units of 10ms, 1000=10s) if automatic parameter update request is enabled
    123          #define DEFAULT_DESIRED_CONN_TIMEOUT          1000
    124          
    125          // Company Identifier: Texas Instruments Inc. (13)
    126          #define TI_COMPANY_ID                         0x000D
    127          
    128          #define INVALID_CONNHANDLE                    0xFFFF
    129          
    130          // Length of bd addr as a string
    131          #define B_ADDR_STR_LEN                        15
    132          
    133          #if defined ( PLUS_BROADCASTER )
    134          #define ADV_IN_CONN_WAIT                    500 // delay 500 ms
    135          #endif
    136          
    137          // GAP connection handle
    138          static uint16 gapConnHandle;
    139          
    140          extern uint8 SBP_UART_STUDY_CMD;
    141          extern uint8 SBP_UART_STUDY_CMD_LEN;
    142          
    143          /*************************************************************
    144           *  recv data define
    145           */
    146          //XDATA uint8 a[3000]={0};
    147          extern UartState u_state;
    148          #define TRANSFER_DATA_SIGN 0xFE
    149          #define TRANSFER_DATA_SIGN_RE 0xFF
    150          #define UART_DATA_START_INDEX 2
    151          #define one_time_data_len 125
    152          // uint8 code recv_value1[2540] = { 0 };
    153          static uint8  recv_value[254] = { 0 };
    154          static uint8 TRANSFER_DATA_STATE_IN = FALSE;
    155          static char newValueBuf[20] = { 0 };
    156          static uint8 data_len = 0, cur_data_len = 0, data_len_index = 0, send_times = 0;
    157          
    158          /*********************************************************************
    159           * SPI FLASH
    160           */
    161          uint8 buf[20]="aico5678901234567890";
    162          uint8 bufrx[20];
    163          
    164          
    165          
    166          /*********************************************************************
    167           * GLOBAL VARIABLES
    168           */
    169          
    170          /*********************************************************************
    171           * EXTERNAL VARIABLES
    172           */
    173          
    174          /*********************************************************************
    175           * EXTERNAL FUNCTIONS
    176           */
    177          
    178          /*********************************************************************
    179           * LOCAL VARIABLES
    180           */
    181          static uint8 simpleBLEPeripheral_TaskID; // Task ID for internal task/event processing
    182          
    183          static gaprole_States_t gapProfileState = GAPROLE_INIT;
    184          
    185          // GAP - SCAN RSP data (max size = 31 bytes)
    186          static uint8 scanRspData[] = {
    187          // complete name
    188          		0x14,// length of this data
    189          		GAP_ADTYPE_LOCAL_NAME_COMPLETE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    190          		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    191          
    192          		// connection interval range
    193          		0x05,// length of this data
    194          		GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE, LO_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), // 100ms
    195          		HI_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), LO_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL), // 1s
    196          		HI_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL),
    197          
    198          		// Tx power level
    199          		0x02,// length of this data
    200          		GAP_ADTYPE_POWER_LEVEL, 0 // 0dBm
    201          		};
    202          
    203          // GAP - Advertisement data (max size = 31 bytes, though this is
    204          // best kept short to conserve power while advertisting)
    205          static uint8 advertData[] = {
    206          // Flags; this sets the device to use limited discoverable
    207          // mode (advertises for 30 seconds at a time) instead of general
    208          // discoverable mode (advertises indefinitely)
    209          		0x02,// length of this data
    210          		GAP_ADTYPE_FLAGS, DEFAULT_DISCOVERABLE_MODE | GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED,
    211          
    212          		// service UUID, to notify central devices what services are included
    213          		// in this peripheral
    214          		0x03,// length of this data
    215          		GAP_ADTYPE_16BIT_MORE, // some of the UUID's, but not all
    216          		LO_UINT16(SIMPLEPROFILE_SERV_UUID), HI_UINT16(SIMPLEPROFILE_SERV_UUID),
    217          
    218          };
    219          
    220          // GAP GATT Attributes
    221          static uint8 attDeviceName[GAP_DEVICE_NAME_LEN] = "zekezang";
    222          
    223          /*********************************************************************
    224           * LOCAL FUNCTIONS
    225           */
    226          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg);
    227          static void peripheralStateNotificationCB(gaprole_States_t newState);
    228          static void performPeriodicTask(void);
    229          static void simpleProfileChangeCB(uint8 paramID);
    230          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys);
    231          //static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs);
    232          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status);
    233          static char *bdAddr2Str(uint8 *pAddr);
    234          //static void updateDeviceName(char *name, uint8 len);
    235          /*********************************************************************
    236           * PROFILE CALLBACKS
    237           */
    238          
    239          // GAP Role Callbacks
    240          static gapRolesCBs_t simpleBLEPeripheral_PeripheralCBs = { peripheralStateNotificationCB, // Profile State Change Callbacks
    241          		NULL // When a valid RSSI is read from controller (not used by application)
    242          		};
    243          
    244          // GAP Bond Manager Callbacks
    245          static gapBondCBs_t simpleBLEPeripheral_BondMgrCBs = { NULL, // Passcode callback (not used by application)
    246          		simpleBLEPeripheralPairStateCB // Pairing / Bonding state Callback (not used by application)
    247          		};
    248          
    249          // Simple GATT Profile Callbacks
    250          static simpleProfileCBs_t simpleBLEPeripheral_SimpleProfileCBs = { simpleProfileChangeCB // Charactersitic value change callback
    251          		};
    252          
    253          /*********************************************************************
    254           * @fn      pairStateCB
    255           * @brief   Pairing state callback.
    256           * @return  none
    257           */
    258          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status) {
    259          	if (state == GAPBOND_PAIRING_STATE_STARTED) {
    260          		HalLcdWriteString("Pairing started", HAL_LCD_LINE_7);
    261          	} else if (state == GAPBOND_PAIRING_STATE_COMPLETE) {
    262          		if (status == SUCCESS) {
    263          			HalLcdWriteString("Pairing success", HAL_LCD_LINE_7);
    264          		} else {
    265          			HalLcdWriteStringValue("Pairing fail", status, 10, HAL_LCD_LINE_7);
    266          			uint8 a = GAPRole_TerminateConnection();
    267          			HalLcdWriteStringValue("Pairing fail--a", a, 10, HAL_LCD_LINE_7);
    268          		}
    269          	} else if (state == GAPBOND_PAIRING_STATE_BONDED) {
    270          		if (status == SUCCESS) {
    271          			HalLcdWriteString("Bonding success", HAL_LCD_LINE_1);
    272          		}
    273          	}
    274          
    275          	//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_ZEKEZANG_EVT, 5000);
    276          }
    277          
    278          /*********************************************************************
    279           * @fn      simpleBLECentralPasscodeCB
    280           * @brief   Passcode callback.
    281           * @return  none
    282          
    283           static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs) {
    284           HalLcdWriteStringValue("uiInputs:", uiInputs, 10, HAL_LCD_LINE_5);
    285           HalLcdWriteStringValue("uiOutputs", uiOutputs, 10, HAL_LCD_LINE_6);
    286           }
    287           */
    288          
    289          /*********************************************************************
    290           * @fn      readWriteFlash
    291           * @brief   readWriteFlash
    292           * @return  none
    293          
    294           static uint32 passs = 0;
    295           static void readWriteFlash() {
    296           uint8 * aa;
    297           aa = osal_msg_allocate(15);
    298           osal_memset(aa, 0, 15);
    299           osal_memcpy(aa, "as", 2);
    300           uint16 p = 1234;
    301           if (osal_snv_write(0xE0, sizeof(uint16), &p) == SUCCESS) {
    302           HalLcdWriteString("write ok", HAL_LCD_LINE_2);
    303           }
    304           osal_msg_deallocate(aa);
    305           uint8 bb[15] = { 0x0 };
    306           uint16 bb = 0;
    307           if (osal_snv_read(0xE0, 15, &bb) == SUCCESS) {
    308           HalLcdWriteString("read ok", HAL_LCD_LINE_2);
    309           passs = bb;
    310           }
    311           }
    312           */
    313          
    314          /*********************************************************************
    315           * PUBLIC FUNCTIONS
    316           */
    317          
    318          /*********************************************************************
    319           * @fn      SimpleBLEPeripheral_Init
    320           *
    321           * @brief   Initialization function for the Simple BLE Peripheral App Task.
    322           *          This is called during initialization and should contain
    323           *          any application specific initialization (ie. hardware
    324           *          initialization/setup, table initialization, power up
    325           *          notificaiton ... ).
    326           *
    327           * @param   task_id - the ID assigned by OSAL.  This ID should be
    328           *                    used to send messages and set timers.
    329           *
    330           * @return  none
    331           */
    332          void SimpleBLEPeripheral_Init(uint8 task_id) {
    333          	simpleBLEPeripheral_TaskID = task_id;
    334          	SbpHalUART_Init(task_id);
    335                  
    336          	// Setup the GAP Peripheral Role Profile
    337          	{
    338          
    339          #if defined( CC2540_MINIDK )
    340          		// For the CC2540DK-MINI keyfob, device doesn't start advertising until button is pressed
    341          		uint8 initial_advertising_enable = FALSE;
    342          #else
    343          		// For other hardware platforms, device starts advertising upon initialization
    344          		uint8 initial_advertising_enable = TRUE;
    345          #endif
    346          
    347          		// By setting this to zero, the device will go into the waiting state after
    348          		// being discoverable for 30.72 second, and will not being advertising again
    349          		// until the enabler is set back to TRUE
    350          		uint16 gapRole_AdvertOffTime = 0;
    351          
    352          		uint8 enable_update_request = DEFAULT_ENABLE_UPDATE_REQUEST;
    353          		uint16 desired_min_interval = DEFAULT_DESIRED_MIN_CONN_INTERVAL;
    354          		uint16 desired_max_interval = DEFAULT_DESIRED_MAX_CONN_INTERVAL;
    355          		uint16 desired_slave_latency = DEFAULT_DESIRED_SLAVE_LATENCY;
    356          		uint16 desired_conn_timeout = DEFAULT_DESIRED_CONN_TIMEOUT;
    357          
    358          		// Set the GAP Role Parameters
    359          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    360          		GAPRole_SetParameter(GAPROLE_ADVERT_OFF_TIME, sizeof(uint16), &gapRole_AdvertOffTime);
    361          
    362          		GAPRole_SetParameter(GAPROLE_SCAN_RSP_DATA, sizeof(scanRspData), scanRspData);
    363          		GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(advertData), advertData);
    364          
    365          		GAPRole_SetParameter(GAPROLE_PARAM_UPDATE_ENABLE, sizeof(uint8), &enable_update_request);
    366          		GAPRole_SetParameter(GAPROLE_MIN_CONN_INTERVAL, sizeof(uint16), &desired_min_interval);
    367          		GAPRole_SetParameter(GAPROLE_MAX_CONN_INTERVAL, sizeof(uint16), &desired_max_interval);
    368          		GAPRole_SetParameter(GAPROLE_SLAVE_LATENCY, sizeof(uint16), &desired_slave_latency);
    369          		GAPRole_SetParameter(GAPROLE_TIMEOUT_MULTIPLIER, sizeof(uint16), &desired_conn_timeout);
    370          	}
    371          
    372          	//readWriteFlash();
    373          
    374          	// Set the GAP Characteristics
    375          	GGS_SetParameter(GGS_DEVICE_NAME_ATT, GAP_DEVICE_NAME_LEN, attDeviceName);
    376          
    377          	// Set advertising interval
    378          	{
    379          		uint16 advInt = DEFAULT_ADVERTISING_INTERVAL;
    380          
    381          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MIN, advInt);
    382          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MAX, advInt);
    383          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MIN, advInt);
    384          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MAX, advInt);
    385          	}
    386          
    387          	//HalLcdWriteStringValue("bb:", passs, 10, HAL_LCD_LINE_6);
    388          	// Setup the GAP Bond Manager
    389          	{
    390          		uint32 passkey = 1234; // passkey "000000"
    391          		//uint8 pairMode = GAPBOND_PAIRING_MODE_WAIT_FOR_REQ;
    392          		uint8 pairMode = GAPBOND_PAIRING_MODE_INITIATE;
    393          		uint8 mitm = TRUE;
    394          		uint8 ioCap = GAPBOND_IO_CAP_DISPLAY_ONLY;
    395          		uint8 bonding = FALSE;
    396          		GAPBondMgr_SetParameter(GAPBOND_DEFAULT_PASSCODE, sizeof(uint32), &passkey);
    397          		GAPBondMgr_SetParameter(GAPBOND_PAIRING_MODE, sizeof(uint8), &pairMode);
    398          		GAPBondMgr_SetParameter(GAPBOND_MITM_PROTECTION, sizeof(uint8), &mitm);
    399          		GAPBondMgr_SetParameter(GAPBOND_IO_CAPABILITIES, sizeof(uint8), &ioCap);
    400          		GAPBondMgr_SetParameter(GAPBOND_BONDING_ENABLED, sizeof(uint8), &bonding);
    401          	}
    402          
    403          	// Initialize GATT attributes
    404          	GGS_AddService(GATT_ALL_SERVICES); // GAP
    405          	GATTServApp_AddService(GATT_ALL_SERVICES); // GATT attributes
    406          	DevInfo_AddService(); // Device Information Service
    407          	SimpleProfile_AddService(GATT_ALL_SERVICES); // Simple GATT Profile
    408          #if defined FEATURE_OAD
    409          			VOID OADTarget_AddService(); // OAD Profile
    410          #endif
    411          
    412          	// Setup the SimpleProfile Characteristic Values
    413          	{
    414          		uint8 charValue1 = 1;
    415          		uint8 charValue2 = 2;
    416          		uint8 charValue3 = 3;
    417          		uint8 charValue4 = 4;
    418          		uint8 charValue5[SIMPLEPROFILE_CHAR5_LEN] = { 1, 2, 3, 4, 5 };
    419          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR1, sizeof(uint8), &charValue1);
    420          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR2, sizeof(uint8), &charValue2);
    421          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR3, sizeof(uint8), &charValue3);
    422          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &charValue4);
    423          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR5, SIMPLEPROFILE_CHAR5_LEN, charValue5);
    424          	}
    425          
    426          	HalLcdWriteString("BLE slave zekezang", HAL_LCD_LINE_1);
    427          
    428          	// Register callback with SimpleGATTprofile
    429          	VOID SimpleProfile_RegisterAppCBs(&simpleBLEPeripheral_SimpleProfileCBs);
    430          
    431          	//who open who byebye
    432          	//HCI_EXT_ClkDivOnHaltCmd(HCI_EXT_ENABLE_CLK_DIVIDE_ON_HALT); no no no...
    433          
    434          	// Register for all key events - This app will handle all key events
    435          	RegisterForKeys(simpleBLEPeripheral_TaskID);
    436          
    437          #if defined ( DC_DC_P0_7 )
    438          	// Enable stack to toggle bypass control on TPS62730 (DC/DC converter)
    439          	HCI_EXT_MapPmIoPortCmd( HCI_EXT_PM_IO_PORT_P0, HCI_EXT_PM_IO_PORT_PIN7 );
    440          #endif // defined ( DC_DC_P0_7 )
    441          	// Setup a delayed profile startup
    442          	osal_set_event(simpleBLEPeripheral_TaskID, SBP_START_DEVICE_EVT);
    443          
    444          	/***********************************test something zekezang**********************************/
    445          	HalLcdWriteString("spi start", HAL_LCD_LINE_1);
    446          	
    447                        XNV_SPI_INIT();
    448                        HalSPIWrite(0x0,buf,20);
    449                        HalLcdWriteString((uint8*)buf, HAL_LCD_LINE_6);
    450          		  //HalLcd_HW_WriteLine(HAL_LCD_LINE_4, "Write:"); 
    451          		 // HalLcd_HW_WriteLine(HAL_LCD_LINE_5, buf); 
    452          		  //æ³¨æï¼è¿ç»­è¯»åä¹é´è³å°è¦å»¶æ¶800us
    453          		  //HalHW_WaitUs(800);
    454          	      HalSPIRead(0x0,bufrx,20);
    455                        HalLcdWriteString((uint8*)bufrx, HAL_LCD_LINE_7);
    456          		  //HalLcd_HW_WriteLine(HAL_LCD_LINE_6, "Read:"); 
    457          		 // HalLcd_HW_WriteLine(HAL_LCD_LINE_7, bufrx); 
    458          
    459          
    460          
    461          
    462          
    463          	/***********************************test something zekezang**********************************/
    464          }
    465          
    466          /*********************************************************************
    467           * @fn      SimpleBLEPeripheral_ProcessEvent
    468           *
    469           * @brief   Simple BLE Peripheral Application Task event processor.  This function
    470           *          is called to process all events for the task.  Events
    471           *          include timers, messages and any other user defined events.
    472           *
    473           * @param   task_id  - The OSAL assigned task ID.
    474           * @param   events - events to process.  This is a bit map and can
    475           *                   contain more than one event.
    476           *
    477           * @return  events not processed
    478           */
    479          uint16 SimpleBLEPeripheral_ProcessEvent(uint8 task_id, uint16 events) {
    480          
    481          	VOID task_id; // OSAL required parameter that isn't used in this function
    482          
    483          	if (events & SYS_EVENT_MSG) {
    484          		uint8 *pMsg;
    485          
    486          		if ((pMsg = osal_msg_receive(simpleBLEPeripheral_TaskID)) != NULL) {
    487          			simpleBLEPeripheral_ProcessOSALMsg((osal_event_hdr_t *) pMsg);
    488          
    489          			// Release the OSAL message
    490          			VOID osal_msg_deallocate(pMsg);
    491          		}
    492          
    493          		// return unprocessed events
    494          		return (events ^ SYS_EVENT_MSG);
    495          	}
    496          
    497          	if (events & SBP_START_DEVICE_EVT) {
    498          		// Start the Device
    499          		GAPRole_StartDevice(&simpleBLEPeripheral_PeripheralCBs);
    500          
    501          		// Start Bond Manager
    502          		GAPBondMgr_Register(&simpleBLEPeripheral_BondMgrCBs);
    503          
    504          		// Set timer for first periodic event
    505          		osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, SBP_PERIODIC_EVT_PERIOD);
    506          
    507          		return (events ^ SBP_START_DEVICE_EVT);
    508          	}
    509          
    510          	if (events & SBP_PERIODIC_EVT) {
    511          		// Restart timer
    512          		if (SBP_PERIODIC_EVT_PERIOD) {
    513          			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, SBP_PERIODIC_EVT_PERIOD);
    514          		}
    515          
    516          		// Perform periodic application task
    517          		performPeriodicTask();
    518          
    519          		return (events ^ SBP_PERIODIC_EVT);
    520          	}
    521          
    522          	if (events & SBP_ZEKEZANG_EVT) {
    523          		uint8 initial_advertising_enable = FALSE;
    524          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    525          		return (events ^ SBP_ZEKEZANG_EVT);
    526          	}
    527          
    528          	if (events & SBP_SEND_IRDATA_EVT) {
    529          		HalLcdWriteString("send plan complete...", HAL_LCD_LINE_4);
    530          		return (events ^ SBP_SEND_IRDATA_EVT);
    531          	}
    532          
    533          	if (events & SBP_ADV_IN_CONNECTION_EVT) {
    534          		uint8 turnOnAdv = TRUE;
    535          		// Turn on advertising while in a connection
    536          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &turnOnAdv);
    537          
    538          		return (events ^ SBP_ADV_IN_CONNECTION_EVT);
    539          	}
    540          
    541          	return 0;
    542          }
    543          
    544          /*********************************************************************
    545           * @fn      simpleBLEPeripheral_ProcessOSALMsg
    546           *
    547           * @brief   Process an incoming task message.
    548           *
    549           * @param   pMsg - message to process
    550           *
    551           * @return  none
    552           */
    553          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg) {
    554          	switch (pMsg->event) {
    555          	case KEY_CHANGE:
    556          		simpleBLEPeripheral_HandleKeys(((keyChange_t *) pMsg)->state, ((keyChange_t *) pMsg)->keys);
    557          		break;
    558          	default:
    559          		// do nothing
    560          		break;
    561          	}
    562          }
    563          
    564          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys) {
    565          	if (keys & HAL_KEY_UP) {
    566          		u_state = IR_DATA_STUDY_CMD_START_BEGIN_STATE;
    567          		SbpHalUARTWrite(&SBP_UART_STUDY_CMD, SBP_UART_STUDY_CMD_LEN);
    568          	}
    569          
    570          	if (keys & HAL_KEY_LEFT) {
    571          		HalLcdWriteString("read rtc ...", HAL_LCD_LINE_3);
    572          	}
    573          
    574          	if (keys & HAL_KEY_DOWN) {
    575          		HalLcdWriteString("send after 3s...", HAL_LCD_LINE_4);
    576          		osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT, 3000);
    577          	}
    578          
    579          	if (keys & HAL_KEY_RIGHT) {
    580          		HalLcdWriteStringValue("data_len:", data_len, 10, HAL_LCD_LINE_2);
    581          	}
    582          
    583          }
    584          
    585          /*********************************************************************
    586           * @fn      peripheralStateNotificationCB
    587           *
    588           * @brief   Notification from the profile of a state change.
    589           *
    590           * @param   newState - new state
    591           *
    592           * @return  none
    593           */
    594          static void peripheralStateNotificationCB(gaprole_States_t newState) {
    595          
    596          	//HalLcdWriteStringValue("newState", newState, 10, HAL_LCD_LINE_4);
    597          
    598          	switch (newState) {
    599          	case GAPROLE_STARTED: {
    600          		uint8 ownAddress[B_ADDR_LEN];
    601          		uint8 systemId[DEVINFO_SYSTEM_ID_LEN];
    602          
    603          		GAPRole_GetParameter(GAPROLE_BD_ADDR, ownAddress);
    604          
    605          		// use 6 bytes of device address for 8 bytes of system ID value
    606          		systemId[0] = ownAddress[0];
    607          		systemId[1] = ownAddress[1];
    608          		systemId[2] = ownAddress[2];
    609          
    610          		// set middle bytes to zero
    611          		systemId[4] = 0x00;
    612          		systemId[3] = 0x00;
    613          
    614          		// shift three bytes up
    615          		systemId[7] = ownAddress[5];
    616          		systemId[6] = ownAddress[4];
    617          		systemId[5] = ownAddress[3];
    618          
    619          		DevInfo_SetParameter(DEVINFO_SYSTEM_ID, DEVINFO_SYSTEM_ID_LEN, systemId);
    620          
    621          		// Display device address
    622          		bdAddr2Str(ownAddress);
    623          		//HalLcdWriteString(bdAddr2Str(ownAddress), HAL_LCD_LINE_3);
    624          		//HalLcdWriteString("Initialized", HAL_LCD_LINE_3);
    625          	}
    626          		break;
    627          
    628          	case GAPROLE_ADVERTISING: {
    629          		//HalLcdWriteString("Advertising", HAL_LCD_LINE_3);
    630          	}
    631          		break;
    632          
    633          	case GAPROLE_CONNECTED: {
    634          		//HalLcdWriteString("Connected", HAL_LCD_LINE_3);
    635          		//simpleProfile_StateNotify( uint16 connHandle, attHandleValueNoti_t *pNoti )
    636          		GAPRole_GetParameter(GAPROLE_CONNHANDLE, &gapConnHandle);
    637          	}
    638          		break;
    639          
    640          	case GAPROLE_WAITING: {
    641          		//HalLcdWriteString("Disconnected", HAL_LCD_LINE_3);
    642          	}
    643          		break;
    644          
    645          	case GAPROLE_WAITING_AFTER_TIMEOUT: {
    646          		//HalLcdWriteString("Timed Out", HAL_LCD_LINE_3);
    647          	}
    648          		break;
    649          
    650          	case GAPROLE_ERROR: {
    651          		//HalLcdWriteString("Error", HAL_LCD_LINE_3);
    652          	}
    653          		break;
    654          
    655          	default: {
    656          		//HalLcdWriteString("", HAL_LCD_LINE_3);
    657          	}
    658          		break;
    659          
    660          	}
    661          
    662          	gapProfileState = newState;
    663          
    664          #if !defined( CC2540_MINIDK )
    665          	VOID gapProfileState; // added to prevent compiler warning with
    666          						  // "CC2540 Slave" configurations
    667          #endif
    668          
    669          }
    670          
    671          /*********************************************************************
    672           * @fn      performPeriodicTask
    673           *
    674           * @brief   Perform a periodic application task. This function gets
    675           *          called every five seconds as a result of the SBP_PERIODIC_EVT
    676           *          OSAL event. In this example, the value of the third
    677           *          characteristic in the SimpleGATTProfile service is retrieved
    678           *          from the profile, and then copied into the value of the
    679           *          the fourth characteristic.
    680           *
    681           * @param   none
    682           *
    683           * @return  none
    684           */
    685          static void performPeriodicTask(void) {
    686          	uint8 valueToCopy;
    687          	uint8 stat;
    688          
    689          	// Call to retrieve the value of the third characteristic in the profile
    690          	stat = SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR3, &valueToCopy);
    691          
    692          	if (stat == SUCCESS) {
    693          		/*
    694          		 * Call to set that value of the fourth characteristic in the profile. Note
    695          		 * that if notifications of the fourth characteristic have been enabled by
    696          		 * a GATT client device, then a notification will be sent every time this
    697          		 * function is called.
    698          		 */
    699          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &valueToCopy);
    700          	}
    701          }
    702          
    703          /*********************************************************************
    704           * @fn      simpleProfileChangeCB
    705           * @brief   Callback from SimpleBLEProfile indicating a value change
    706           * @param   paramID - parameter ID of the value that was changed.
    707           *
    708           * @return  none
    709           */
    710          static void simpleProfileChangeCB(uint8 paramID) {
    711          	osal_memset(newValueBuf, 0, 20);
    712          	switch (paramID) {
    713          	case SIMPLEPROFILE_CHAR1:
    714          		SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR1,newValueBuf);
    715          
    716          		
    717          
    718          		break;
    719          	case SIMPLEPROFILE_CHAR3:
    720          		//SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR3, &newValue);
    721          		break;
    722          	default:
    723          		// should not reach here!
    724          		break;
    725          	}
    726          }
    727          
    728          /*********************************************************************
    729           * @fn      bdAddr2Str
    730           *
    731           * @brief   Convert Bluetooth address to string. Only needed when
    732           *          LCD display is used.
    733           *
    734           * @return  none
    735           */
    736          char *bdAddr2Str(uint8 *pAddr) {
    737          	uint8 i;
    738          	char hex[] = "0123456789ABCDEF";
    739          	static char str[B_ADDR_STR_LEN];
    740          	char *pStr = str;
    741          
    742          	*pStr++ = '0';
    743          	*pStr++ = 'x';
    744          
    745          	// Start from end of addr
    746          	pAddr += B_ADDR_LEN;
    747          
    748          	for (i = B_ADDR_LEN; i > 0; i--) {
    749          		*pStr++ = hex[*--pAddr >> 4];
    750          		*pStr++ = hex[*pAddr & 0x0F];
    751          	}
    752          
    753          	*pStr = 0;
    754          
    755          	return str;
    756          }
    757          /*********************************************************************
    758           *********************************************************************/
    759          //static int ascii2hex(char c) {
    760          //	int ret = -1;
    761          //	if ((c >= '0') && (c <= '9')) {
    762          //		ret = c - '0';
    763          //	} else if ((c >= 'A') && (c <= 'Z')) {
    764          //		ret = c - 'A' + 65;
    765          //	} else if ((c >= 'a') && (c <= 'z')) {
    766          //		ret = c - 'a' + 97;
    767          //	}
    768          //	return ret;
    769          //}
    770          //static void updateDeviceName(char *name, uint8 len) {
    771          //	uint8 k = 0;
    772          //	for (k = 0; k < len; k++) {
    773          //		scanRspData[k + 2] = ascii2hex(*(name + k));
    774          //	}
    775          //}

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0     43  SimpleBLEPeripheral_Init
                          0 0 39 -> DevInfo_AddService
                          0 0 39 -> GAPBondMgr_SetParameter
                          0 0 39 -> GAPRole_SetParameter
                          0 0 39 -> GAP_SetParamValue
                          0 0 39 -> GATTServApp_AddService
                          0 0 39 -> GGS_AddService
                          0 0 39 -> GGS_SetParameter
                          0 0 39 -> HalLcdWriteString
                          0 0 43 -> HalSPIRead
                          0 0 43 -> HalSPIWrite
                          0 0 39 -> RegisterForKeys
                          0 0 39 -> SbpHalUART_Init
                          0 0 39 -> SimpleProfile_AddService
                          0 0 39 -> SimpleProfile_RegisterAppCBs
                          0 0 39 -> SimpleProfile_SetParameter
                          0 0 39 -> osal_set_event
       0      0     17  SimpleBLEPeripheral_ProcessEvent
                          0 0 13 -> GAPBondMgr_Register
                          0 0 13 -> GAPRole_SetParameter
                          0 0 13 -> GAPRole_StartDevice
                          0 0 13 -> HalLcdWriteString
                          0 0 14 -> HalLcdWriteStringValue
                          0 0 13 -> SbpHalUARTWrite
                          0 0 13 -> SimpleProfile_GetParameter
                          0 0 13 -> SimpleProfile_SetParameter
                          0 0 13 -> osal_msg_deallocate
                          0 0 13 -> osal_msg_receive
                          0 0 17 -> osal_start_timerEx
       2      0     49  bdAddr2Str
       1      0     23  peripheralStateNotificationCB
                          0 0 23 -> DevInfo_SetParameter
                          0 0 23 -> GAPRole_GetParameter
                          0 0 23 -> bdAddr2Str
       0      0     12  simpleBLEPeripheralPairStateCB
                          0 0 12 -> GAPRole_TerminateConnection
                          0 0 11 -> HalLcdWriteString
                          0 0 12 -> HalLcdWriteStringValue
       0      0      9  simpleProfileChangeCB
                          0 0  9 -> SimpleProfile_GetParameter
                          0 0  9 -> osal_memset


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      17  ?<Constant "0123456789ABCDEF">
      19  ?<Constant "BLE slave zekezang">
      16  ?<Constant "Bonding success">
      13  ?<Constant "Pairing fail">
      16  ?<Constant "Pairing fail--a">
      16  ?<Constant "Pairing started">
      16  ?<Constant "Pairing success">
      10  ?<Constant "data_len:">
      13  ?<Constant "read rtc ...">
      17  ?<Constant "send after 3s...">
      22  ?<Constant "send plan complete...">
      10  ?<Constant "spi start">
       5  ?<Constant {1, 2, 3, 4, 5}>
       7  ?<Initializer for advertData>
      22  ?<Initializer for attDeviceName>
      20  ?<Initializer for buf>
      30  ?<Initializer for scanRspData>
       4  ?<Initializer for simpleBLEPeripheral_BondMgrC
       4  ?<Initializer for simpleBLEPeripheral_Peripher
       2  ?<Initializer for simpleBLEPeripheral_SimplePr
       6  ??SimpleBLEPeripheral_Init?relay
       6  ??SimpleBLEPeripheral_ProcessEvent?relay
       5  ??Subroutine2_0
       6  ??bdAddr2Str?relay
       6  ??peripheralStateNotificationCB?relay
       6  ??simpleBLEPeripheralPairStateCB?relay
       6  ??simpleProfileChangeCB?relay
       3  ?Subroutine0
      28  ?Subroutine1
       1  P1DIR
       1  P1SEL
       1  P2SEL
       1  PERCFG
     778  SimpleBLEPeripheral_Init
     395  SimpleBLEPeripheral_ProcessEvent
       1  U1BAUD
       1  U1GCR
       1  _A_P1
       1  _A_U1CSR
       4  __Constant_0
       4  __Constant_1388
       4  __Constant_bb8
       4  __Constant_ffffffff
       7  advertData
      22  attDeviceName
     102  bdAddr2Str
      20  buf
      20  bufrx
       1  data_len
       2  gapConnHandle
       1  gapProfileState
      20  newValueBuf
     202  peripheralStateNotificationCB
      30  scanRspData
     115  simpleBLEPeripheralPairStateCB
       4  simpleBLEPeripheral_BondMgrCBs
       4  simpleBLEPeripheral_PeripheralCBs
       2  simpleBLEPeripheral_SimpleProfileCBs
       1  simpleBLEPeripheral_TaskID
      34  simpleProfileChangeCB
      15  str

 
 1 662 bytes in segment BANKED_CODE
    36 bytes in segment BANK_RELAYS
     8 bytes in segment SFR_AN
    89 bytes in segment XDATA_I
    89 bytes in segment XDATA_ID
   206 bytes in segment XDATA_ROM_C
    60 bytes in segment XDATA_Z
 
 1 787 bytes of CODE  memory
   190 bytes of CONST memory (+ 16 bytes shared)
     0 bytes of DATA  memory (+  8 bytes shared)
   149 bytes of XDATA memory

Errors: none
Warnings: 8
