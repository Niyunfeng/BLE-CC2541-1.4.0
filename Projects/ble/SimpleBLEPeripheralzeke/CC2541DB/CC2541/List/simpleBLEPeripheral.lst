###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             11/Mar/2014  15:33:10 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\Source\simpleBLEPeripheral #
#                          .c                                                 #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\config\b #
#                          uildComponents.cfg (-DBROADCASTER_CFG=0x01         #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheralzeke\CC2541DB\buildCo #
#                          nfig.cfg (-DHOST_CONFIG=PERIPHERAL_CFG             #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\Source\simpleBLEPeripheral #
#                          .c -D INT_HEAP_LEN=3074 -D HALNODEBUG -D           #
#                          OSAL_CBTIMER_NUM_TASKS=1 -D xHAL_AES_DMA=TRUE -D   #
#                          HAL_DMA=TRUE -D POWER_SAVING -D xPLUS_BROADCASTER  #
#                          -D HAL_LCD=TRUE -D HAL_LED=TRUE -D HAL_UART=TRUE   #
#                          -D HAL_ADC=TRUE -lcN E:\TexasInstruments\BLE-CC254 #
#                          x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC254 #
#                          1DB\CC2541\List\ -o E:\TexasInstruments\BLE-CC254x #
#                          -1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541 #
#                          DB\CC2541\Obj\ -e --debug --core=plain             #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I E:\TexasInstruments\BLE-CC #
#                          254x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC #
#                          2541DB\..\..\common\ -I E:\TexasInstruments\BLE-CC #
#                          254x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC #
#                          2541DB\..\..\include\ -I                           #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\hal\include\ -I E:\TexasInstruments\BLE-CC25 #
#                          4x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC25 #
#                          41DB\..\..\..\..\Components\hal\target\CC2541EB\   #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\services\saddr\ -I                           #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\include\ -I E:\TexasInstruments\BLE-CC25 #
#                          4x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC25 #
#                          41DB\..\..\..\..\Components\ble\controller\phy\    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Co #
#                          mponents\ble\controller\include\ -I                #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\..\..\Components\ble\host\ -I               #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\common\cc25 #
#                          40\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\comm #
#                          on\npi\npi_np\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\Profiles\Roles\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Si #
#                          mpleProfile\ -I E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB\. #
#                          .\..\Profiles\DevInfo\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Ba #
#                          tt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\Prof #
#                          iles\HIDDev\ -Ohz                                  #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\simpl #
#                          eBLEPeripheral.lst                                 #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\simple #
#                          BLEPeripheral.r51                                  #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\Source\simpleBLEPeripheral.c
      1          /**************************************************************************************************
      2           Filename:       simpleBLEPeripheral.c
      3           Revised:        $Date: 2010-08-06 08:56:11 -0700 (Fri, 06 Aug 2010) $
      4           Revision:       $Revision: 23333 $
      5          
      6           Description:    This file contains the Simple BLE Peripheral sample application
      7           for use with the CC2540 Bluetooth Low Energy Protocol Stack.
      8          
      9           Copyright 2010 - 2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11           IMPORTANT: Your use of this Software is limited to those specific rights
     12           granted under the terms of a software license agreement between the user
     13           who downloaded the software, his/her employer (which must be your employer)
     14           and Texas Instruments Incorporated (the "License").  You may not use this
     15           Software unless you agree to abide by the terms of the License. The License
     16           limits your use, and you acknowledge, that the Software may not be modified,
     17           copied or distributed unless embedded on a Texas Instruments microcontroller
     18           or used solely and exclusively in conjunction with a Texas Instruments radio
     19           frequency transceiver, which is integrated into your product.  Other than for
     20           the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21           works of, modify, distribute, perform, display or sell this Software and/or
     22           its documentation for any purpose.
     23          
     24           YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25           PROVIDED ï¿½AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26           INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27           NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28           TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29           NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30           LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31           INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32           OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33           OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34           (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36           Should you have any questions regarding your right to use this Software,
     37           contact Texas Instruments Incorporated at www.TI.com.
     38           **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bcomdef.h"
     45          #include "OSAL.h"
     46          #include "OSAL_PwrMgr.h"
     47          #include "osal_snv.h"
     48          
     49          #include "OnBoard.h"
     50          #include "hal_adc.h"
     51          #include "hal_led.h"
     52          #include "hal_key.h"
     53          #include "hal_lcd.h"
     54          #include "SimpleBLESerialUart.h"
     55          
     56          #include "gatt.h"
     57          
     58          #include "hci.h"
     59          
     60          #include "gapgattserver.h"
     61          #include "gattservapp.h"
     62          #include "devinfoservice.h"
     63          #include "simpleGATTprofile.h"
     64          
     65          #if defined ( PLUS_BROADCASTER )
     66          #include "peripheralBroadcaster.h"
     67          #else
     68          #include "peripheral.h"
     69          #endif
     70          
     71          #include "gapbondmgr.h"
     72          
     73          #include "simpleBLEPeripheral.h"
     74          
     75          #if defined FEATURE_OAD
     76          #include "oad.h"
     77          #include "oad_target.h"
     78          #endif
     79          
     80          #include "hal_i2c.h"
     81          #include "hal_eeprom.h"
     82          #include "hal_at24c32.h"
     83          #include "hal_ds1307.h"
     84          #include "SimpleEepromUtils.h"
     85          #include "SimpleRTCInterrupt.h"
     86          #include "SimpleBLESPIFlash.h"
     87          #include "battservice.h"
     88          #include "SimpleTemperature.h"
     89          #include "SimpleDS18B20.h"
     90          #include "Simplepasscode.h"
     91          /*********************************************************************
     92           * MACROS
     93           */
     94          
     95          /*********************************************************************
     96           * CONSTANTS
     97           */
     98          
     99          // How often to perform periodic event
    100          #define SBP_PERIODIC_EVT_PERIOD                   5000
    101          
    102          #define TEMP_CHECK_PERIOD                         2000
    103          
    104          // How often to check battery voltage (in ms)
    105          #define BATTERY_CHECK_PERIOD                     13000////////////////////////////////////batt
    106          
    107          // What is the advertising interval when device is discoverable (units of 625us, 160=100ms)
    108          #define DEFAULT_ADVERTISING_INTERVAL          160
    109          /*//èå´20MS-10.24Sä¹é´ é¤å»å¹¿æ­å»¶æ¶æ¶é´0-10msï¼ä¸ºå¶å¯è®¾ç½®çèå´ã
    110          //è¥å¹¿æ­äºä»¶æ¯å¯æ«ææ åäºä»¶æéè¿æ¥æ åäºä»¶ å¶å¼ä¸å¾å°äº100MSï¼è¥å¹¿æ­äºä»¶æ¯å¯è¿æ¥æ åäºä»¶ï¼å¶å¼å¯ä»¥ä¸º20MSæèæ´å¤§   
    111          //ä¸ææºéä¿¡è¿ç¨ä¸­ç¨çæ¯,é»è®¤è®¾ç½®  GAP_ADTYPE_ADV_INDå³å¯è¿æ¥æ åäºä»¶  æµåèæ¶å¯ä»¥éå½è°æ´å¶å¼ */
    112          // Whether to enable automatic parameter update request when a connection is formed
    113          #define DEFAULT_ENABLE_UPDATE_REQUEST        TRUE// FALSE
    114          
    115          // Limited discoverable mode advertises for 30.72s, and then stops
    116          // General discoverable mode advertises indefinitely
    117          
    118          #if defined ( CC2540_MINIDK )
    119          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_LIMITED
    120          #else
    121          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_GENERAL
    122          #endif  // defined ( CC2540_MINIDK )
    123          // Minimum connection interval (units of 1.25ms, 80=100ms) if automatic parameter update request is enabled
    124          #define DEFAULT_DESIRED_MIN_CONN_INTERVAL     80
    125          
    126          // Maximum connection interval (units of 1.25ms, 800=1000ms) if automatic parameter update request is enabled
    127          #define DEFAULT_DESIRED_MAX_CONN_INTERVAL     800
    128          
    129          // Slave latency to use if automatic parameter update request is enabled
    130          #define DEFAULT_DESIRED_SLAVE_LATENCY         0//10  åæ°æ´æ°æå¼ ä¸ææºéä¿¡æ¶ è¦å°äº4
    131          
    132          // Supervision timeout value (units of 10ms, 1000=10s) if automatic parameter update request is enabled
    133          #define DEFAULT_DESIRED_CONN_TIMEOUT          1000//ä¸ææºéä¿¡æ¶ è¦å¤§äºç­äº6S
    134          
    135          // Company Identifier: Texas Instruments Inc. (13)
    136          #define TI_COMPANY_ID                         0x000D
    137          
    138          #define INVALID_CONNHANDLE                    0xFFFF
    139          
    140          // Length of bd addr as a string
    141          #define B_ADDR_STR_LEN                        15
    142          
    143          #if defined ( PLUS_BROADCASTER )
    144          #define ADV_IN_CONN_WAIT                    500 // delay 500 ms
    145          #endif
    146          
    147          // GAP connection handle
    148          static uint16 gapConnHandle;
    149          
    150          extern uint8 SBP_UART_STUDY_CMD;
    151          extern uint8 SBP_UART_STUDY_CMD_LEN;
    152          
    153          /*************************************************************
    154           *  recv data define
    155           */
    156          //XDATA uint8 a[3000]={0};
    157          extern UartState u_state;
    158          #define TRANSFER_DATA_SIGN 0xFE
    159          #define TRANSFER_DATA_SIGN_RE 0xFF
    160          #define UART_DATA_START_INDEX 2
    161          #define one_time_data_len 125
    162          // uint8 code recv_value1[2540] = { 0 };
    163          static uint8  recv_value[254] = { 0 };
    164          static uint8 TRANSFER_DATA_STATE_IN = FALSE;
    165          static char newValueBuf[20] = { 0 };
    166          static uint8 data_len = 0, cur_data_len = 0, data_len_index = 0, send_times = 0;
    167          
    168          /*********************************************************************
    169           * SPI FLASH
    170           */
    171          uint8 buf[20];
    172          uint8 bufrx[20];
    173          
    174          /*********************************************************************
    175           * temperature
    176           */
    177          uint8 temperature[20];
    178          uint8 temp_18b20[10];
    179          uint8 temp_flag=0;
    180          uint8 temp_18b20_flag=0;
    181          /*************************************************************
    182           *  LIST
    183           */
    184          
    185           typedef struct
    186          {           
    187            
    188            uint8 listlen;                   
    189            uint8 value1[100]; 
    190            uint8 value2[100];                   
    191            uint8 value3[100]; 
    192             //uint8 value4[100]; 
    193              //uint8 value5[100]; 
    194              // uint8 value6[100]; 
    195            uint8 value1_len; 
    196            uint8 value2_len;                   
    197            uint8 value3_len;
    198          }list;
    199          //list current_list={1,{0},{0},0,0}; 
    200           //list current_list={1,{0},{0},{0},{0},{0},0,0,0};
    201          list current_list={1,{0},{0},{0},0,0,0};
    202          
    203          
    204          
    205          /*********************************************************************
    206           * GLOBAL VARIABLES
    207           */
    208          
    209          /*********************************************************************
    210           * EXTERNAL VARIABLES
    211           */
    212          
    213          /*********************************************************************
    214           * EXTERNAL FUNCTIONS
    215           */
    216          
    217          /*********************************************************************
    218           * LOCAL VARIABLES
    219           */
    220          static uint8 simpleBLEPeripheral_TaskID; // Task ID for internal task/event processing
    221          
    222          static gaprole_States_t gapProfileState = GAPROLE_INIT;
    223          
    224          // GAP - SCAN RSP data (max size = 31 bytes)
    225          static uint8 scanRspData[] = {
    226          // complete name
    227          		0x14,// length of this data
    228          		GAP_ADTYPE_LOCAL_NAME_COMPLETE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    229          		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    230          
    231          		// connection interval range
    232          		0x05,// length of this data
    233          		GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE, LO_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), // 100ms
    234          		HI_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), LO_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL), // 1s
    235          		HI_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL),
    236          
    237          		// Tx power level
    238          		0x02,// length of this data
    239          		GAP_ADTYPE_POWER_LEVEL, 0 // 0dBm
    240          		};
    241          
    242          // GAP - Advertisement data (max size = 31 bytes, though this is
    243          // best kept short to conserve power while advertisting)
    244          static uint8 advertData[] = {
    245          // Flags; this sets the device to use limited discoverable
    246          // mode (advertises for 30 seconds at a time) instead of general
    247          // discoverable mode (advertises indefinitely)
    248          		0x02,// length of this data
    249          		GAP_ADTYPE_FLAGS, DEFAULT_DISCOVERABLE_MODE | GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED,
    250          
    251          		// service UUID, to notify central devices what services are included
    252          		// in this peripheral
    253          		0x03,// length of this data
    254          		GAP_ADTYPE_16BIT_MORE, // some of the UUID's, but not all
    255          		LO_UINT16(SIMPLEPROFILE_SERV_UUID), HI_UINT16(SIMPLEPROFILE_SERV_UUID),
    256          
    257          };
    258          
    259          /*********************************************************************
    260           * LOCAL FUNCTIONS
    261           */
    262          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg);
    263          static void peripheralStateNotificationCB(gaprole_States_t newState);
    264          static void performPeriodicTask(void);
    265          static void simpleProfileChangeCB(uint8 paramID);
    266          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys);
    267          //static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs);
    268          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status);
    269          static char *bdAddr2Str(uint8 *pAddr);
    270          static void gettemp(void);
    271          //static void updateDeviceName(char *name, uint8 len);
    272          //static uint32 atoi(uint8 s[]);
    273          static void Uartsend_irdata(void);
    274          static void Receive_Save_Uartsend_irdata(void);
    275          
    276          /*********************************************************************
    277           * PROFILE CALLBACKS
    278           */
    279          
    280          // GAP Role Callbacks
    281          static gapRolesCBs_t simpleBLEPeripheral_PeripheralCBs = { peripheralStateNotificationCB, // Profile State Change Callbacks
    282          		NULL // When a valid RSSI is read from controller (not used by application)
    283          		};
    284          
    285          // GAP Bond Manager Callbacks
    286          static gapBondCBs_t simpleBLEPeripheral_BondMgrCBs = { NULL, // Passcode callback (not used by application)
    287          		simpleBLEPeripheralPairStateCB // Pairing / Bonding state Callback (not used by application)
    288          		};
    289          
    290          // Simple GATT Profile Callbacks
    291          static simpleProfileCBs_t simpleBLEPeripheral_SimpleProfileCBs = { simpleProfileChangeCB // Charactersitic value change callback
    292          		};
    293          
    294          /*********************************************************************
    295           * @fn      pairStateCB
    296           * @brief   Pairing state callback.
    297           * @return  none
    298           */
    299          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status) {
    300          	if (state == GAPBOND_PAIRING_STATE_STARTED) {
    301          		HalLcdWriteString("Pairing started", HAL_LCD_LINE_7);
    302          	} else if (state == GAPBOND_PAIRING_STATE_COMPLETE) {
    303          		if (status == SUCCESS) {
    304          			HalLcdWriteString("Pairing success", HAL_LCD_LINE_7);
    305          		} else {
    306          			HalLcdWriteStringValue("Pairing fail", status, 10, HAL_LCD_LINE_7);
    307          			uint8 a = GAPRole_TerminateConnection();
    308          			HalLcdWriteStringValue("Pairing fail--a", a, 10, HAL_LCD_LINE_7);
    309          		}
    310          	} else if (state == GAPBOND_PAIRING_STATE_BONDED) {
    311          		if (status == SUCCESS) {
    312          			HalLcdWriteString("Bonding success", HAL_LCD_LINE_1);
    313          		}
    314          	}
    315          
    316          	//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_ZEKEZANG_EVT, 5000);
    317          }
    318          
    319          /*********************************************************************
    320           * @fn      simpleBLECentralPasscodeCB
    321           * @brief   Passcode callback.
    322           * @return  none
    323          
    324           static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs) {
    325           HalLcdWriteStringValue("uiInputs:", uiInputs, 10, HAL_LCD_LINE_5);
    326           HalLcdWriteStringValue("uiOutputs", uiOutputs, 10, HAL_LCD_LINE_6);
    327           }
    328           */
    329          
    330          /*********************************************************************
    331           * @fn      readWriteFlash
    332           * @brief   readWriteFlash
    333           * @return  none
    334          
    335           static uint32 passs = 0;
    336           static void readWriteFlash() {
    337           uint8 * aa;
    338           aa = osal_msg_allocate(15);
    339           osal_memset(aa, 0, 15);
    340           osal_memcpy(aa, "as", 2);
    341           uint16 p = 1234;
    342           if (osal_snv_write(0xE0, sizeof(uint16), &p) == SUCCESS) {
    343           HalLcdWriteString("write ok", HAL_LCD_LINE_2);
    344           }
    345           osal_msg_deallocate(aa);
    346           uint8 bb[15] = { 0x0 };
    347           uint16 bb = 0;
    348           if (osal_snv_read(0xE0, 15, &bb) == SUCCESS) {
    349           HalLcdWriteString("read ok", HAL_LCD_LINE_2);
    350           passs = bb;
    351           }
    352           }
    353           */
    354          
    355          void gettemp(void)
    356          {
    357               // osal_snv_read(0xE0,6,&temperature);
    358                 // uint8 TempValue[6];  
    359                  uint8 AvgTemp=0,i=0,j;
    360                  uint8 sensor_data_value;  //ä¼ æå¨æ°æ®
    361          
    362                  initTempSensor();
    363                  AvgTemp = getTemperature();  
    364                  
    365                  temperature[temp_flag]=AvgTemp;
    366                  temp_flag++;
    367                 
    368                  DS18B20_SendConvert();
    369                  //å»¶æ¶1S
    370                  for(j=20; j>0; j--)
    371                    delay_nus(50000);
    372                  sensor_data_value=DS18B20_GetTem();
    373                  temp_18b20[temp_18b20_flag]=sensor_data_value;
    374                  temp_18b20_flag++;
    375          
    376                  if(temp_flag==8)
    377                  {
    378          
    379                    for(i=0;i<temp_flag;i++)
    380                    // HalLcdWriteStringValue("AvgTemp:", temperature[i], 10, i+1);
    381                     HalLcdWriteStringValueValue("Temp,18b20:", temperature[i], 10, temp_18b20[i],10,i+1);
    382                  }
    383                  
    384                  
    385          }
    386          /*********************************************************************
    387           * PUBLIC FUNCTIONS
    388           */
    389          
    390          /*********************************************************************
    391           * @fn      SimpleBLEPeripheral_Init
    392           *
    393           * @brief   Initialization function for the Simple BLE Peripheral App Task.
    394           *          This is called during initialization and should contain
    395           *          any application specific initialization (ie. hardware
    396           *          initialization/setup, table initialization, power up
    397           *          notificaiton ... ).
    398           *
    399           * @param   task_id - the ID assigned by OSAL.  This ID should be
    400           *                    used to send messages and set timers.
    401           *
    402           * @return  none
    403           */
    404          void SimpleBLEPeripheral_Init(uint8 task_id) {
    405          	simpleBLEPeripheral_TaskID = task_id;
    406          	SbpHalUART_Init(task_id);
    407                  
    408          	// Setup the GAP Peripheral Role Profile
    409          	{
    410          
    411          #if defined( CC2540_MINIDK )
    412          		// For the CC2540DK-MINI keyfob, device doesn't start advertising until button is pressed
    413          		uint8 initial_advertising_enable = FALSE;
    414          #else
    415          		// For other hardware platforms, device starts advertising upon initialization
    416          		uint8 initial_advertising_enable = TRUE;
    417          #endif
    418          
    419          		// By setting this to zero, the device will go into the waiting state after
    420          		// being discoverable for 30.72 second, and will not being advertising again
    421          		// until the enabler is set back to TRUE
    422          		uint16 gapRole_AdvertOffTime = 0;
    423          
    424          		uint8 enable_update_request = DEFAULT_ENABLE_UPDATE_REQUEST;
    425          		uint16 desired_min_interval = DEFAULT_DESIRED_MIN_CONN_INTERVAL;
    426          		uint16 desired_max_interval = DEFAULT_DESIRED_MAX_CONN_INTERVAL;
    427          		uint16 desired_slave_latency = DEFAULT_DESIRED_SLAVE_LATENCY;
    428          		uint16 desired_conn_timeout = DEFAULT_DESIRED_CONN_TIMEOUT;
    429          
    430          		// Set the GAP Role Parameters
    431          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    432          		GAPRole_SetParameter(GAPROLE_ADVERT_OFF_TIME, sizeof(uint16), &gapRole_AdvertOffTime);
    433          
    434          		GAPRole_SetParameter(GAPROLE_SCAN_RSP_DATA, sizeof(scanRspData), scanRspData);
    435          		GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(advertData), advertData);
    436          
    437          		GAPRole_SetParameter(GAPROLE_PARAM_UPDATE_ENABLE, sizeof(uint8), &enable_update_request);
    438          		GAPRole_SetParameter(GAPROLE_MIN_CONN_INTERVAL, sizeof(uint16), &desired_min_interval);
    439          		GAPRole_SetParameter(GAPROLE_MAX_CONN_INTERVAL, sizeof(uint16), &desired_max_interval);
    440          		GAPRole_SetParameter(GAPROLE_SLAVE_LATENCY, sizeof(uint16), &desired_slave_latency);
    441          		GAPRole_SetParameter(GAPROLE_TIMEOUT_MULTIPLIER, sizeof(uint16), &desired_conn_timeout);
    442          	}
    443          
    444          	//readWriteFlash();
    445          
    446          
    447          	// Set advertising interval
    448          	{
    449          		uint16 advInt = DEFAULT_ADVERTISING_INTERVAL;
    450          
    451          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MIN, advInt);
    452          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MAX, advInt);
    453          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MIN, advInt);
    454          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MAX, advInt);
    455          	}
    456                  set_passkey();
    457          
    458          
    459          	// Initialize GATT attributes
    460          	GGS_AddService(GATT_ALL_SERVICES); // GAP
    461          	GATTServApp_AddService(GATT_ALL_SERVICES); // GATT attributes
    462          	DevInfo_AddService(); // Device Information Service
    463          	SimpleProfile_AddService(GATT_ALL_SERVICES); // Simple GATT Profile
    464                  Batt_AddService();     // Battery Service
    465                  
    466                  
    467                  
    468                  
    469          #if defined FEATURE_OAD
    470          			VOID OADTarget_AddService(); // OAD Profile
    471          #endif
    472          
    473          	// Setup the SimpleProfile Characteristic Values
    474          	{
    475          		uint8 charValue1 = 1;
    476          		uint8 charValue2 = 2;
    477          		uint8 charValue3 = 3;
    478          		uint8 charValue4 = 4;
    479          		uint8 charValue5[SIMPLEPROFILE_CHAR5_LEN] = { 1, 2, 3, 4, 5 };
    480          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR1, sizeof(uint8), &charValue1);
    481          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR2, sizeof(uint8), &charValue2);
    482          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR3, sizeof(uint8), &charValue3);
    483          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &charValue4);
    484          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR5, SIMPLEPROFILE_CHAR5_LEN, charValue5);
    485          	}
    486          
    487          	HalLcdWriteString("BLE slave aico", HAL_LCD_LINE_1);
    488          
    489          	// Register callback with SimpleGATTprofile
    490          	VOID SimpleProfile_RegisterAppCBs(&simpleBLEPeripheral_SimpleProfileCBs);
    491          
    492          	//who open who byebye
    493          	//HCI_EXT_ClkDivOnHaltCmd(HCI_EXT_ENABLE_CLK_DIVIDE_ON_HALT); no no no...
    494          
    495          	// Register for all key events - This app will handle all key events
    496          	RegisterForKeys(simpleBLEPeripheral_TaskID);
    497          
    498          #if defined ( DC_DC_P0_7 )
    499          	// Enable stack to toggle bypass control on TPS62730 (DC/DC converter)
    500          	HCI_EXT_MapPmIoPortCmd( HCI_EXT_PM_IO_PORT_P0, HCI_EXT_PM_IO_PORT_PIN7 );
    501          #endif // defined ( DC_DC_P0_7 )
    502          	// Setup a delayed profile startup
    503          	osal_set_event(simpleBLEPeripheral_TaskID, SBP_START_DEVICE_EVT);
    504                  
    505                  
    506                   // initialize the ADC for battery reads
    507                  HalAdcInit();
    508          
    509          	/***********************************test something zekezang**********************************/
    510          	//HalLcdWriteString(" start", HAL_LCD_LINE_1);
    511          	
    512                      XNV_SPI_INIT();
    513                
    514          
    515          
    516          	/***********************************test something zekezang**********************************/
    517          }
    518          
    519          /*********************************************************************
    520           * @fn      SimpleBLEPeripheral_ProcessEvent
    521           *
    522           * @brief   Simple BLE Peripheral Application Task event processor.  This function
    523           *          is called to process all events for the task.  Events
    524           *          include timers, messages and any other user defined events.
    525           *
    526           * @param   task_id  - The OSAL assigned task ID.
    527           * @param   events - events to process.  This is a bit map and can
    528           *                   contain more than one event.
    529           *
    530           * @return  events not processed
    531           */
    532          uint16 SimpleBLEPeripheral_ProcessEvent(uint8 task_id, uint16 events) {
    533          
    534          	VOID task_id; // OSAL required parameter that isn't used in this function
    535                  uint8 i;
    536          	if (events & SYS_EVENT_MSG) {
    537          		uint8 *pMsg;
    538          
    539          		if ((pMsg = osal_msg_receive(simpleBLEPeripheral_TaskID)) != NULL) {
    540          			simpleBLEPeripheral_ProcessOSALMsg((osal_event_hdr_t *) pMsg);
    541          
    542          			// Release the OSAL message
    543          			VOID osal_msg_deallocate(pMsg);
    544          		}
    545          
    546          		// return unprocessed events
    547          		return (events ^ SYS_EVENT_MSG);
    548          	}
    549          
    550          	if (events & SBP_START_DEVICE_EVT) {
    551          		// Start the Device
    552          		GAPRole_StartDevice(&simpleBLEPeripheral_PeripheralCBs);
    553          
    554          		// Start Bond Manager
    555          		GAPBondMgr_Register(&simpleBLEPeripheral_BondMgrCBs);
    556          
    557          		// Set timer for first periodic event
    558          		//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, SBP_PERIODIC_EVT_PERIOD);
    559                          
    560                          // Set timer for first battery read event
    561                          osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, BATTERY_CHECK_PERIOD );
    562                          
    563          
    564                          osal_start_timerEx(simpleBLEPeripheral_TaskID, TEMP_EVT, TEMP_CHECK_PERIOD );
    565                    
    566          		return (events ^ SBP_START_DEVICE_EVT);
    567          	}
    568          
    569          	if (events & SBP_PERIODIC_EVT) {
    570          		
    571          //                //Restart timer
    572          //                if ( BATTERY_CHECK_PERIOD )
    573          //               {
    574          //                 osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, BATTERY_CHECK_PERIOD );
    575          //                }
    576          //                 
    577          //               HalLedSet(HAL_LED_1, HAL_LED_MODE_ON ); 
    578          //                 //å»¶æ¶1S
    579          //               for(i=20; i>0; i--)
    580          //                  delay_nus(50000);
    581          //               HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF );
    582          //               // perform battery level check
    583          //               Batt_MeasLevel();
    584          //               
    585          		return (events ^ SBP_PERIODIC_EVT);
    586          	}
    587          
    588          	if (events & SBP_ZEKEZANG_EVT) {
    589          		uint8 initial_advertising_enable = FALSE;
    590          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    591          		return (events ^ SBP_ZEKEZANG_EVT);
    592          	}
    593          
    594          	if (events & SBP_SEND_IRDATA_EVT) {
    595          		HalLcdWriteString("send plan complete...", HAL_LCD_LINE_4);
    596          		return (events ^ SBP_SEND_IRDATA_EVT);
    597          	}
    598          
    599          	if (events & SBP_ADV_IN_CONNECTION_EVT) {
    600          		uint8 turnOnAdv = TRUE;
    601          		// Turn on advertising while in a connection
    602          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &turnOnAdv);
    603          
    604          		return (events ^ SBP_ADV_IN_CONNECTION_EVT);
    605          	}
    606                  
    607                  if (events & TEMP_EVT) {
    608                        // HalLcdWriteString("start get temp", HAL_LCD_LINE_5);
    609                         HalLedSet(HAL_LED_2, HAL_LED_MODE_ON ); 
    610                           //å»¶æ¶1S
    611                         for(i=20; i>0; i--)
    612                            delay_nus(50000);
    613                         HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF );
    614          	       gettemp();
    615                         osal_start_timerEx(simpleBLEPeripheral_TaskID, TEMP_EVT, TEMP_CHECK_PERIOD ); 
    616                          
    617          	       return (events ^ TEMP_EVT);
    618          	}
    619                  
    620          
    621          	return 0;
    622          }
    623          
    624          /*********************************************************************
    625           * @fn      simpleBLEPeripheral_ProcessOSALMsg
    626           *
    627           * @brief   Process an incoming task message.
    628           *
    629           * @param   pMsg - message to process
    630           *
    631           * @return  none
    632           */
    633          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg) {
    634          	switch (pMsg->event) {
    635          	case KEY_CHANGE:
    636          		simpleBLEPeripheral_HandleKeys(((keyChange_t *) pMsg)->state, ((keyChange_t *) pMsg)->keys);
    637          		break;
    638          	default:
    639          		// do nothing
    640          		break;
    641          	}
    642          }
    643          
    644          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys) {
    645          	if (keys & HAL_KEY_UP) {
    646          		u_state = IR_DATA_STUDY_CMD_START_BEGIN_STATE;
    647          		SbpHalUARTWrite(&SBP_UART_STUDY_CMD, SBP_UART_STUDY_CMD_LEN);
    648          	}
    649          
    650          	if (keys & HAL_KEY_LEFT) {
    651          		HalLcdWriteString("change to de_paddkey_name", HAL_LCD_LINE_3);
    652                          set_de_passkey();
    653          	}
    654          
    655          	if (keys & HAL_KEY_DOWN) {
    656          		HalLcdWriteString("send after 3s...", HAL_LCD_LINE_4);
    657          		osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT, 3000);
    658          	}
    659          
    660          	if (keys & HAL_KEY_RIGHT) {
    661          		HalLcdWriteStringValue("data_len:", data_len, 10, HAL_LCD_LINE_2);
    662          	}
    663          
    664          }
    665          
    666          /*********************************************************************
    667           * @fn      peripheralStateNotificationCB
    668           *
    669           * @brief   Notification from the profile of a state change.
    670           *
    671           * @param   newState - new state
    672           *
    673           * @return  none
    674           */
    675          static void peripheralStateNotificationCB(gaprole_States_t newState) {
    676          
    677          	//HalLcdWriteStringValue("newState", newState, 10, HAL_LCD_LINE_4);
    678          
    679          	switch (newState) {
    680          	case GAPROLE_STARTED: {
    681          		uint8 ownAddress[B_ADDR_LEN];
    682          		uint8 systemId[DEVINFO_SYSTEM_ID_LEN];
    683          
    684          		GAPRole_GetParameter(GAPROLE_BD_ADDR, ownAddress);
    685          
    686          		// use 6 bytes of device address for 8 bytes of system ID value
    687          		systemId[0] = ownAddress[0];
    688          		systemId[1] = ownAddress[1];
    689          		systemId[2] = ownAddress[2];
    690          
    691          		// set middle bytes to zero
    692          		systemId[4] = 0x00;
    693          		systemId[3] = 0x00;
    694          
    695          		// shift three bytes up
    696          		systemId[7] = ownAddress[5];
    697          		systemId[6] = ownAddress[4];
    698          		systemId[5] = ownAddress[3];
    699          
    700          		DevInfo_SetParameter(DEVINFO_SYSTEM_ID, DEVINFO_SYSTEM_ID_LEN, systemId);
    701          
    702          		// Display device address
    703          		bdAddr2Str(ownAddress);
    704          		HalLcdWriteString(bdAddr2Str(ownAddress), HAL_LCD_LINE_3);
    705          		HalLcdWriteString("Initialized", HAL_LCD_LINE_3);
    706          	}
    707          		break;
    708          
    709          	case GAPROLE_ADVERTISING: {
    710          		HalLcdWriteString("Advertising", HAL_LCD_LINE_3);
    711          	}
    712          		break;
    713          
    714          	case GAPROLE_CONNECTED: {
    715          		HalLcdWriteString("Connected", HAL_LCD_LINE_3);
    716          		//simpleProfile_StateNotify( uint16 connHandle, attHandleValueNoti_t *pNoti )
    717          		GAPRole_GetParameter(GAPROLE_CONNHANDLE, &gapConnHandle);
    718          	}
    719          		break;
    720          
    721          	case GAPROLE_WAITING: {
    722          		HalLcdWriteString("Disconnected", HAL_LCD_LINE_3);
    723          	}
    724          		break;
    725          
    726          	case GAPROLE_WAITING_AFTER_TIMEOUT: {
    727          		HalLcdWriteString("Timed Out", HAL_LCD_LINE_3);
    728          	}
    729          		break;
    730          
    731          	case GAPROLE_ERROR: {
    732          		HalLcdWriteString("Error", HAL_LCD_LINE_3);
    733          	}
    734          		break;
    735          
    736          	default: {
    737          		HalLcdWriteString("", HAL_LCD_LINE_3);
    738          	}
    739          		break;
    740          
    741          	}
    742          
    743          	gapProfileState = newState;
    744          
    745          #if !defined( CC2540_MINIDK )
    746          	VOID gapProfileState; // added to prevent compiler warning with
    747          						  // "CC2540 Slave" configurations
    748          #endif
    749          
    750          }
    751          
    752          /*********************************************************************
    753           * @fn      performPeriodicTask
    754           *
    755           * @brief   Perform a periodic application task. This function gets
    756           *          called every five seconds as a result of the SBP_PERIODIC_EVT
    757           *          OSAL event. In this example, the value of the third
    758           *          characteristic in the SimpleGATTProfile service is retrieved
    759           *          from the profile, and then copied into the value of the
    760           *          the fourth characteristic.
    761           *
    762           * @param   none
    763           *
    764           * @return  none
    765           */
    766          static void performPeriodicTask(void) {
    767          	uint8 valueToCopy;
    768          	uint8 stat;
    769          
    770          	// Call to retrieve the value of the third characteristic in the profile
    771          	stat = SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR3, &valueToCopy);
    772          
    773          	if (stat == SUCCESS) {
    774          		/*
    775          		 * Call to set that value of the fourth characteristic in the profile. Note
    776          		 * that if notifications of the fourth characteristic have been enabled by
    777          		 * a GATT client device, then a notification will be sent every time this
    778          		 * function is called.
    779          		 */
    780          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &valueToCopy);
    781          	}
    782          }
    783          
    784          /*********************************************************************
    785           * @fn      simpleProfileChangeCB
    786           * @brief   Callback from SimpleBLEProfile indicating a value change
    787           * @param   paramID - parameter ID of the value that was changed.
    788           *
    789           * @return  none
    790           */
    791          static void simpleProfileChangeCB(uint8 paramID) {
    792          	osal_memset(buf, 0, 20);
    793                   uint8 valuechar3[20]={0};
    794          	switch (paramID) {
    795          	case SIMPLEPROFILE_CHAR1:
    796          		/* SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR1, newValueBuf);
    797                      //uint8 *new1=&newValueBuf[0];
    798                      
    799                      if ((newValueBuf[0] == TRANSFER_DATA_SIGN) && (newValueBuf[1] == TRANSFER_DATA_SIGN_RE)) 
    800          	     {
    801          			TRANSFER_DATA_STATE_IN = FALSE;
    802                                 
    803          		}
    804                      
    805                      
    806          	   if ((newValueBuf[4] != 0) && (!TRANSFER_DATA_STATE_IN)) 
    807          	    {
    808          			timer_flag=newValueBuf[2];
    809                                  if(timer_flag==2)
    810                                   { 
    811                                     time=newValueBuf[3]*1000;
    812                                   }
    813                                  else time=0;
    814                                  data_len = newValueBuf[UART_DATA_START_INDEX];
    815          			TRANSFER_DATA_STATE_IN = TRUE;
    816          			data_len_index = 0;
    817          			osal_memset(recv_value, 0, data_len);
    818                               //   HalLcdWriteString("ok", HAL_LCD_LINE_5);
    819          		}
    820          	
    821          	  cur_data_len = osal_strlen(newValueBuf);//æé®é¢ æ¯0çè¯ é¿åº¦ä¸å¯¹
    822                   //  cur_data_len = sizeof(newValueBuf);
    823                     HalLcdWriteStringValue("cur_data_len:",cur_data_len, 10, HAL_LCD_LINE_5); 
    824                     
    825          	   if (TRANSFER_DATA_STATE_IN) 
    826          	    {
    827          		osal_memcpy((recv_value + data_len_index), newValueBuf, cur_data_len);
    828                          
    829          		data_len_index += cur_data_len;
    830                          
    831          	     }
    832                     //HalLcdWriteStringValue("data_len:", data_len, 10, HAL_LCD_LINE_6);
    833                     //HalLcdWriteStringValue("recv_value_len:", osal_strlen((char *)recv_value), 10, HAL_LCD_LINE_7); 
    834                     //HalLcdWriteStringValue("data_len_index:", data_len_index, 10, HAL_LCD_LINE_8);
    835                     
    836                     
    837                     
    838                     if (data_len_index == data_len) 
    839          	   {
    840                      
    841                           if(timer_flag==1)
    842          		    Uartsend_irdata();
    843          		
    844          		 else if(timer_flag==2) 
    845          		
    846          		    Receive_Save_Uartsend_irdata();
    847          			
    848          			
    849          		
    850          		TRANSFER_DATA_STATE_IN = FALSE;
    851          		HalLcdWriteStringValue("data_len:", osal_strlen((char *)recv_value), 10, HAL_LCD_LINE_6); 
    852                          HalLcdWriteStringValue("listlen:", current_list.listlen, 10, HAL_LCD_LINE_8);
    853          		data_len = 0;
    854                          send_times = 0;
    855          		cur_data_len = 0;
    856          		data_len_index = 0;
    857          		osal_memset(recv_value, 0, data_len);
    858                     }*/
    859                    
    860                    /*SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR1,buf);
    861                           HalSPIWrite(0x0,buf,20);
    862                           HalLcdWriteString((uint8*)buf, HAL_LCD_LINE_6);
    863          		  //HalLcd_HW_WriteLine(HAL_LCD_LINE_4, "Write:"); 
    864          		 // HalLcd_HW_WriteLine(HAL_LCD_LINE_5, buf); 
    865          		  //æ³¨æï¼è¿ç»­è¯»åä¹é´è³å°è¦å»¶æ¶800us
    866          		  //HalHW_WaitUs(800);
    867          	          HalSPIRead(0x0,bufrx,20);
    868                             HalLcdWriteString((uint8*)bufrx, HAL_LCD_LINE_7);
    869          		  //HalLcd_HW_WriteLine(HAL_LCD_LINE_6, "Read:"); 
    870          		 // HalLcd_HW_WriteLine(HAL_LCD_LINE_7, bufrx); 
    871          */
    872          		
    873          
    874          		break;
    875          	case SIMPLEPROFILE_CHAR3:
    876          		SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR3, valuechar3);
    877                          set_code_name(valuechar3);
    878           
    879          		break;
    880          	default:
    881          		// should not reach here!
    882          		break;
    883          	}
    884          }
    885          /*********************************************************************
    886           * @fn      Receive_Save_Uartsend_irdata(void)
    887           * @brief  if
    888           * @param  
    889           * @return  none
    890           */
    891            static void Receive_Save_Uartsend_irdata(void)
    892           {
    893                         
    894          		/*if(current_list.listlen==1)
    895          		{	osal_memset(current_list.value1, 0, data_len);
    896          			osal_memcpy(current_list.value1, recv_value, data_len);
    897          			current_list.value1_len=data_len;
    898          			current_list.listlen++;
    899          			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT1, time);
    900          			
    901          			 
    902          			
    903          		}
    904          		else if(current_list.listlen==2)
    905          		{	osal_memset(current_list.value2, 0, data_len);
    906          			osal_memcpy(current_list.value2, recv_value, data_len);
    907          			current_list.value2_len=data_len;
    908          			current_list.listlen++;
    909          			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT2, time);
    910          			
    911          		}
    912          		else if(current_list.listlen==3)
    913          		{
    914          			osal_memset(current_list.value3, 0, data_len);
    915          			osal_memcpy(current_list.value3, recv_value, data_len);
    916          			current_list.value3_len=data_len;
    917          			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT3, time);
    918          			current_list.listlen++;
    919          		} 
    920          		SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR2, sizeof(uint8), &current_list.listlen);
    921          	*/
    922          
    923          } 
    924          /*********************************************************************
    925           * @fn      Uartsend_irdata
    926           * @brief  
    927           * @param  
    928           * @return  none
    929           */
    930           static void Uartsend_irdata()
    931           {
    932          	        //HalLcdWriteString("ok", HAL_LCD_LINE_5); 
    933          		recv_value[UART_DATA_START_INDEX] = 0xE3;
    934                          SbpHalUARTWrite(recv_value + UART_DATA_START_INDEX, data_len-4);
    935           }
    936           
    937          
    938          /*********************************************************************
    939           * @fn      bdAddr2Str
    940           *
    941           * @brief   Convert Bluetooth address to string. Only needed when
    942           *          LCD display is used.
    943           *
    944           * @return  none
    945           */
    946          char *bdAddr2Str(uint8 *pAddr) {
    947          	uint8 i;
    948          	char hex[] = "0123456789ABCDEF";
    949          	static char str[B_ADDR_STR_LEN];
    950          	char *pStr = str;
    951          
    952          	*pStr++ = '0';
    953          	*pStr++ = 'x';
    954          
    955          	// Start from end of addr
    956          	pAddr += B_ADDR_LEN;
    957          
    958          	for (i = B_ADDR_LEN; i > 0; i--) {
    959          		*pStr++ = hex[*--pAddr >> 4];
    960          		*pStr++ = hex[*pAddr & 0x0F];
    961          	}
    962          
    963          	*pStr = 0;
    964          
    965          	return str;
    966          }
    967          /*********************************************************************
    968           *********************************************************************/
    969          //static int ascii2hex(char c) {
    970          //	int ret = -1;
    971          //	if ((c >= '0') && (c <= '9')) {
    972          //		ret = c - '0';
    973          //	} else if ((c >= 'A') && (c <= 'Z')) {
    974          //		ret = c - 'A' + 65;
    975          //	} else if ((c >= 'a') && (c <= 'z')) {
    976          //		ret = c - 'a' + 97;
    977          //	}
    978          //	return ret;
    979          //}
    980          //static void updateDeviceName(char *name, uint8 len) {
    981          //	uint8 k = 0;
    982          //	for (k = 0; k < len; k++) {
    983          //		scanRspData[k + 2] = ascii2hex(*(name + k));
    984          //	}
    985          //}
    986          
    987          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0     30  SimpleBLEPeripheral_Init
                          0 0 30 -> Batt_AddService
                          0 0 30 -> DevInfo_AddService
                          0 0 30 -> GAPRole_SetParameter
                          0 0 30 -> GAP_SetParamValue
                          0 0 30 -> GATTServApp_AddService
                          0 0 30 -> GGS_AddService
                          0 0 30 -> HalAdcInit
                          0 0 30 -> HalLcdWriteString
                          0 0 30 -> RegisterForKeys
                          0 0 30 -> SbpHalUART_Init
                          0 0 30 -> SimpleProfile_AddService
                          0 0 30 -> SimpleProfile_RegisterAppCBs
                          0 0 30 -> SimpleProfile_SetParameter
                          0 0 30 -> osal_set_event
                          0 0 30 -> set_passkey
       0      0     17  SimpleBLEPeripheral_ProcessEvent
                          0 0 13 -> GAPBondMgr_Register
                          0 0 13 -> GAPRole_SetParameter
                          0 0 13 -> GAPRole_StartDevice
                          0 0 13 -> HalLcdWriteString
                          0 0 14 -> HalLcdWriteStringValue
                          0 0 13 -> HalLedSet
                          0 0 13 -> SbpHalUARTWrite
                          0 0 13 -> delay_nus
                          0 0 13 -> gettemp
                          0 0 13 -> osal_msg_deallocate
                          0 0 13 -> osal_msg_receive
                          0 0 17 -> osal_start_timerEx
                          0 0 13 -> set_de_passkey
       2      0     49  bdAddr2Str
       1      0     27  gettemp
                          0 0 10 -> DS18B20_GetTem
                          0 0 10 -> DS18B20_SendConvert
                          0 0 14 -> HalLcdWriteStringValueValue
                          0 0 10 -> delay_nus
                          0 0 10 -> getTemperature
                          0 0 10 -> initTempSensor
       1      0     23  peripheralStateNotificationCB
                          0 0 23 -> DevInfo_SetParameter
                          0 0 23 -> GAPRole_GetParameter
                          0 0 23 -> HalLcdWriteString
                          0 0 23 -> bdAddr2Str
       0      0     12  simpleBLEPeripheralPairStateCB
                          0 0 12 -> GAPRole_TerminateConnection
                          0 0 11 -> HalLcdWriteString
                          0 0 12 -> HalLcdWriteStringValue
       2      0     29  simpleProfileChangeCB
                          0 0 29 -> SimpleProfile_GetParameter
                          0 0 29 -> osal_memset
                          0 0 29 -> set_code_name


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
      17  ?<Constant "0123456789ABCDEF">
      12  ?<Constant "Advertising">
      15  ?<Constant "BLE slave aico">
      16  ?<Constant "Bonding success">
      10  ?<Constant "Connected">
      13  ?<Constant "Disconnected">
       6  ?<Constant "Error">
      12  ?<Constant "Initialized">
      13  ?<Constant "Pairing fail">
      16  ?<Constant "Pairing fail--a">
      16  ?<Constant "Pairing started">
      16  ?<Constant "Pairing success">
      12  ?<Constant "Temp,18b20:">
      10  ?<Constant "Timed Out">
      26  ?<Constant "change to de_paddkey_...">
      10  ?<Constant "data_len:">
      17  ?<Constant "send after 3s...">
      22  ?<Constant "send plan complete...">
      20  ?<Constant {0}>
       5  ?<Constant {1, 2, 3, 4, 5}>
       7  ?<Initializer for advertData>
     304  ?<Initializer for current_list>
      30  ?<Initializer for scanRspData>
       4  ?<Initializer for simpleBLEPeripheral_BondMgrC
       4  ?<Initializer for simpleBLEPeripheral_Peripher
       2  ?<Initializer for simpleBLEPeripheral_SimplePr
       6  ??SimpleBLEPeripheral_Init?relay
       6  ??SimpleBLEPeripheral_ProcessEvent?relay
       6  ??bdAddr2Str?relay
       6  ??gettemp?relay
       6  ??peripheralStateNotificationCB?relay
       6  ??simpleBLEPeripheralPairStateCB?relay
       6  ??simpleProfileChangeCB?relay
       8  ?Subroutine0
      28  ?Subroutine1
       1  P1DIR
       1  P1SEL
       1  P2SEL
       1  PERCFG
     534  SimpleBLEPeripheral_Init
     431  SimpleBLEPeripheral_ProcessEvent
       1  U1BAUD
       1  U1GCR
       1  _A_P1
       1  _A_U1CSR
       4  __Constant_32c8
       4  __Constant_7d0
       4  __Constant_bb8
       4  __Constant_ffffffff
       7  advertData
     101  bdAddr2Str
      20  buf
      20  bufrx
     304  current_list
       1  data_len
       2  gapConnHandle
       1  gapProfileState
     177  gettemp
     305  peripheralStateNotificationCB
      30  scanRspData
     115  simpleBLEPeripheralPairStateCB
       4  simpleBLEPeripheral_BondMgrCBs
       4  simpleBLEPeripheral_PeripheralCBs
       2  simpleBLEPeripheral_SimpleProfileCBs
       1  simpleBLEPeripheral_TaskID
      81  simpleProfileChangeCB
      15  str
      10  temp_18b20
       1  temp_18b20_flag
       1  temp_flag
      20  temperature

 
 1 780 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     8 bytes in segment SFR_AN
   351 bytes in segment XDATA_I
   351 bytes in segment XDATA_ID
   301 bytes in segment XDATA_ROM_C
    92 bytes in segment XDATA_Z
 
 2 173 bytes of CODE  memory
   285 bytes of CONST memory (+ 16 bytes shared)
     0 bytes of DATA  memory (+  8 bytes shared)
   443 bytes of XDATA memory

Errors: none
Warnings: 9
