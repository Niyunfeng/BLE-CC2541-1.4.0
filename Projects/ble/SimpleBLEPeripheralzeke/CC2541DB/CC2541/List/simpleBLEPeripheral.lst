###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             07/Mar/2014  13:38:08 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\Source\simpleBLEPeripheral #
#                          .c                                                 #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\config\b #
#                          uildComponents.cfg (-DBROADCASTER_CFG=0x01         #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheralzeke\CC2541DB\buildCo #
#                          nfig.cfg (-DHOST_CONFIG=PERIPHERAL_CFG             #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\Source\simpleBLEPeripheral #
#                          .c -D INT_HEAP_LEN=3074 -D HALNODEBUG -D           #
#                          OSAL_CBTIMER_NUM_TASKS=1 -D xHAL_AES_DMA=TRUE -D   #
#                          HAL_DMA=TRUE -D POWER_SAVING -D xPLUS_BROADCASTER  #
#                          -D HAL_LCD=TRUE -D HAL_LED=TRUE -D HAL_UART=TRUE   #
#                          -D HAL_ADC=TRUE -lcN E:\TexasInstruments\BLE-CC254 #
#                          x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC254 #
#                          1DB\CC2541\List\ -o E:\TexasInstruments\BLE-CC254x #
#                          -1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541 #
#                          DB\CC2541\Obj\ -e --debug --core=plain             #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I E:\TexasInstruments\BLE-CC #
#                          254x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC #
#                          2541DB\..\..\common\ -I E:\TexasInstruments\BLE-CC #
#                          254x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC #
#                          2541DB\..\..\include\ -I                           #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\hal\include\ -I E:\TexasInstruments\BLE-CC25 #
#                          4x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC25 #
#                          41DB\..\..\..\..\Components\hal\target\CC2541EB\   #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\services\saddr\ -I                           #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\include\ -I E:\TexasInstruments\BLE-CC25 #
#                          4x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC25 #
#                          41DB\..\..\..\..\Components\ble\controller\phy\    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Co #
#                          mponents\ble\controller\include\ -I                #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\..\..\Components\ble\host\ -I               #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\common\cc25 #
#                          40\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\comm #
#                          on\npi\npi_np\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\Profiles\Roles\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Si #
#                          mpleProfile\ -I E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB\. #
#                          .\..\Profiles\DevInfo\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Ba #
#                          tt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\Prof #
#                          iles\HIDDev\ -Ohz                                  #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\simpl #
#                          eBLEPeripheral.lst                                 #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\simple #
#                          BLEPeripheral.r51                                  #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\Source\simpleBLEPeripheral.c
      1          /**************************************************************************************************
      2           Filename:       simpleBLEPeripheral.c
      3           Revised:        $Date: 2010-08-06 08:56:11 -0700 (Fri, 06 Aug 2010) $
      4           Revision:       $Revision: 23333 $
      5          
      6           Description:    This file contains the Simple BLE Peripheral sample application
      7           for use with the CC2540 Bluetooth Low Energy Protocol Stack.
      8          
      9           Copyright 2010 - 2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11           IMPORTANT: Your use of this Software is limited to those specific rights
     12           granted under the terms of a software license agreement between the user
     13           who downloaded the software, his/her employer (which must be your employer)
     14           and Texas Instruments Incorporated (the "License").  You may not use this
     15           Software unless you agree to abide by the terms of the License. The License
     16           limits your use, and you acknowledge, that the Software may not be modified,
     17           copied or distributed unless embedded on a Texas Instruments microcontroller
     18           or used solely and exclusively in conjunction with a Texas Instruments radio
     19           frequency transceiver, which is integrated into your product.  Other than for
     20           the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21           works of, modify, distribute, perform, display or sell this Software and/or
     22           its documentation for any purpose.
     23          
     24           YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25           PROVIDED ï¿½AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26           INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27           NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28           TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29           NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30           LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31           INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32           OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33           OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34           (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36           Should you have any questions regarding your right to use this Software,
     37           contact Texas Instruments Incorporated at www.TI.com.
     38           **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bcomdef.h"
     45          #include "OSAL.h"
     46          #include "OSAL_PwrMgr.h"
     47          #include "osal_snv.h"
     48          
     49          #include "OnBoard.h"
     50          #include "hal_adc.h"
     51          #include "hal_led.h"
     52          #include "hal_key.h"
     53          #include "hal_lcd.h"
     54          #include "SimpleBLESerialUart.h"
     55          
     56          #include "gatt.h"
     57          
     58          #include "hci.h"
     59          
     60          #include "gapgattserver.h"
     61          #include "gattservapp.h"
     62          #include "devinfoservice.h"
     63          #include "simpleGATTprofile.h"
     64          
     65          #if defined ( PLUS_BROADCASTER )
     66          #include "peripheralBroadcaster.h"
     67          #else
     68          #include "peripheral.h"
     69          #endif
     70          
     71          #include "gapbondmgr.h"
     72          
     73          #include "simpleBLEPeripheral.h"
     74          
     75          #if defined FEATURE_OAD
     76          #include "oad.h"
     77          #include "oad_target.h"
     78          #endif
     79          
     80          #include "hal_i2c.h"
     81          #include "hal_eeprom.h"
     82          #include "hal_at24c32.h"
     83          #include "hal_ds1307.h"
     84          #include "SimpleEepromUtils.h"
     85          #include "SimpleRTCInterrupt.h"
     86          #include "SimpleBLESPIFlash.h"
     87          #include "battservice.h"
     88          #include "SimpleTemperature.h"
     89          #include "SimpleDS18B20.h"
     90          /*********************************************************************
     91           * MACROS
     92           */
     93          
     94          /*********************************************************************
     95           * CONSTANTS
     96           */
     97          
     98          // How often to perform periodic event
     99          #define SBP_PERIODIC_EVT_PERIOD                   5000
    100          
    101          // How often to check battery voltage (in ms)
    102          #define BATTERY_CHECK_PERIOD                  5000////////////////////////////////////batt
    103          
    104          // What is the advertising interval when device is discoverable (units of 625us, 160=100ms)
    105          #define DEFAULT_ADVERTISING_INTERVAL          160
    106          
    107          // Whether to enable automatic parameter update request when a connection is formed
    108          #define DEFAULT_ENABLE_UPDATE_REQUEST         FALSE
    109          
    110          // Limited discoverable mode advertises for 30.72s, and then stops
    111          // General discoverable mode advertises indefinitely
    112          
    113          #if defined ( CC2540_MINIDK )
    114          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_LIMITED
    115          #else
    116          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_GENERAL
    117          #endif  // defined ( CC2540_MINIDK )
    118          // Minimum connection interval (units of 1.25ms, 80=100ms) if automatic parameter update request is enabled
    119          #define DEFAULT_DESIRED_MIN_CONN_INTERVAL     80
    120          
    121          // Maximum connection interval (units of 1.25ms, 800=1000ms) if automatic parameter update request is enabled
    122          #define DEFAULT_DESIRED_MAX_CONN_INTERVAL     800
    123          
    124          // Slave latency to use if automatic parameter update request is enabled
    125          #define DEFAULT_DESIRED_SLAVE_LATENCY         10
    126          
    127          // Supervision timeout value (units of 10ms, 1000=10s) if automatic parameter update request is enabled
    128          #define DEFAULT_DESIRED_CONN_TIMEOUT          1000
    129          
    130          // Company Identifier: Texas Instruments Inc. (13)
    131          #define TI_COMPANY_ID                         0x000D
    132          
    133          #define INVALID_CONNHANDLE                    0xFFFF
    134          
    135          // Length of bd addr as a string
    136          #define B_ADDR_STR_LEN                        15
    137          
    138          #if defined ( PLUS_BROADCASTER )
    139          #define ADV_IN_CONN_WAIT                    500 // delay 500 ms
    140          #endif
    141          
    142          // GAP connection handle
    143          static uint16 gapConnHandle;
    144          
    145          extern uint8 SBP_UART_STUDY_CMD;
    146          extern uint8 SBP_UART_STUDY_CMD_LEN;
    147          
    148          /*************************************************************
    149           *  recv data define
    150           */
    151          //XDATA uint8 a[3000]={0};
    152          extern UartState u_state;
    153          #define TRANSFER_DATA_SIGN 0xFE
    154          #define TRANSFER_DATA_SIGN_RE 0xFF
    155          #define UART_DATA_START_INDEX 2
    156          #define one_time_data_len 125
    157          // uint8 code recv_value1[2540] = { 0 };
    158          static uint8  recv_value[254] = { 0 };
    159          static uint8 TRANSFER_DATA_STATE_IN = FALSE;
    160          static char newValueBuf[20] = { 0 };
    161          static uint8 data_len = 0, cur_data_len = 0, data_len_index = 0, send_times = 0;
    162          
    163          /*********************************************************************
    164           * SPI FLASH
    165           */
    166          uint8 buf[20];
    167          uint8 bufrx[20];
    168          
    169          
    170          
    171          /*********************************************************************
    172           * GLOBAL VARIABLES
    173           */
    174          
    175          /*********************************************************************
    176           * EXTERNAL VARIABLES
    177           */
    178          
    179          /*********************************************************************
    180           * EXTERNAL FUNCTIONS
    181           */
    182          
    183          /*********************************************************************
    184           * LOCAL VARIABLES
    185           */
    186          static uint8 simpleBLEPeripheral_TaskID; // Task ID for internal task/event processing
    187          
    188          static gaprole_States_t gapProfileState = GAPROLE_INIT;
    189          
    190          // GAP - SCAN RSP data (max size = 31 bytes)
    191          static uint8 scanRspData[] = {
    192          // complete name
    193          		0x14,// length of this data
    194          		GAP_ADTYPE_LOCAL_NAME_COMPLETE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    195          		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    196          
    197          		// connection interval range
    198          		0x05,// length of this data
    199          		GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE, LO_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), // 100ms
    200          		HI_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), LO_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL), // 1s
    201          		HI_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL),
    202          
    203          		// Tx power level
    204          		0x02,// length of this data
    205          		GAP_ADTYPE_POWER_LEVEL, 0 // 0dBm
    206          		};
    207          
    208          // GAP - Advertisement data (max size = 31 bytes, though this is
    209          // best kept short to conserve power while advertisting)
    210          static uint8 advertData[] = {
    211          // Flags; this sets the device to use limited discoverable
    212          // mode (advertises for 30 seconds at a time) instead of general
    213          // discoverable mode (advertises indefinitely)
    214          		0x02,// length of this data
    215          		GAP_ADTYPE_FLAGS, DEFAULT_DISCOVERABLE_MODE | GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED,
    216          
    217          		// service UUID, to notify central devices what services are included
    218          		// in this peripheral
    219          		0x03,// length of this data
    220          		GAP_ADTYPE_16BIT_MORE, // some of the UUID's, but not all
    221          		LO_UINT16(SIMPLEPROFILE_SERV_UUID), HI_UINT16(SIMPLEPROFILE_SERV_UUID),
    222          
    223          };
    224          
    225          // GAP GATT Attributes
    226          static uint8 attDeviceName[GAP_DEVICE_NAME_LEN] = "zekezang";
    227          
    228          /*********************************************************************
    229           * LOCAL FUNCTIONS
    230           */
    231          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg);
    232          static void peripheralStateNotificationCB(gaprole_States_t newState);
    233          static void performPeriodicTask(void);
    234          static void simpleProfileChangeCB(uint8 paramID);
    235          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys);
    236          //static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs);
    237          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status);
    238          static char *bdAddr2Str(uint8 *pAddr);
    239          //static void updateDeviceName(char *name, uint8 len);
    240          /*********************************************************************
    241           * PROFILE CALLBACKS
    242           */
    243          
    244          // GAP Role Callbacks
    245          static gapRolesCBs_t simpleBLEPeripheral_PeripheralCBs = { peripheralStateNotificationCB, // Profile State Change Callbacks
    246          		NULL // When a valid RSSI is read from controller (not used by application)
    247          		};
    248          
    249          // GAP Bond Manager Callbacks
    250          static gapBondCBs_t simpleBLEPeripheral_BondMgrCBs = { NULL, // Passcode callback (not used by application)
    251          		simpleBLEPeripheralPairStateCB // Pairing / Bonding state Callback (not used by application)
    252          		};
    253          
    254          // Simple GATT Profile Callbacks
    255          static simpleProfileCBs_t simpleBLEPeripheral_SimpleProfileCBs = { simpleProfileChangeCB // Charactersitic value change callback
    256          		};
    257          
    258          /*********************************************************************
    259           * @fn      pairStateCB
    260           * @brief   Pairing state callback.
    261           * @return  none
    262           */
    263          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status) {
    264          	if (state == GAPBOND_PAIRING_STATE_STARTED) {
    265          		HalLcdWriteString("Pairing started", HAL_LCD_LINE_7);
    266          	} else if (state == GAPBOND_PAIRING_STATE_COMPLETE) {
    267          		if (status == SUCCESS) {
    268          			HalLcdWriteString("Pairing success", HAL_LCD_LINE_7);
    269          		} else {
    270          			HalLcdWriteStringValue("Pairing fail", status, 10, HAL_LCD_LINE_7);
    271          			uint8 a = GAPRole_TerminateConnection();
    272          			HalLcdWriteStringValue("Pairing fail--a", a, 10, HAL_LCD_LINE_7);
    273          		}
    274          	} else if (state == GAPBOND_PAIRING_STATE_BONDED) {
    275          		if (status == SUCCESS) {
    276          			HalLcdWriteString("Bonding success", HAL_LCD_LINE_1);
    277          		}
    278          	}
    279          
    280          	//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_ZEKEZANG_EVT, 5000);
    281          }
    282          
    283          /*********************************************************************
    284           * @fn      simpleBLECentralPasscodeCB
    285           * @brief   Passcode callback.
    286           * @return  none
    287          
    288           static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs) {
    289           HalLcdWriteStringValue("uiInputs:", uiInputs, 10, HAL_LCD_LINE_5);
    290           HalLcdWriteStringValue("uiOutputs", uiOutputs, 10, HAL_LCD_LINE_6);
    291           }
    292           */
    293          
    294          /*********************************************************************
    295           * @fn      readWriteFlash
    296           * @brief   readWriteFlash
    297           * @return  none
    298          
    299           static uint32 passs = 0;
    300           static void readWriteFlash() {
    301           uint8 * aa;
    302           aa = osal_msg_allocate(15);
    303           osal_memset(aa, 0, 15);
    304           osal_memcpy(aa, "as", 2);
    305           uint16 p = 1234;
    306           if (osal_snv_write(0xE0, sizeof(uint16), &p) == SUCCESS) {
    307           HalLcdWriteString("write ok", HAL_LCD_LINE_2);
    308           }
    309           osal_msg_deallocate(aa);
    310           uint8 bb[15] = { 0x0 };
    311           uint16 bb = 0;
    312           if (osal_snv_read(0xE0, 15, &bb) == SUCCESS) {
    313           HalLcdWriteString("read ok", HAL_LCD_LINE_2);
    314           passs = bb;
    315           }
    316           }
    317           */
    318          
    319          /*********************************************************************
    320           * PUBLIC FUNCTIONS
    321           */
    322          
    323          /*********************************************************************
    324           * @fn      SimpleBLEPeripheral_Init
    325           *
    326           * @brief   Initialization function for the Simple BLE Peripheral App Task.
    327           *          This is called during initialization and should contain
    328           *          any application specific initialization (ie. hardware
    329           *          initialization/setup, table initialization, power up
    330           *          notificaiton ... ).
    331           *
    332           * @param   task_id - the ID assigned by OSAL.  This ID should be
    333           *                    used to send messages and set timers.
    334           *
    335           * @return  none
    336           */
    337          void SimpleBLEPeripheral_Init(uint8 task_id) {
    338          	simpleBLEPeripheral_TaskID = task_id;
    339          	SbpHalUART_Init(task_id);
    340                  
    341          	// Setup the GAP Peripheral Role Profile
    342          	{
    343          
    344          #if defined( CC2540_MINIDK )
    345          		// For the CC2540DK-MINI keyfob, device doesn't start advertising until button is pressed
    346          		uint8 initial_advertising_enable = FALSE;
    347          #else
    348          		// For other hardware platforms, device starts advertising upon initialization
    349          		uint8 initial_advertising_enable = TRUE;
    350          #endif
    351          
    352          		// By setting this to zero, the device will go into the waiting state after
    353          		// being discoverable for 30.72 second, and will not being advertising again
    354          		// until the enabler is set back to TRUE
    355          		uint16 gapRole_AdvertOffTime = 0;
    356          
    357          		uint8 enable_update_request = DEFAULT_ENABLE_UPDATE_REQUEST;
    358          		uint16 desired_min_interval = DEFAULT_DESIRED_MIN_CONN_INTERVAL;
    359          		uint16 desired_max_interval = DEFAULT_DESIRED_MAX_CONN_INTERVAL;
    360          		uint16 desired_slave_latency = DEFAULT_DESIRED_SLAVE_LATENCY;
    361          		uint16 desired_conn_timeout = DEFAULT_DESIRED_CONN_TIMEOUT;
    362          
    363          		// Set the GAP Role Parameters
    364          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    365          		GAPRole_SetParameter(GAPROLE_ADVERT_OFF_TIME, sizeof(uint16), &gapRole_AdvertOffTime);
    366          
    367          		GAPRole_SetParameter(GAPROLE_SCAN_RSP_DATA, sizeof(scanRspData), scanRspData);
    368          		GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(advertData), advertData);
    369          
    370          		GAPRole_SetParameter(GAPROLE_PARAM_UPDATE_ENABLE, sizeof(uint8), &enable_update_request);
    371          		GAPRole_SetParameter(GAPROLE_MIN_CONN_INTERVAL, sizeof(uint16), &desired_min_interval);
    372          		GAPRole_SetParameter(GAPROLE_MAX_CONN_INTERVAL, sizeof(uint16), &desired_max_interval);
    373          		GAPRole_SetParameter(GAPROLE_SLAVE_LATENCY, sizeof(uint16), &desired_slave_latency);
    374          		GAPRole_SetParameter(GAPROLE_TIMEOUT_MULTIPLIER, sizeof(uint16), &desired_conn_timeout);
    375          	}
    376          
    377          	//readWriteFlash();
    378          
    379          	// Set the GAP Characteristics
    380          	GGS_SetParameter(GGS_DEVICE_NAME_ATT, GAP_DEVICE_NAME_LEN, attDeviceName);
    381          
    382          	// Set advertising interval
    383          	{
    384          		uint16 advInt = DEFAULT_ADVERTISING_INTERVAL;
    385          
    386          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MIN, advInt);
    387          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MAX, advInt);
    388          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MIN, advInt);
    389          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MAX, advInt);
    390          	}
    391          
    392          	//HalLcdWriteStringValue("bb:", passs, 10, HAL_LCD_LINE_6);
    393          	// Setup the GAP Bond Manager
    394          	{
    395          		uint32 passkey = 1234; // passkey "000000"
    396          		//uint8 pairMode = GAPBOND_PAIRING_MODE_WAIT_FOR_REQ;
    397          		uint8 pairMode = GAPBOND_PAIRING_MODE_INITIATE;
    398          		uint8 mitm = TRUE;
    399          		uint8 ioCap = GAPBOND_IO_CAP_DISPLAY_ONLY;
    400          		uint8 bonding = FALSE;
    401          		GAPBondMgr_SetParameter(GAPBOND_DEFAULT_PASSCODE, sizeof(uint32), &passkey);
    402          		GAPBondMgr_SetParameter(GAPBOND_PAIRING_MODE, sizeof(uint8), &pairMode);
    403          		GAPBondMgr_SetParameter(GAPBOND_MITM_PROTECTION, sizeof(uint8), &mitm);
    404          		GAPBondMgr_SetParameter(GAPBOND_IO_CAPABILITIES, sizeof(uint8), &ioCap);
    405          		GAPBondMgr_SetParameter(GAPBOND_BONDING_ENABLED, sizeof(uint8), &bonding);
    406          	}
    407          
    408          	// Initialize GATT attributes
    409          	GGS_AddService(GATT_ALL_SERVICES); // GAP
    410          	GATTServApp_AddService(GATT_ALL_SERVICES); // GATT attributes
    411          	DevInfo_AddService(); // Device Information Service
    412          	SimpleProfile_AddService(GATT_ALL_SERVICES); // Simple GATT Profile
    413                  Batt_AddService( );     // Battery Service
    414                  
    415                  
    416                  
    417                  
    418          #if defined FEATURE_OAD
    419          			VOID OADTarget_AddService(); // OAD Profile
    420          #endif
    421          
    422          	// Setup the SimpleProfile Characteristic Values
    423          	{
    424          		uint8 charValue1 = 1;
    425          		uint8 charValue2 = 2;
    426          		uint8 charValue3 = 3;
    427          		uint8 charValue4 = 4;
    428          		uint8 charValue5[SIMPLEPROFILE_CHAR5_LEN] = { 1, 2, 3, 4, 5 };
    429          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR1, sizeof(uint8), &charValue1);
    430          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR2, sizeof(uint8), &charValue2);
    431          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR3, sizeof(uint8), &charValue3);
    432          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &charValue4);
    433          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR5, SIMPLEPROFILE_CHAR5_LEN, charValue5);
    434          	}
    435          
    436          	HalLcdWriteString("BLE slave zekezang", HAL_LCD_LINE_1);
    437          
    438          	// Register callback with SimpleGATTprofile
    439          	VOID SimpleProfile_RegisterAppCBs(&simpleBLEPeripheral_SimpleProfileCBs);
    440          
    441          	//who open who byebye
    442          	//HCI_EXT_ClkDivOnHaltCmd(HCI_EXT_ENABLE_CLK_DIVIDE_ON_HALT); no no no...
    443          
    444          	// Register for all key events - This app will handle all key events
    445          	RegisterForKeys(simpleBLEPeripheral_TaskID);
    446          
    447          #if defined ( DC_DC_P0_7 )
    448          	// Enable stack to toggle bypass control on TPS62730 (DC/DC converter)
    449          	HCI_EXT_MapPmIoPortCmd( HCI_EXT_PM_IO_PORT_P0, HCI_EXT_PM_IO_PORT_PIN7 );
    450          #endif // defined ( DC_DC_P0_7 )
    451          	// Setup a delayed profile startup
    452          	osal_set_event(simpleBLEPeripheral_TaskID, SBP_START_DEVICE_EVT);
    453                  
    454                  
    455                   // initialize the ADC for battery reads
    456                  HalAdcInit();
    457          
    458          	/***********************************test something zekezang**********************************/
    459          	HalLcdWriteString("spi start", HAL_LCD_LINE_1);
    460          	
    461                      XNV_SPI_INIT();
    462                  /*     uint8 i; 
    463                  uint8 TempValue[6];  
    464                  uint8 AvgTemp; 
    465                  initTempSensor();
    466                  
    467                  while(1) 
    468                  { 
    469                    AvgTemp = 0;          
    470                  
    471                      AvgTemp = getTemperature();  
    472                   
    473                   // æ¸©åº¦è½¬æ¢æasciiç åé
    474                    TempValue[0] = (unsigned char)(AvgTemp)/10 + 48;          //åä½
    475                    TempValue[1] = (unsigned char)(AvgTemp)%10 + 48;          //ä¸ªä½
    476          //          TempValue[2] = '.';                                       //å°æ°ç¹ 
    477          //          TempValue[3] = (unsigned char)(AvgTemp*10)%10+48;         //ååä½
    478          //          TempValue[4] = (unsigned char)(AvgTemp*100)%10+48;        //ç¾åä½
    479                    TempValue[2] = '\0';                                       //å­ç¬¦ä¸²ç»æç¬¦  
    480                    
    481                    HalLcdWriteString(TempValue, HAL_LCD_LINE_7);
    482                   
    483                    UART_HAL_DELAY(10000); 
    484                  }*/
    485                        HalLcd_HW_WriteLine(HAL_LCD_LINE_1, "      CC2541EM");
    486                        HalLcd_HW_WriteLine(HAL_LCD_LINE_3, "-->DS18B20_TEST"); 
    487                        HalLcd_HW_WriteLine(HAL_LCD_LINE_4, "Current Temp:");
    488                        
    489                        uint8 i;
    490                        uint8 buf[10];
    491                        uint8 sensor_data_value;  //ä¼ æå¨æ°æ®
    492                        while(1){
    493                             
    494                          //å¼å§è½¬æ¢
    495                          DS18B20_SendConvert();
    496                          //å»¶æ¶1S
    497                          for(i=20; i>0; i--)
    498                            delay_nus(50000);
    499                          sensor_data_value=DS18B20_GetTem();
    500                          HalLcdWriteStringValue("sensor_data_value:",  sensor_data_value, 10, HAL_LCD_LINE_5);
    501                          IntToStr(buf,sensor_data_value);
    502                          //HalLcd_HW_WriteLine(HAL_LCD_LINE_5, buf);
    503                          HalLcdWriteString(buf, HAL_LCD_LINE_6);
    504                        }
    505          
    506          
    507          
    508          
    509          
    510          	/***********************************test something zekezang**********************************/
    511          }
    512          
    513          /*********************************************************************
    514           * @fn      SimpleBLEPeripheral_ProcessEvent
    515           *
    516           * @brief   Simple BLE Peripheral Application Task event processor.  This function
    517           *          is called to process all events for the task.  Events
    518           *          include timers, messages and any other user defined events.
    519           *
    520           * @param   task_id  - The OSAL assigned task ID.
    521           * @param   events - events to process.  This is a bit map and can
    522           *                   contain more than one event.
    523           *
    524           * @return  events not processed
    525           */
    526          uint16 SimpleBLEPeripheral_ProcessEvent(uint8 task_id, uint16 events) {
    527          
    528          	VOID task_id; // OSAL required parameter that isn't used in this function
    529          
    530          	if (events & SYS_EVENT_MSG) {
    531          		uint8 *pMsg;
    532          
    533          		if ((pMsg = osal_msg_receive(simpleBLEPeripheral_TaskID)) != NULL) {
    534          			simpleBLEPeripheral_ProcessOSALMsg((osal_event_hdr_t *) pMsg);
    535          
    536          			// Release the OSAL message
    537          			VOID osal_msg_deallocate(pMsg);
    538          		}
    539          
    540          		// return unprocessed events
    541          		return (events ^ SYS_EVENT_MSG);
    542          	}
    543          
    544          	if (events & SBP_START_DEVICE_EVT) {
    545          		// Start the Device
    546          		GAPRole_StartDevice(&simpleBLEPeripheral_PeripheralCBs);
    547          
    548          		// Start Bond Manager
    549          		GAPBondMgr_Register(&simpleBLEPeripheral_BondMgrCBs);
    550          
    551          		// Set timer for first periodic event
    552          		//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, SBP_PERIODIC_EVT_PERIOD);
    553                          
    554                          // Set timer for first battery read event
    555                          osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, BATTERY_CHECK_PERIOD );
    556          
    557          		return (events ^ SBP_START_DEVICE_EVT);
    558          	}
    559          
    560          	if (events & SBP_PERIODIC_EVT) {
    561          		
    562                           // Restart timer
    563                          if ( BATTERY_CHECK_PERIOD )
    564                         {
    565                           osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, BATTERY_CHECK_PERIOD );
    566                          }
    567          
    568                          // perform battery level check
    569                          Batt_MeasLevel( );
    570          
    571          		return (events ^ SBP_PERIODIC_EVT);
    572          	}
    573          
    574          	if (events & SBP_ZEKEZANG_EVT) {
    575          		uint8 initial_advertising_enable = FALSE;
    576          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    577          		return (events ^ SBP_ZEKEZANG_EVT);
    578          	}
    579          
    580          	if (events & SBP_SEND_IRDATA_EVT) {
    581          		HalLcdWriteString("send plan complete...", HAL_LCD_LINE_4);
    582          		return (events ^ SBP_SEND_IRDATA_EVT);
    583          	}
    584          
    585          	if (events & SBP_ADV_IN_CONNECTION_EVT) {
    586          		uint8 turnOnAdv = TRUE;
    587          		// Turn on advertising while in a connection
    588          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &turnOnAdv);
    589          
    590          		return (events ^ SBP_ADV_IN_CONNECTION_EVT);
    591          	}
    592          
    593          	return 0;
    594          }
    595          
    596          /*********************************************************************
    597           * @fn      simpleBLEPeripheral_ProcessOSALMsg
    598           *
    599           * @brief   Process an incoming task message.
    600           *
    601           * @param   pMsg - message to process
    602           *
    603           * @return  none
    604           */
    605          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg) {
    606          	switch (pMsg->event) {
    607          	case KEY_CHANGE:
    608          		simpleBLEPeripheral_HandleKeys(((keyChange_t *) pMsg)->state, ((keyChange_t *) pMsg)->keys);
    609          		break;
    610          	default:
    611          		// do nothing
    612          		break;
    613          	}
    614          }
    615          
    616          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys) {
    617          	if (keys & HAL_KEY_UP) {
    618          		u_state = IR_DATA_STUDY_CMD_START_BEGIN_STATE;
    619          		SbpHalUARTWrite(&SBP_UART_STUDY_CMD, SBP_UART_STUDY_CMD_LEN);
    620          	}
    621          
    622          	if (keys & HAL_KEY_LEFT) {
    623          		HalLcdWriteString("read rtc ...", HAL_LCD_LINE_3);
    624          	}
    625          
    626          	if (keys & HAL_KEY_DOWN) {
    627          		HalLcdWriteString("send after 3s...", HAL_LCD_LINE_4);
    628          		osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT, 3000);
    629          	}
    630          
    631          	if (keys & HAL_KEY_RIGHT) {
    632          		HalLcdWriteStringValue("data_len:", data_len, 10, HAL_LCD_LINE_2);
    633          	}
    634          
    635          }
    636          
    637          /*********************************************************************
    638           * @fn      peripheralStateNotificationCB
    639           *
    640           * @brief   Notification from the profile of a state change.
    641           *
    642           * @param   newState - new state
    643           *
    644           * @return  none
    645           */
    646          static void peripheralStateNotificationCB(gaprole_States_t newState) {
    647          
    648          	//HalLcdWriteStringValue("newState", newState, 10, HAL_LCD_LINE_4);
    649          
    650          	switch (newState) {
    651          	case GAPROLE_STARTED: {
    652          		uint8 ownAddress[B_ADDR_LEN];
    653          		uint8 systemId[DEVINFO_SYSTEM_ID_LEN];
    654          
    655          		GAPRole_GetParameter(GAPROLE_BD_ADDR, ownAddress);
    656          
    657          		// use 6 bytes of device address for 8 bytes of system ID value
    658          		systemId[0] = ownAddress[0];
    659          		systemId[1] = ownAddress[1];
    660          		systemId[2] = ownAddress[2];
    661          
    662          		// set middle bytes to zero
    663          		systemId[4] = 0x00;
    664          		systemId[3] = 0x00;
    665          
    666          		// shift three bytes up
    667          		systemId[7] = ownAddress[5];
    668          		systemId[6] = ownAddress[4];
    669          		systemId[5] = ownAddress[3];
    670          
    671          		DevInfo_SetParameter(DEVINFO_SYSTEM_ID, DEVINFO_SYSTEM_ID_LEN, systemId);
    672          
    673          		// Display device address
    674          		bdAddr2Str(ownAddress);
    675          		//HalLcdWriteString(bdAddr2Str(ownAddress), HAL_LCD_LINE_3);
    676          		//HalLcdWriteString("Initialized", HAL_LCD_LINE_3);
    677          	}
    678          		break;
    679          
    680          	case GAPROLE_ADVERTISING: {
    681          		//HalLcdWriteString("Advertising", HAL_LCD_LINE_3);
    682          	}
    683          		break;
    684          
    685          	case GAPROLE_CONNECTED: {
    686          		//HalLcdWriteString("Connected", HAL_LCD_LINE_3);
    687          		//simpleProfile_StateNotify( uint16 connHandle, attHandleValueNoti_t *pNoti )
    688          		GAPRole_GetParameter(GAPROLE_CONNHANDLE, &gapConnHandle);
    689          	}
    690          		break;
    691          
    692          	case GAPROLE_WAITING: {
    693          		//HalLcdWriteString("Disconnected", HAL_LCD_LINE_3);
    694          	}
    695          		break;
    696          
    697          	case GAPROLE_WAITING_AFTER_TIMEOUT: {
    698          		//HalLcdWriteString("Timed Out", HAL_LCD_LINE_3);
    699          	}
    700          		break;
    701          
    702          	case GAPROLE_ERROR: {
    703          		//HalLcdWriteString("Error", HAL_LCD_LINE_3);
    704          	}
    705          		break;
    706          
    707          	default: {
    708          		//HalLcdWriteString("", HAL_LCD_LINE_3);
    709          	}
    710          		break;
    711          
    712          	}
    713          
    714          	gapProfileState = newState;
    715          
    716          #if !defined( CC2540_MINIDK )
    717          	VOID gapProfileState; // added to prevent compiler warning with
    718          						  // "CC2540 Slave" configurations
    719          #endif
    720          
    721          }
    722          
    723          /*********************************************************************
    724           * @fn      performPeriodicTask
    725           *
    726           * @brief   Perform a periodic application task. This function gets
    727           *          called every five seconds as a result of the SBP_PERIODIC_EVT
    728           *          OSAL event. In this example, the value of the third
    729           *          characteristic in the SimpleGATTProfile service is retrieved
    730           *          from the profile, and then copied into the value of the
    731           *          the fourth characteristic.
    732           *
    733           * @param   none
    734           *
    735           * @return  none
    736           */
    737          static void performPeriodicTask(void) {
    738          	uint8 valueToCopy;
    739          	uint8 stat;
    740          
    741          	// Call to retrieve the value of the third characteristic in the profile
    742          	stat = SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR3, &valueToCopy);
    743          
    744          	if (stat == SUCCESS) {
    745          		/*
    746          		 * Call to set that value of the fourth characteristic in the profile. Note
    747          		 * that if notifications of the fourth characteristic have been enabled by
    748          		 * a GATT client device, then a notification will be sent every time this
    749          		 * function is called.
    750          		 */
    751          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &valueToCopy);
    752          	}
    753          }
    754          
    755          /*********************************************************************
    756           * @fn      simpleProfileChangeCB
    757           * @brief   Callback from SimpleBLEProfile indicating a value change
    758           * @param   paramID - parameter ID of the value that was changed.
    759           *
    760           * @return  none
    761           */
    762          static void simpleProfileChangeCB(uint8 paramID) {
    763          	osal_memset(buf, 0, 20);
    764          	switch (paramID) {
    765          	case SIMPLEPROFILE_CHAR1:
    766          		SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR1,buf);
    767                           HalSPIWrite(0x0,buf,20);
    768                           HalLcdWriteString((uint8*)buf, HAL_LCD_LINE_6);
    769          		  //HalLcd_HW_WriteLine(HAL_LCD_LINE_4, "Write:"); 
    770          		 // HalLcd_HW_WriteLine(HAL_LCD_LINE_5, buf); 
    771          		  //æ³¨æï¼è¿ç»­è¯»åä¹é´è³å°è¦å»¶æ¶800us
    772          		  //HalHW_WaitUs(800);
    773          	          HalSPIRead(0x0,bufrx,20);
    774                             HalLcdWriteString((uint8*)bufrx, HAL_LCD_LINE_7);
    775          		  //HalLcd_HW_WriteLine(HAL_LCD_LINE_6, "Read:"); 
    776          		 // HalLcd_HW_WriteLine(HAL_LCD_LINE_7, bufrx); 
    777          
    778          		
    779          
    780          		break;
    781          	case SIMPLEPROFILE_CHAR3:
    782          		//SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR3, &newValue);
    783          		break;
    784          	default:
    785          		// should not reach here!
    786          		break;
    787          	}
    788          }
    789          
    790          /*********************************************************************
    791           * @fn      bdAddr2Str
    792           *
    793           * @brief   Convert Bluetooth address to string. Only needed when
    794           *          LCD display is used.
    795           *
    796           * @return  none
    797           */
    798          char *bdAddr2Str(uint8 *pAddr) {
    799          	uint8 i;
    800          	char hex[] = "0123456789ABCDEF";
    801          	static char str[B_ADDR_STR_LEN];
    802          	char *pStr = str;
    803          
    804          	*pStr++ = '0';
    805          	*pStr++ = 'x';
    806          
    807          	// Start from end of addr
    808          	pAddr += B_ADDR_LEN;
    809          
    810          	for (i = B_ADDR_LEN; i > 0; i--) {
    811          		*pStr++ = hex[*--pAddr >> 4];
    812          		*pStr++ = hex[*pAddr & 0x0F];
    813          	}
    814          
    815          	*pStr = 0;
    816          
    817          	return str;
    818          }
    819          /*********************************************************************
    820           *********************************************************************/
    821          //static int ascii2hex(char c) {
    822          //	int ret = -1;
    823          //	if ((c >= '0') && (c <= '9')) {
    824          //		ret = c - '0';
    825          //	} else if ((c >= 'A') && (c <= 'Z')) {
    826          //		ret = c - 'A' + 65;
    827          //	} else if ((c >= 'a') && (c <= 'z')) {
    828          //		ret = c - 'a' + 97;
    829          //	}
    830          //	return ret;
    831          //}
    832          //static void updateDeviceName(char *name, uint8 len) {
    833          //	uint8 k = 0;
    834          //	for (k = 0; k < len; k++) {
    835          //		scanRspData[k + 2] = ascii2hex(*(name + k));
    836          //	}
    837          //}

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0     50  SimpleBLEPeripheral_Init
                          0 0 49 -> Batt_AddService
                          0 0 49 -> DS18B20_GetTem
                          0 0 49 -> DS18B20_SendConvert
                          0 0 49 -> DevInfo_AddService
                          0 0 49 -> GAPBondMgr_SetParameter
                          0 0 49 -> GAPRole_SetParameter
                          0 0 49 -> GAP_SetParamValue
                          0 0 49 -> GATTServApp_AddService
                          0 0 49 -> GGS_AddService
                          0 0 49 -> GGS_SetParameter
                          0 0 49 -> HalAdcInit
                          0 0 49 -> HalLcdWriteString
                          0 0 50 -> HalLcdWriteStringValue
                          0 0 49 -> HalLcd_HW_WriteLine
                          0 0 49 -> IntToStr
                          0 0 49 -> RegisterForKeys
                          0 0 49 -> SbpHalUART_Init
                          0 0 49 -> SimpleProfile_AddService
                          0 0 49 -> SimpleProfile_RegisterAppCBs
                          0 0 49 -> SimpleProfile_SetParameter
                          0 0 49 -> delay_nus
                          0 0 49 -> osal_set_event
       0      0     17  SimpleBLEPeripheral_ProcessEvent
                          0 0 13 -> Batt_MeasLevel
                          0 0 13 -> GAPBondMgr_Register
                          0 0 13 -> GAPRole_SetParameter
                          0 0 13 -> GAPRole_StartDevice
                          0 0 13 -> HalLcdWriteString
                          0 0 14 -> HalLcdWriteStringValue
                          0 0 13 -> SbpHalUARTWrite
                          0 0 13 -> osal_msg_deallocate
                          0 0 13 -> osal_msg_receive
                          0 0 17 -> osal_start_timerEx
       2      0     49  bdAddr2Str
       1      0     23  peripheralStateNotificationCB
                          0 0 23 -> DevInfo_SetParameter
                          0 0 23 -> GAPRole_GetParameter
                          0 0 23 -> bdAddr2Str
       0      0     12  simpleBLEPeripheralPairStateCB
                          0 0 12 -> GAPRole_TerminateConnection
                          0 0 11 -> HalLcdWriteString
                          0 0 12 -> HalLcdWriteStringValue
       0      0     14  simpleProfileChangeCB
                          0 0 10 -> HalLcdWriteString
                          0 0 14 -> HalSPIRead
                          0 0 14 -> HalSPIWrite
                          0 0 10 -> SimpleProfile_GetParameter
                          0 0 10 -> osal_memset


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      15  ?<Constant "      CC2541EM">
      16  ?<Constant "-->DS18B20_TEST">
      17  ?<Constant "0123456789ABCDEF">
      19  ?<Constant "BLE slave zekezang">
      16  ?<Constant "Bonding success">
      14  ?<Constant "Current Temp:">
      13  ?<Constant "Pairing fail">
      16  ?<Constant "Pairing fail--a">
      16  ?<Constant "Pairing started">
      16  ?<Constant "Pairing success">
      10  ?<Constant "data_len:">
      13  ?<Constant "read rtc ...">
      17  ?<Constant "send after 3s...">
      22  ?<Constant "send plan complete...">
      19  ?<Constant "sensor_data_value:">
      10  ?<Constant "spi start">
       5  ?<Constant {1, 2, 3, 4, 5}>
       7  ?<Initializer for advertData>
      22  ?<Initializer for attDeviceName>
      30  ?<Initializer for scanRspData>
       4  ?<Initializer for simpleBLEPeripheral_BondMgrC
       4  ?<Initializer for simpleBLEPeripheral_Peripher
       2  ?<Initializer for simpleBLEPeripheral_SimplePr
       6  ??SimpleBLEPeripheral_Init?relay
       6  ??SimpleBLEPeripheral_ProcessEvent?relay
       6  ??bdAddr2Str?relay
       6  ??peripheralStateNotificationCB?relay
       6  ??simpleBLEPeripheralPairStateCB?relay
       6  ??simpleProfileChangeCB?relay
       8  ?Subroutine0
      28  ?Subroutine1
       1  P1DIR
       1  P1SEL
       1  P2SEL
       1  PERCFG
     798  SimpleBLEPeripheral_Init
     362  SimpleBLEPeripheral_ProcessEvent
       1  U1BAUD
       1  U1GCR
       1  _A_P1
       1  _A_U1CSR
       4  __Constant_0
       4  __Constant_1388
       4  __Constant_bb8
       4  __Constant_ffffffff
       7  advertData
      22  attDeviceName
     102  bdAddr2Str
      20  buf
      20  bufrx
       1  data_len
       2  gapConnHandle
       1  gapProfileState
     202  peripheralStateNotificationCB
      30  scanRspData
     115  simpleBLEPeripheralPairStateCB
       4  simpleBLEPeripheral_BondMgrCBs
       4  simpleBLEPeripheral_PeripheralCBs
       2  simpleBLEPeripheral_SimpleProfileCBs
       1  simpleBLEPeripheral_TaskID
     127  simpleProfileChangeCB
      15  str

 
 1 742 bytes in segment BANKED_CODE
    36 bytes in segment BANK_RELAYS
     8 bytes in segment SFR_AN
    69 bytes in segment XDATA_I
    69 bytes in segment XDATA_ID
   270 bytes in segment XDATA_ROM_C
    60 bytes in segment XDATA_Z
 
 1 847 bytes of CODE  memory
   254 bytes of CONST memory (+ 16 bytes shared)
     0 bytes of DATA  memory (+  8 bytes shared)
   129 bytes of XDATA memory

Errors: none
Warnings: 12
