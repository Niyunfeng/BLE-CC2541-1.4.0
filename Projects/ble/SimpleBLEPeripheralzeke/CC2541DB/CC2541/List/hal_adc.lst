###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             07/Mar/2014  14:41:26 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\target\CC2540EB\hal_adc.c                        #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\config\b #
#                          uildComponents.cfg (-DBROADCASTER_CFG=0x01         #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheralzeke\CC2541DB\buildCo #
#                          nfig.cfg (-DHOST_CONFIG=PERIPHERAL_CFG             #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\target\CC2540EB\hal_adc.c -D INT_HEAP_LEN=3074   #
#                          -D HALNODEBUG -D OSAL_CBTIMER_NUM_TASKS=1 -D       #
#                          xHAL_AES_DMA=TRUE -D HAL_DMA=TRUE -D POWER_SAVING  #
#                          -D xPLUS_BROADCASTER -D HAL_LCD=TRUE -D            #
#                          HAL_LED=TRUE -D HAL_UART=TRUE -D HAL_ADC=TRUE      #
#                          -lcN E:\TexasInstruments\BLE-CC254x-1.4.0\Projects #
#                          \ble\SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\ #
#                           -o E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ #
#                          ble\SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\   #
#                          -e --debug --core=plain --dptr=16,1                #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\common\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\include\ #
#                           -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ #
#                          ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\C #
#                          omponents\hal\include\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\hal\target\CC2541EB\ -I                      #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\osal\include\ -I E:\TexasInstruments\BLE-CC2 #
#                          54x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2 #
#                          541DB\..\..\..\..\Components\services\saddr\ -I    #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\include\ -I E:\TexasInstruments\BLE-CC25 #
#                          4x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC25 #
#                          41DB\..\..\..\..\Components\ble\controller\phy\    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Co #
#                          mponents\ble\controller\include\ -I                #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\..\..\Components\ble\host\ -I               #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\common\cc25 #
#                          40\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\comm #
#                          on\npi\npi_np\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\Profiles\Roles\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Si #
#                          mpleProfile\ -I E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB\. #
#                          .\..\Profiles\DevInfo\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Ba #
#                          tt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\Prof #
#                          iles\HIDDev\ -Ohz                                  #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\hal_a #
#                          dc.lst                                             #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\hal_ad #
#                          c.r51                                              #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Components\hal\target\CC2540EB\hal_adc.c
      1          /**************************************************************************************************
      2            Filename:       hal_adc.c
      3            Revised:        $Date: 2013-10-24 11:31:53 -0700 (Thu, 24 Oct 2013) $
      4            Revision:       $Revision: 35788 $
      5          
      6            Description:    This file contains the interface to the HAL ADC.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /**************************************************************************************************
     41           *                                           INCLUDES
     42           **************************************************************************************************/
     43          
     44          #include  "hal_adc.h"
     45          #include  "hal_defs.h"
     46          #include  "hal_mcu.h"
     47          #include  "hal_types.h"
     48          
     49          /**************************************************************************************************
     50           *                                            CONSTANTS
     51           **************************************************************************************************/
     52          #define HAL_ADC_EOC         0x80    /* End of Conversion bit */
     53          #define HAL_ADC_START       0x40    /* Starts Conversion */
     54          
     55          #define HAL_ADC_STSEL_EXT   0x00    /* External Trigger */
     56          #define HAL_ADC_STSEL_FULL  0x10    /* Full Speed, No Trigger */
     57          #define HAL_ADC_STSEL_T1C0  0x20    /* Timer1, Channel 0 Compare Event Trigger */
     58          #define HAL_ADC_STSEL_ST    0x30    /* ADCCON1.ST =1 Trigger */
     59          
     60          #define HAL_ADC_RAND_NORM   0x00    /* Normal Operation */
     61          #define HAL_ADC_RAND_LFSR   0x04    /* Clock LFSR */
     62          #define HAL_ADC_RAND_SEED   0x08    /* Seed Modulator */
     63          #define HAL_ADC_RAND_STOP   0x0c    /* Stop Random Generator */
     64          #define HAL_ADC_RAND_BITS   0x0c    /* Bits [3:2] */
     65          
     66          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     67          #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
     68          #define HAL_ADC_DEC_256     0x20    /* Decimate by 256 : 12-bit resolution */
     69          #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
     70          #define HAL_ADC_DEC_BITS    0x30    /* Bits [5:4] */
     71          
     72          #define HAL_ADC_STSEL       HAL_ADC_STSEL_ST
     73          #define HAL_ADC_RAND_GEN    HAL_ADC_RAND_STOP
     74          #define HAL_ADC_REF_VOLT    HAL_ADC_REF_AVDD
     75          #define HAL_ADC_DEC_RATE    HAL_ADC_DEC_064
     76          #define HAL_ADC_SCHN        HAL_ADC_CHN_VDD3
     77          #define HAL_ADC_ECHN        HAL_ADC_CHN_GND
     78          
     79          /* ------------------------------------------------------------------------------------------------
     80           *                                       Local Variables
     81           * ------------------------------------------------------------------------------------------------
     82           */
     83          
     84          #if (HAL_ADC == TRUE)
     85          static uint8 adcRef;
     86          #endif
     87          
     88          /**************************************************************************************************
     89           * @fn      HalAdcInit
     90           *
     91           * @brief   Initialize ADC Service
     92           *
     93           * @param   None
     94           *
     95           * @return  None
     96           **************************************************************************************************/
     97          void HalAdcInit (void)
     98          {
     99          #if (HAL_ADC == TRUE)
    100            adcRef = HAL_ADC_REF_VOLT;
    101          #endif
    102          }
    103          
    104          /**************************************************************************************************
    105           * @fn      HalAdcRead
    106           *
    107           * @brief   Read the ADC based on given channel and resolution
    108           *
    109           * @param   channel - channel where ADC will be read
    110           * @param   resolution - the resolution of the value
    111           *
    112           * @return  16 bit value of the ADC in offset binary format.
    113           *
    114           *          Note that the ADC is "bipolar", which means the GND (0V) level is mid-scale.
    115           *          Note2: This function assumes that ADCCON3 contains the voltage reference.
    116           **************************************************************************************************/
    117          uint16 HalAdcRead (uint8 channel, uint8 resolution)
    118          {
    119            int16  reading = 0;
    120          
    121          #if (HAL_ADC == TRUE)
    122            uint8   i, resbits;
    123            uint8  adcChannel = 1;
    124          
    125            /*
    126             * If Analog input channel is AIN0..AIN7, make sure corresponing P0 I/O pin is enabled.  The code
    127             * does NOT disable the pin at the end of this function.  I think it is better to leave the pin
    128             * enabled because the results will be more accurate.  Because of the inherent capacitance on the
    129             * pin, it takes time for the voltage on the pin to charge up to its steady-state level.  If
    130             * HalAdcRead() has to turn on the pin for every conversion, the results may show a lower voltage
    131             * than actuality because the pin did not have time to fully charge.
    132             */
    133            if (channel <= HAL_ADC_CHANNEL_7)
    134            {
    135              for (i=0; i < channel; i++)
    136              {
    137                adcChannel <<= 1;
    138              }
    139          
    140              /* Enable channel */
    141              ADCCFG |= adcChannel;
    142            }
    143          
    144            /* Convert resolution to decimation rate */
    145            switch (resolution)
    146            {
    147              case HAL_ADC_RESOLUTION_8:
    148                resbits = HAL_ADC_DEC_064;
    149                break;
    150              case HAL_ADC_RESOLUTION_10:
    151                resbits = HAL_ADC_DEC_128;
    152                break;
    153              case HAL_ADC_RESOLUTION_12:
    154                resbits = HAL_ADC_DEC_256;
    155                break;
    156              case HAL_ADC_RESOLUTION_14:
    157              default:
    158                resbits = HAL_ADC_DEC_512;
    159                break;
    160            }
    161          
    162            /* writing to this register starts the extra conversion */
    163            ADCCON3 = channel | resbits | adcRef;
    164          
    165            /* Wait for the conversion to be done */
    166            while (!(ADCCON1 & HAL_ADC_EOC));
    167          
    168            /* Disable channel after done conversion */
    169            if (channel <= HAL_ADC_CHANNEL_7)
    170              ADCCFG &= (adcChannel ^ 0xFF);
    171          
    172            /* Read the result */
    173            reading = (int16) (ADCL);
    174            reading |= (int16) (ADCH << 8);
    175          
    176            /* Treat small negative as 0 */
    177            if (reading < 0)
    178              reading = 0;
    179          
    180            switch (resolution)
    181            {
    182              case HAL_ADC_RESOLUTION_8:
    183                reading >>= 8;
    184                break;
    185              case HAL_ADC_RESOLUTION_10:
    186                reading >>= 6;
    187                break;
    188              case HAL_ADC_RESOLUTION_12:
    189                reading >>= 4;
    190                break;
    191              case HAL_ADC_RESOLUTION_14:
    192              default:
    193                reading >>= 2;
    194              break;
    195            }
    196          #else
    197            // unused arguments
    198            (void) channel;
    199            (void) resolution;
    200          #endif
    201          
    202            return ((uint16)reading);
    203          }
    204          
    205          /**************************************************************************************************
    206           * @fn      HalAdcSetReference
    207           *
    208           * @brief   Sets the reference voltage for the ADC and initializes the service
    209           *
    210           * @param   reference - the reference voltage to be used by the ADC
    211           *
    212           * @return  none
    213           *
    214           **************************************************************************************************/
    215          void HalAdcSetReference ( uint8 reference )
    216          {
    217          #if (HAL_ADC == TRUE)
    218            adcRef = reference;
    219          #endif
    220          }
    221          
    222          /*********************************************************************
    223           * @fn      HalAdcCheckVdd
    224           *
    225           * @brief   Check for minimum Vdd specified.
    226           *
    227           * @param   vdd - The board-specific Vdd reading to check for.
    228           *
    229           * @return  TRUE if the Vdd measured is greater than the 'vdd' minimum parameter;
    230           *          FALSE if not.
    231           *
    232           *********************************************************************/
    233          bool HalAdcCheckVdd(uint8 vdd)
    234          {
    235            ADCCON3 = 0x0F;
    236            while (!(ADCCON1 & 0x80));
    237            return (ADCH > vdd);
    238          }
    239          
    240          /**************************************************************************************************
    241          **************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      0  HalAdcCheckVdd
       2      0      0  HalAdcInit
       0      0     10  HalAdcRead
       2      0      0  HalAdcSetReference


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??HalAdcCheckVdd?relay
       6  ??HalAdcInit?relay
       6  ??HalAdcRead?relay
       6  ??HalAdcSetReference?relay
       8  ?Subroutine0
       1  ADCCFG
       1  ADCCON1
       1  ADCCON3
       1  ADCH
       1  ADCL
      26  HalAdcCheckVdd
       9  HalAdcInit
     165  HalAdcRead
      11  HalAdcSetReference
       1  adcRef

 
 219 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   5 bytes in segment SFR_AN
   1 byte  in segment XDATA_Z
 
 243 bytes of CODE  memory
   0 bytes of DATA  memory (+ 5 bytes shared)
   1 byte  of XDATA memory

Errors: none
Warnings: 1
