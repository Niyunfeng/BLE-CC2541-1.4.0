###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             28/Feb/2014  16:48:34 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\target\CC2541EB\hal_key.c                        #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\config\b #
#                          uildComponents.cfg (-DBROADCASTER_CFG=0x01         #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheralzeke\CC2541DB\buildCo #
#                          nfig.cfg (-DHOST_CONFIG=PERIPHERAL_CFG             #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\target\CC2541EB\hal_key.c -D INT_HEAP_LEN=3074   #
#                          -D HALNODEBUG -D OSAL_CBTIMER_NUM_TASKS=1 -D       #
#                          HAL_AES_DMA=TRUE -D HAL_DMA=TRUE -D POWER_SAVING   #
#                          -D xPLUS_BROADCASTER -D HAL_LCD=TRUE -D            #
#                          HAL_LED=TRUE -D HAL_UART=TRUE -lcN                 #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\ -o   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\ -e    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\common\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\include\ #
#                           -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ #
#                          ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\C #
#                          omponents\hal\include\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\hal\target\CC2541EB\ -I                      #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\osal\include\ -I E:\TexasInstruments\BLE-CC2 #
#                          54x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2 #
#                          541DB\..\..\..\..\Components\services\saddr\ -I    #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\include\ -I E:\TexasInstruments\BLE-CC25 #
#                          4x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC25 #
#                          41DB\..\..\..\..\Components\ble\controller\phy\    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Co #
#                          mponents\ble\controller\include\ -I                #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\..\..\Components\ble\host\ -I               #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\common\cc25 #
#                          40\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\comm #
#                          on\npi\npi_np\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\Profiles\Roles\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Si #
#                          mpleProfile\ -I E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB\. #
#                          .\..\Profiles\DevInfo\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Ba #
#                          tt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\Prof #
#                          iles\HIDDev\ -Ohz                                  #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\hal_k #
#                          ey.lst                                             #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\hal_ke #
#                          y.r51                                              #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Components\hal\target\CC2541EB\hal_key.c
      1          /**************************************************************************************************
      2            Filename:       hal_key.c
      3            Revised:        $Date: 2013-09-20 11:53:10 -0700 (Fri, 20 Sep 2013) $
      4            Revision:       $Revision: 35401 $
      5          
      6            Description:    This file contains the interface to the HAL KEY Service.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          /*********************************************************************
     40           NOTE: If polling is used, the hal_driver task schedules the KeyRead()
     41                 to occur every 100ms.  This should be long enough to naturally
     42                 debounce the keys.  The KeyRead() function remembers the key
     43                 state of the previous poll and will only return a non-zero
     44                 value if the key state changes.
     45          
     46           NOTE: If interrupts are used, the KeyRead() function is scheduled
     47                 25ms after the interrupt occurs by the ISR.  This delay is used
     48                 for key debouncing.  The ISR disables any further Key interrupt
     49                 until KeyRead() is executed.  KeyRead() will re-enable Key
     50                 interrupts after executing.  Unlike polling, when interrupts
     51                 are enabled, the previous key state is not remembered.  This
     52                 means that KeyRead() will return the current state of the keys
     53                 (not a change in state of the keys).
     54          
     55           NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
     56                 the ISR.  Therefore, the joystick movements will only be detected
     57                 during a pushbutton interrupt caused by S1 or the center joystick
     58                 pushbutton.
     59          
     60           NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
     61                 high state to a low state.  This transition is typically clean.  The
     62                 duration of the low state is around 200ms.  When the signal returns
     63                 to the high state, there is a high likelihood of signal bounce, which
     64                 causes a unwanted interrupts.  Normally, we would set the interrupt
     65                 edge to falling edge to generate an interrupt when S1 is pushed, but
     66                 because of the signal bounce, it is better to set the edge to rising
     67                 edge to generate an interrupt when S1 is released.  The debounce logic
     68                 can then filter out the signal bounce.  The result is that we typically
     69                 get only 1 interrupt per button push.  This mechanism is not totally
     70                 foolproof because occasionally, signal bound occurs during the falling
     71                 edge as well.  A similar mechanism is used to handle the joystick
     72                 pushbutton on the DB.  For the EB, we do not have independent control
     73                 of the interrupt edge for the S1 and center joystick pushbutton.  As
     74                 a result, only one or the other pushbuttons work reasonably well with
     75                 interrupts.  The default is the make the S1 switch on the EB work more
     76                 reliably.
     77          
     78          *********************************************************************/
     79          
     80          /**************************************************************************************************
     81           *                                            INCLUDES
     82           **************************************************************************************************/
     83          #include "hal_mcu.h"
     84          #include "hal_defs.h"
     85          #include "hal_types.h"
     86          #include "hal_drivers.h"
     87          #include "hal_adc.h"
     88          #include "hal_key.h"
     89          #include "osal.h"
     90          
     91          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
     92          
     93          /**************************************************************************************************
     94           *                                            CONSTANTS
     95           **************************************************************************************************/
     96          #define HAL_KEY_RISING_EDGE   0
     97          #define HAL_KEY_FALLING_EDGE  1
     98          
     99          #define HAL_KEY_DEBOUNCE_VALUE  25
    100          
    101          /* CPU port interrupt */
    102          #define HAL_KEY_CPU_PORT_0_IF P0IF
    103          #define HAL_KEY_CPU_PORT_2_IF P2IF
    104          
    105          #if defined ( CC2540_MINIDK )
    106          /* SW_1 is at P0.0 */
    107          #define HAL_KEY_SW_1_PORT   P0
    108          #define HAL_KEY_SW_1_BIT    BV(0)
    109          #define HAL_KEY_SW_1_SEL    P0SEL
    110          #define HAL_KEY_SW_1_DIR    P0DIR
    111          
    112          /* SW_2 is at P0.1 */
    113          #define HAL_KEY_SW_2_PORT   P0
    114          #define HAL_KEY_SW_2_BIT    BV(1)
    115          #define HAL_KEY_SW_2_SEL    P0SEL
    116          #define HAL_KEY_SW_2_DIR    P0DIR
    117          
    118          #define HAL_KEY_SW_1_IEN      IEN1  /* CPU interrupt mask register */
    119          #define HAL_KEY_SW_1_ICTL     P0IEN /* Port Interrupt Control register */
    120          #define HAL_KEY_SW_1_ICTLBIT  BV(0) /* P0IEN - P0.0 enable/disable bit */
    121          #define HAL_KEY_SW_1_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    122          
    123          #define HAL_KEY_SW_1_PXIFG    P0IFG /* Interrupt flag at source */
    124          #define HAL_KEY_SW_2_IEN      IEN1  /* CPU interrupt mask register */
    125          #define HAL_KEY_SW_2_ICTL     P0IEN /* Port Interrupt Control register */
    126          #define HAL_KEY_SW_2_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
    127          #define HAL_KEY_SW_2_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    128          #define HAL_KEY_SW_2_PXIFG    P0IFG /* Interrupt flag at source */
    129          
    130          #define HAL_KEY_SW_1_EDGEBIT  BV(0)
    131          
    132          #else
    133          
    134          /* SW_6 is at P0.1 */
    135          #define HAL_KEY_SW_6_PORT   P0
    136          #define HAL_KEY_SW_6_BIT    BV(1)
    137          #define HAL_KEY_SW_6_SEL    P0SEL
    138          #define HAL_KEY_SW_6_DIR    P0DIR
    139          
    140          /* edge interrupt */
    141          #define HAL_KEY_SW_6_EDGEBIT  BV(0)
    142          #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
    143          
    144          /* SW_6 interrupts */
    145          #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
    146          #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    147          #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
    148          #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
    149          #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
    150          
    151          /* Joy stick move at P2.0 */
    152          #define HAL_KEY_JOY_MOVE_PORT   P2
    153          #define HAL_KEY_JOY_MOVE_BIT    BV(0)
    154          #define HAL_KEY_JOY_MOVE_SEL    P2SEL
    155          #define HAL_KEY_JOY_MOVE_DIR    P2DIR
    156          
    157          /* edge interrupt */
    158          #define HAL_KEY_JOY_MOVE_EDGEBIT  BV(3)
    159          #define HAL_KEY_JOY_MOVE_EDGE     HAL_KEY_FALLING_EDGE
    160          
    161          /* Joy move interrupts */
    162          #define HAL_KEY_JOY_MOVE_IEN      IEN2  /* CPU interrupt mask register */
    163          #define HAL_KEY_JOY_MOVE_IENBIT   BV(1) /* Mask bit for all of Port_2 */
    164          #define HAL_KEY_JOY_MOVE_ICTL     P2IEN /* Port Interrupt Control register */
    165          #define HAL_KEY_JOY_MOVE_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
    166          #define HAL_KEY_JOY_MOVE_PXIFG    P2IFG /* Interrupt flag at source */
    167          
    168          #define HAL_KEY_JOY_CHN   HAL_ADC_CHANNEL_6
    169          
    170          #endif
    171          
    172          /**************************************************************************************************
    173           *                                            TYPEDEFS
    174           **************************************************************************************************/
    175          
    176          
    177          /**************************************************************************************************
    178           *                                        GLOBAL VARIABLES
    179           **************************************************************************************************/
    180          static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
    181          static halKeyCBack_t pHalKeyProcessFunction;
    182          static uint8 HalKeyConfigured;
    183          bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
    184          
    185          /**************************************************************************************************
    186           *                                        FUNCTIONS - Local
    187           **************************************************************************************************/
    188          void halProcessKeyInterrupt(void);
    189          uint8 halGetJoyKeyInput(void);
    190          
    191          
    192          
    193          /**************************************************************************************************
    194           *                                        FUNCTIONS - API
    195           **************************************************************************************************/
    196          
    197          
    198          /**************************************************************************************************
    199           * @fn      HalKeyInit
    200           *
    201           * @brief   Initilize Key Service
    202           *
    203           * @param   none
    204           *
    205           * @return  None
    206           **************************************************************************************************/
    207          void HalKeyInit( void )
    208          {
    209            halKeySavedKeys = 0;  // Initialize previous key to 0.
    210          
    211          #if defined ( CC2540_MINIDK )
    212            HAL_KEY_SW_1_SEL &= ~(HAL_KEY_SW_1_BIT);    /* Set pin function to GPIO */
    213            HAL_KEY_SW_1_DIR &= ~(HAL_KEY_SW_1_BIT);    /* Set pin direction to Input */
    214            HAL_KEY_SW_2_SEL &= ~(HAL_KEY_SW_2_BIT);    /* Set pin function to GPIO */
    215            HAL_KEY_SW_2_DIR &= ~(HAL_KEY_SW_2_BIT);    /* Set pin direction to Input */
    216          #else
    217            HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
    218            HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
    219            HAL_KEY_JOY_MOVE_SEL &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin function to GPIO */
    220            HAL_KEY_JOY_MOVE_DIR &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin direction to Input */
    221          
    222            P2INP |= PUSH2_BV;  /* Configure GPIO tri-state. */
    223          #endif
    224          
    225            /* Initialize callback function */
    226            pHalKeyProcessFunction  = NULL;
    227          
    228            /* Start with key is not configured */
    229            HalKeyConfigured = FALSE;
    230          
    231          #if defined ( CC2540_MINIDK )
    232            /* Rising/Falling edge configuratinn */
    233            PICTL |= HAL_KEY_SW_1_EDGEBIT;   /* Set the edge bit to set falling edge to give int */
    234            HAL_KEY_SW_1_IEN |= ( HAL_KEY_SW_1_IENBIT | HAL_KEY_SW_2_IENBIT );   /* enable CPU interrupt */
    235          #endif
    236          }
    237          
    238          
    239          /**************************************************************************************************
    240           * @fn      HalKeyConfig
    241           *
    242           * @brief   Configure the Key serivce
    243           *
    244           * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
    245           *          cback - pointer to the CallBack function
    246           *
    247           * @return  None
    248           **************************************************************************************************/
    249          void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
    250          {
    251            /* Enable/Disable Interrupt or */
    252            Hal_KeyIntEnable = interruptEnable;
    253          
    254            /* Register the callback fucntion */
    255            pHalKeyProcessFunction = cback;
    256          
    257            /* Determine if interrupt is enable or not */
    258            if (Hal_KeyIntEnable)
    259            {
    260          #if defined ( CC2540_MINIDK )
    261              HAL_KEY_SW_1_ICTL |= HAL_KEY_SW_1_ICTLBIT; /* enable interrupt generation at port */    
    262              HAL_KEY_SW_1_PXIFG = ~(HAL_KEY_SW_1_BIT);  /* Clear any pending interrupt */
    263              HAL_KEY_SW_2_ICTL |= HAL_KEY_SW_2_ICTLBIT; /* enable interrupt generation at port */
    264              HAL_KEY_SW_2_PXIFG = ~(HAL_KEY_SW_2_BIT);  /* Clear any pending interrupt */
    265          
    266          #else
    267              /* Rising/Falling edge configuratinn */
    268              PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
    269              /* For falling edge, the bit must be set. */
    270            #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
    271              PICTL |= HAL_KEY_SW_6_EDGEBIT;
    272            #endif
    273          
    274          
    275              /* Interrupt configuration:
    276               * - Enable interrupt generation at the port
    277               * - Enable CPU interrupt
    278               * - Clear any pending interrupt
    279               */
    280              HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
    281              HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
    282              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
    283          
    284              /* Rising/Falling edge configuratinn */
    285              HAL_KEY_JOY_MOVE_ICTL &= ~(HAL_KEY_JOY_MOVE_EDGEBIT);    /* Clear the edge bit */
    286              /* For falling edge, the bit must be set. */
    287            #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_FALLING_EDGE)
    288              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_EDGEBIT;
    289            #endif
    290          
    291          
    292              /* Interrupt configuration:
    293               * - Enable interrupt generation at the port
    294               * - Enable CPU interrupt
    295               * - Clear any pending interrupt
    296               */
    297              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_ICTLBIT;
    298              HAL_KEY_JOY_MOVE_IEN |= HAL_KEY_JOY_MOVE_IENBIT;
    299              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT);
    300          #endif // !CC2540_MINIDK
    301          
    302              /* Do this only after the hal_key is configured - to work with sleep stuff */
    303              if (HalKeyConfigured == TRUE)
    304              {
    305                osal_stop_timerEx(Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
    306              }
    307            }
    308            else    /* Interrupts NOT enabled */
    309            {
    310          #if defined ( CC2540_MINIDK )
    311              HAL_KEY_SW_1_ICTL &= ~(HAL_KEY_SW_1_ICTLBIT); /* don't generate interrupt */
    312              HAL_KEY_SW_2_ICTL &= ~(HAL_KEY_SW_2_ICTLBIT); /* don't generate interrupt */
    313          #else
    314              HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt */
    315              HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
    316          #endif  // !CC2540_MINIDK
    317          
    318              osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
    319            }
    320          
    321            /* Key now is configured */
    322            HalKeyConfigured = TRUE;
    323          }
    324          
    325          
    326          /**************************************************************************************************
    327           * @fn      HalKeyRead
    328           *
    329           * @brief   Read the current value of a key
    330           *
    331           * @param   None
    332           *
    333           * @return  keys - current keys status
    334           **************************************************************************************************/
    335          uint8 HalKeyRead ( void )
    336          {
    337            uint8 keys = 0;
    338          
    339          #if defined (CC2540_MINIDK)
    340            if (!(HAL_KEY_SW_1_PORT & HAL_KEY_SW_1_BIT))    /* Key is active low */
    341            {
    342              keys |= HAL_KEY_SW_1;
    343            }
    344            if (!(HAL_KEY_SW_2_PORT & HAL_KEY_SW_2_BIT))    /* Key is active low */
    345            {
    346              keys |= HAL_KEY_SW_2;
    347            }
    348          #else
    349          #ifdef HAL_BOARD_CC2530EB_REV17
    350            if ( (HAL_KEY_SW_6_PORT & HAL_KEY_SW_6_BIT))    /* Key is active high */
    351          #elif defined (HAL_BOARD_CC2530EB_REV13)
    352            if (!(HAL_KEY_SW_6_PORT & HAL_KEY_SW_6_BIT))    /* Key is active low */
    353          #endif
    354            {
    355              keys |= HAL_KEY_SW_6;
    356            }
    357          
    358            if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active low */
    359            {
    360              keys |= halGetJoyKeyInput();
    361            }
    362          #endif
    363            return keys;
    364          }
    365          
    366          
    367          /**************************************************************************************************
    368           * @fn      HalKeyPoll
    369           *
    370           * @brief   Called by hal_driver to poll the keys
    371           *
    372           * @param   None
    373           *
    374           * @return  None
    375           **************************************************************************************************/
    376          void HalKeyPoll (void)
    377          {
    378            uint8 keys = 0;
    379            uint8 notify = 0;
    380          #if defined (CC2540_MINIDK)
    381            if (!(HAL_KEY_SW_1_PORT & HAL_KEY_SW_1_BIT))    /* Key is active low */
    382            {
    383              keys |= HAL_KEY_SW_1;
    384            }
    385            if (!(HAL_KEY_SW_2_PORT & HAL_KEY_SW_2_BIT))    /* Key is active low */
    386            {
    387              keys |= HAL_KEY_SW_2;
    388            }
    389          #else
    390            if (!(HAL_KEY_SW_6_PORT & HAL_KEY_SW_6_BIT))    /* Key is active low */
    391            {
    392              keys |= HAL_KEY_SW_6;
    393            }
    394          
    395            if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active HIGH */
    396            {
    397              keys = halGetJoyKeyInput();
    398            }
    399          #endif
    400          
    401            /* If interrupts are not enabled, previous key status and current key status
    402             * are compared to find out if a key has changed status.
    403             */
    404            if (!Hal_KeyIntEnable)
    405            {
    406              if (keys == halKeySavedKeys)
    407              {
    408                /* Exit - since no keys have changed */
    409                return;
    410              }
    411              else
    412              {
    413                notify = 1;
    414              }
    415            }
    416            else
    417            {
    418              /* Key interrupt handled here */
    419              if (keys)
    420              {
    421                notify = 1;
    422              }
    423            }
    424          
    425            /* Store the current keys for comparation next time */
    426            halKeySavedKeys = keys;
    427          
    428            /* Invoke Callback if new keys were depressed */
    429            if (notify && (pHalKeyProcessFunction))
    430            {
    431              (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
    432          
    433            }
    434          }
    435          
    436          #if !defined ( CC2540_MINIDK )
    437          /**************************************************************************************************
    438           * @fn      halGetJoyKeyInput
    439           *
    440           * @brief   Map the ADC value to its corresponding key.
    441           *
    442           * @param   None
    443           *
    444           * @return  keys - current joy key status
    445           **************************************************************************************************/
    446          uint8 halGetJoyKeyInput(void)
    447          {
    448            /* The joystick control is encoded as an analog voltage.
    449             * Read the JOY_LEVEL analog value and map it to joy movement.
    450             */
    451            uint8 adc;
    452            uint8 ksave0 = 0;
    453            uint8 ksave1;
    454          
    455            /* Keep on reading the ADC until two consecutive key decisions are the same. */
    456            do
    457            {
    458              ksave1 = ksave0;    /* save previouse key reading */
    459          
    460              adc = HalAdcRead (HAL_KEY_JOY_CHN, HAL_ADC_RESOLUTION_8);
    461          
    462              if ((adc >= 2) && (adc <= 38))
    463              {
    464                 ksave0 |= HAL_KEY_UP;
    465              }
    466              else if ((adc >= 74) && (adc <= 88))
    467              {
    468                ksave0 |= HAL_KEY_RIGHT;
    469              }
    470              else if ((adc >= 60) && (adc <= 73))
    471              {
    472                ksave0 |= HAL_KEY_LEFT;
    473              }
    474              else if ((adc >= 39) && (adc <= 59))
    475              {
    476                ksave0 |= HAL_KEY_DOWN;
    477              }
    478              else if ((adc >= 89) && (adc <= 100))
    479              {
    480                ksave0 |= HAL_KEY_CENTER;
    481              }
    482            } while (ksave0 != ksave1);
    483          
    484            return ksave0;
    485          }
    486          #endif
    487          
    488          /**************************************************************************************************
    489           * @fn      halProcessKeyInterrupt
    490           *
    491           * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
    492           *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
    493           *
    494           * @param
    495           *
    496           * @return
    497           **************************************************************************************************/
    498          void halProcessKeyInterrupt (void)
    499          {
    500            bool valid=FALSE;
    501          
    502          #if defined ( CC2540_MINIDK )
    503            if( HAL_KEY_SW_1_PXIFG & HAL_KEY_SW_1_BIT) /* Interrupt Flag has been set by SW1 */
    504            {
    505              HAL_KEY_SW_1_PXIFG = ~(HAL_KEY_SW_1_BIT); /* Clear Interrupt Flag */
    506              valid = TRUE;
    507            }
    508          
    509            if (HAL_KEY_SW_2_PXIFG & HAL_KEY_SW_2_BIT)  /* Interrupt Flag has been set by SW2 */
    510            {
    511              HAL_KEY_SW_2_PXIFG = ~(HAL_KEY_SW_2_BIT); /* Clear Interrupt Flag */
    512              valid = TRUE;
    513            }
    514          #else
    515            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
    516            {
    517              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
    518              valid = TRUE;
    519            }
    520          
    521            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)  /* Interrupt Flag has been set */
    522            {
    523              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT); /* Clear Interrupt Flag */
    524              valid = TRUE;
    525            }
    526          #endif
    527            if (valid)
    528            {
    529              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
    530            }
    531          }
    532          
    533          /**************************************************************************************************
    534           * @fn      HalKeyEnterSleep
    535           *
    536           * @brief  - Get called to enter sleep mode
    537           *
    538           * @param
    539           *
    540           * @return
    541           **************************************************************************************************/
    542          void HalKeyEnterSleep ( void )
    543          {
    544          }
    545          
    546          /**************************************************************************************************
    547           * @fn      HalKeyExitSleep
    548           *
    549           * @brief   - Get called when sleep is over
    550           *
    551           * @param
    552           *
    553           * @return  - return saved keys
    554           **************************************************************************************************/
    555          uint8 HalKeyExitSleep ( void )
    556          {
    557            /* Wake up and read keys */
    558            return ( HalKeyRead () );
    559          }
    560          
    561          /***************************************************************************************************
    562           *                                    INTERRUPT SERVICE ROUTINE
    563           ***************************************************************************************************/
    564          
    565          /**************************************************************************************************
    566           * @fn      halKeyPort0Isr
    567           *
    568           * @brief   Port0 ISR
    569           *
    570           * @param
    571           *
    572           * @return
    573           **************************************************************************************************/
    574          HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
    575          {
    576            HAL_ENTER_ISR();
    577          
    578          #if defined ( CC2540_MINIDK )
    579            if ((HAL_KEY_SW_1_PXIFG & HAL_KEY_SW_1_BIT) || (HAL_KEY_SW_2_PXIFG & HAL_KEY_SW_2_BIT))
    580          #else
    581            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
    582          #endif
    583            {
    584              halProcessKeyInterrupt();
    585            }
    586          
    587            /*
    588              Clear the CPU interrupt flag for Port_0
    589              PxIFG has to be cleared before PxIF
    590            */
    591          #if defined ( CC2540_MINIDK )
    592            HAL_KEY_SW_1_PXIFG = 0;
    593            HAL_KEY_SW_2_PXIFG = 0;
    594          #else
    595            HAL_KEY_SW_6_PXIFG = 0;
    596          #endif
    597            HAL_KEY_CPU_PORT_0_IF = 0;
    598          
    599            CLEAR_SLEEP_MODE();
    600          
    601            HAL_EXIT_ISR();
    602          
    603            return;
    604          }
    605          
    606          #if !defined ( CC2540_MINIDK )
    607          /**************************************************************************************************
    608           * @fn      halKeyPort2Isr
    609           *
    610           * @brief   Port2 ISR
    611           *
    612           * @param
    613           *
    614           * @return
    615           **************************************************************************************************/
    616          HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
    617          {
    618            HAL_ENTER_ISR();
    619          
    620            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
    621            {
    622              halProcessKeyInterrupt();
    623            }
    624          
    625            /*
    626              Clear the CPU interrupt flag for Port_2
    627              PxIFG has to be cleared before PxIF
    628              Notes: P2_1 and P2_2 are debug lines.
    629            */
    630            HAL_KEY_JOY_MOVE_PXIFG = 0;
    631            HAL_KEY_CPU_PORT_2_IF = 0;
    632          
    633            CLEAR_SLEEP_MODE();
    634          
    635            HAL_EXIT_ISR();
    636          
    637            return;
    638          }
    639          #endif
    640          #else
    641          
    642          void HalKeyInit(void){}
    643          void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
    644          uint8 HalKeyRead(void){ return 0;}
    645          void HalKeyPoll(void){}
    646          
    647          #endif
    648          /**************************************************************************************************
    649          **************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      9  HalKeyConfig
                          0 0  9 -> osal_set_event
                          0 0  9 -> osal_stop_timerEx
       0      0      0  HalKeyEnterSleep
       2      0      0  HalKeyExitSleep
                          2 0  0 -> HalKeyRead
       2      0      0  HalKeyInit
       0      0      9  HalKeyPoll
                          0 0  9 -> halGetJoyKeyInput
       0      0      9  HalKeyRead
                          0 0  9 -> halGetJoyKeyInput
       0      0     18  halGetJoyKeyInput
                          0 0  9 -> HalAdcRead
       0      0     14  halKeyPort0Isr
                          0 0 14 -> halProcessKeyInterrupt
       0      0     14  halKeyPort2Isr
                          0 0 14 -> halProcessKeyInterrupt
       2      0     18  halProcessKeyInterrupt
                          2 0  4 -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??HalKeyConfig?relay
       6  ??HalKeyEnterSleep?relay
       6  ??HalKeyExitSleep?relay
       6  ??HalKeyInit?relay
       6  ??HalKeyPoll?relay
       6  ??HalKeyRead?relay
       6  ??halGetJoyKeyInput?relay
       3  ??halKeyPort0Isr??INTVEC 107
       3  ??halKeyPort2Isr??INTVEC 51
       6  ??halProcessKeyInterrupt?relay
       7  ?Subroutine0
       5  ?Subroutine1
      13  ?Subroutine2
     102  HalKeyConfig
       1  HalKeyConfigured
       3  HalKeyEnterSleep
      10  HalKeyExitSleep
      34  HalKeyInit
      81  HalKeyPoll
      27  HalKeyRead
       1  Hal_KeyIntEnable
       1  IEN2
       1  P0DIR
       1  P0IEN
       1  P0IFG
       1  P0SEL
       1  P2DIR
       1  P2IEN
       1  P2IFG
       1  P2INP
       1  P2SEL
       1  PICTL
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON
       1  _A_IRCON2
       1  _A_P0
       1  _A_P2
       4  __Constant_19
      91  halGetJoyKeyInput
      28  halKeyPort0Isr
      30  halKeyPort2Isr
       1  halKeySavedKeys
      58  halProcessKeyInterrupt
       2  pHalKeyProcessFunction

 
 418 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   6 bytes in segment INTVEC
  71 bytes in segment NEAR_CODE
  17 bytes in segment SFR_AN
   4 bytes in segment XDATA_ROM_C
   5 bytes in segment XDATA_Z
 
 537 bytes of CODE  memory (+  6 bytes shared)
   0 bytes of CONST memory (+  4 bytes shared)
   0 bytes of DATA  memory (+ 17 bytes shared)
   5 bytes of XDATA memory

Errors: none
Warnings: 1
