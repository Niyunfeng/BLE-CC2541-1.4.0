###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             18/Mar/2014  16:52:23 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          Profiles\SimpleProfile\simpleGATTprofile.c         #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\config\build #
#                          Components.cfg (-DBROADCASTER_CFG=0x01             #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\buildConfig #
#                          .cfg (-DHOST_CONFIG=PERIPHERAL_CFG                 #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          Profiles\SimpleProfile\simpleGATTprofile.c -D      #
#                          INT_HEAP_LEN=3074 -D HALNODEBUG -D                 #
#                          OSAL_CBTIMER_NUM_TASKS=1 -D xHAL_AES_DMA=TRUE -D   #
#                          HAL_DMA=TRUE -D POWER_SAVING -D xPLUS_BROADCASTER  #
#                          -D HAL_LCD=TRUE -D HAL_LED=TRUE -D HAL_UART=TRUE   #
#                          -D HAL_ADC=TRUE -lcN E:\TexasInstruments\BLE-CC254 #
#                          x-1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\ #
#                          CC2541\List\ -o E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheral\CC2541DB\CC254 #
#                          1\Obj\ -e --debug --core=plain --dptr=16,1         #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\ -I   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\include\ -I     #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\hal\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\hal\target\CC2541EB\ -I        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\osal\include\ -I E:\TexasInstruments\BLE-CC254x- #
#                          1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\.. #
#                          \..\..\..\Components\services\saddr\ -I            #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\ble\controller\phy\ -I         #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\controller\include\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\. #
#                          .\..\Components\ble\host\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\common\cc2540\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\npi\n #
#                          pi_np\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profi #
#                          les\Roles\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\P #
#                          rofiles\SimpleProfile\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\Profiles\DevInf #
#                          o\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Project #
#                          s\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profiles\ #
#                          Batt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Proj #
#                          ects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profil #
#                          es\HIDDev\ -Ohz                                    #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\simpleGAT #
#                          Tprofile.lst                                       #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\simpleGATT #
#                          profile.r51                                        #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\Profiles\SimpleProfile\simpleGATTprofile.c
      1          /**************************************************************************************************
      2           Filename:       simpleGATTprofile.c
      3           Revised:        $Date: 2010-08-06 08:56:11 -0700 (Fri, 06 Aug 2010) $
      4           Revision:       $Revision: 23333 $
      5          
      6           Description:    This file contains the Simple GATT profile sample GATT service
      7           profile for use with the BLE sample application.
      8          
      9           Copyright 2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11           IMPORTANT: Your use of this Software is limited to those specific rights
     12           granted under the terms of a software license agreement between the user
     13           who downloaded the software, his/her employer (which must be your employer)
     14           and Texas Instruments Incorporated (the "License").  You may not use this
     15           Software unless you agree to abide by the terms of the License. The License
     16           limits your use, and you acknowledge, that the Software may not be modified,
     17           copied or distributed unless embedded on a Texas Instruments microcontroller
     18           or used solely and exclusively in conjunction with a Texas Instruments radio
     19           frequency transceiver, which is integrated into your product.  Other than for
     20           the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21           works of, modify, distribute, perform, display or sell this Software and/or
     22           its documentation for any purpose.
     23          
     24           YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25           PROVIDED �AS IS� WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26           INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27           NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28           TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29           NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30           LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31           INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32           OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33           OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34           (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36           Should you have any questions regarding your right to use this Software,
     37           contact Texas Instruments Incorporated at www.TI.com.
     38           **************************************************************************************************/
     39          /*********************************************************************
     40           * INCLUDES
     41           */
     42          #include "bcomdef.h"
     43          #include "OSAL.h"
     44          #include "linkdb.h"
     45          #include "att.h"
     46          #include "gatt.h"
     47          #include "gatt_uuid.h"
     48          #include "gattservapp.h"
     49          #include "gapbondmgr.h"
     50          #include "simpleGATTprofile.h"
     51          /*********************************************************************
     52           * MACROS
     53           */
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          #define SERVAPP_NUM_ATTR_SUPPORTED        24
     58          /*********************************************************************
     59           * TYPEDEFS
     60           */
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          // Simple GATT Profile Service UUID: 0xFFF0
     65          CONST uint8 simpleProfileServUUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_SERV_UUID), HI_UINT16(SIMPLEPROFILE_SERV_UUID) };
     66          // Characteristic 1 UUID: 0xFFF1
     67          CONST uint8 simpleProfilechar1UUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_CHAR1_UUID), HI_UINT16(SIMPLEPROFILE_CHAR1_UUID) };
     68          // Characteristic 2 UUID: 0xFFF2
     69          CONST uint8 simpleProfilechar2UUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_CHAR2_UUID), HI_UINT16(SIMPLEPROFILE_CHAR2_UUID) };
     70          // Characteristic 3 UUID: 0xFFF3
     71          CONST uint8 simpleProfilechar3UUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_CHAR3_UUID), HI_UINT16(SIMPLEPROFILE_CHAR3_UUID) };
     72          // Characteristic 4 UUID: 0xFFF4
     73          CONST uint8 simpleProfilechar4UUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_CHAR4_UUID), HI_UINT16(SIMPLEPROFILE_CHAR4_UUID) };
     74          // Characteristic 5 UUID: 0xFFF5
     75          CONST uint8 simpleProfilechar5UUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_CHAR5_UUID), HI_UINT16(SIMPLEPROFILE_CHAR5_UUID) };
     76          // Characteristic 6 UUID: 0xFFF6
     77          CONST uint8 simpleProfilechar6UUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_CHAR6_UUID), HI_UINT16(SIMPLEPROFILE_CHAR6_UUID) };
     78          // Characteristic 7 UUID: 0xFFF7
     79          CONST uint8 simpleProfilechar7UUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_CHAR7_UUID), HI_UINT16(SIMPLEPROFILE_CHAR7_UUID) };
     80          
     81          /*********************************************************************
     82           * EXTERNAL VARIABLES
     83           */
     84          
     85          /*********************************************************************
     86           * EXTERNAL FUNCTIONS
     87           */
     88          
     89          /*********************************************************************
     90           * LOCAL VARIABLES
     91           */
     92          
     93          static simpleProfileCBs_t *simpleProfile_AppCBs = NULL;
     94          
     95          /*********************************************************************
     96           * Profile Attributes - variables
     97           */
     98          
     99          // Simple Profile Service attribute
    100          static CONST gattAttrType_t simpleProfileService = { ATT_BT_UUID_SIZE, simpleProfileServUUID };
    101          
    102          
    103          // Simple Profile Characteristic 1 Properties
    104          static uint8 simpleProfileChar1Props = GATT_PROP_READ | GATT_PROP_WRITE;
    105          
    106          // Characteristic 1 Value
    107          static uint8 simpleProfileChar1[SIMPLEPROFILE_CHAR1_LEN] = { 0 };
    108          
    109          // Simple Profile Characteristic 1 User Description
    110          static uint8 simpleProfileChar1UserDesp[17] = "Characteristic 1\0";
    111          
    112          
    113          // Simple Profile Characteristic 2 Properties
    114          static uint8 simpleProfileChar2Props = GATT_PROP_READ | GATT_PROP_WRITE;
    115          
    116          // Characteristic 2 Value
    117          static uint8 simpleProfileChar2[SIMPLEPROFILE_CHAR2_LEN] = { 0 };
    118          
    119          // Simple Profile Characteristic 2 User Description
    120          static uint8 simpleProfileChar2UserDesp[17] = "Characteristic 2\0";
    121          
    122          
    123          // Simple Profile Characteristic 3 Properties
    124          static uint8 simpleProfileChar3Props = GATT_PROP_READ| GATT_PROP_WRITE;
    125          
    126          // Characteristic 3 Value
    127          //static uint8 simpleProfileChar3 = 0;
    128          static uint8 simpleProfileChar3[SIMPLEPROFILE_CHAR3_LEN] = { 0 };
    129          
    130          // Simple Profile Characteristic 3 User Description
    131          static uint8 simpleProfileChar3UserDesp[17] = "Characteristic 3\0";
    132          
    133          
    134          // Simple Profile Characteristic 4 Properties
    135          static uint8 simpleProfileChar4Props = GATT_PROP_NOTIFY;
    136          
    137          // Characteristic 4 Value
    138          static uint8 simpleProfileChar4 = 0;
    139          
    140          // Simple Profile Characteristic 4 Configuration Each client has its own
    141          // instantiation of the Client Characteristic Configuration. Reads of the
    142          // Client Characteristic Configuration only shows the configuration for
    143          // that client and writes only affect the configuration of that client.
    144          static gattCharCfg_t simpleProfileChar4Config[GATT_MAX_NUM_CONN];
    145          
    146          // Simple Profile Characteristic 4 User Description
    147          static uint8 simpleProfileChar4UserDesp[17] = "Characteristic 4\0";
    148          
    149          // Simple Profile Characteristic 5 Properties
    150          static uint8 simpleProfileChar5Props =  GATT_PROP_READ | GATT_PROP_WRITE;
    151          
    152          // Characteristic 5 Value
    153          static uint8 simpleProfileChar5[SIMPLEPROFILE_CHAR5_LEN] = { 0, 0, 0, 0, 0 };
    154          
    155          // Simple Profile Characteristic 5 User Description
    156          static uint8 simpleProfileChar5UserDesp[17] = "Characteristic 5\0";
    157          
    158          
    159          // Simple Profile Characteristic 6 Properties
    160          static uint8 simpleProfileChar6Props = GATT_PROP_READ | GATT_PROP_WRITE;
    161          
    162          // Characteristic 6 Value
    163          static uint8 simpleProfileChar6[SIMPLEPROFILE_CHAR6_LEN] = { 0 };
    164          
    165          // Simple Profile Characteristic 6 User Description
    166          static uint8 simpleProfileChar6UserDesp[17] = "Characteristic 6\0";
    167          
    168          
    169          // Simple Profile Characteristic 7 Properties
    170          static uint8 simpleProfileChar7Props = GATT_PROP_READ | GATT_PROP_WRITE;
    171          
    172          // Characteristic 7 Value
    173          static uint8 simpleProfileChar7[SIMPLEPROFILE_CHAR7_LEN] = { 0 };
    174          
    175          // Simple Profile Characteristic 7 User Description
    176          static uint8 simpleProfileChar7UserDesp[17] = "Characteristic 7\0";
    177          
    178          
    179          
    180          /*********************************************************************
    181           * Profile Attributes - Table
    182           */
    183          
    184          static gattAttribute_t simpleProfileAttrTbl[SERVAPP_NUM_ATTR_SUPPORTED] = {
    185          // Simple Profile Service
    186          		{ { ATT_BT_UUID_SIZE, primaryServiceUUID }, /* type */
    187          		GATT_PERMIT_READ, /* permissions */
    188          		0, /* handle */
    189          		(uint8 *) &simpleProfileService /* pValue */
    190          		},
    191          
    192          		// Characteristic 1 Declaration
    193          		{ { ATT_BT_UUID_SIZE, characterUUID }, GATT_PERMIT_READ, 0, &simpleProfileChar1Props },
    194          
    195          		// Characteristic Value 1
    196          		{ { ATT_BT_UUID_SIZE, simpleProfilechar1UUID }, GATT_PERMIT_READ | GATT_PERMIT_WRITE, 0, simpleProfileChar1 },
    197          
    198          		// Characteristic 1 User Description
    199          		{ { ATT_BT_UUID_SIZE, charUserDescUUID }, GATT_PERMIT_READ, 0, simpleProfileChar1UserDesp },
    200          
    201          		
    202                          
    203                         // Characteristic 2 Declaration
    204                        { { ATT_BT_UUID_SIZE, characterUUID },GATT_PERMIT_READ,  0,&simpleProfileChar2Props  },
    205          
    206                            // Characteristic Value 2
    207                        { { ATT_BT_UUID_SIZE, simpleProfilechar2UUID },GATT_PERMIT_READ | GATT_PERMIT_WRITE,  0, simpleProfileChar2  },
    208           
    209                        // Characteristic 2 User Description
    210                        { { ATT_BT_UUID_SIZE, charUserDescUUID },GATT_PERMIT_READ, 0, simpleProfileChar2UserDesp },      
    211          
    212          
    213          		// Characteristic 3 Declaration
    214          		{ { ATT_BT_UUID_SIZE, characterUUID }, GATT_PERMIT_READ, 0, &simpleProfileChar3Props },
    215          
    216          		// Characteristic Value 3
    217          		{ { ATT_BT_UUID_SIZE, simpleProfilechar3UUID },GATT_PERMIT_READ | GATT_PERMIT_WRITE, 0, simpleProfileChar3 },
    218          
    219          		// Characteristic 3 User Description
    220          		{ { ATT_BT_UUID_SIZE, charUserDescUUID }, GATT_PERMIT_READ, 0, simpleProfileChar3UserDesp },
    221          
    222          
    223          		// Characteristic 4 Declaration
    224          		{ { ATT_BT_UUID_SIZE, characterUUID }, GATT_PERMIT_READ, 0, &simpleProfileChar4Props },
    225          
    226          		// Characteristic Value 4
    227          		{ { ATT_BT_UUID_SIZE, simpleProfilechar4UUID }, 0, 0, &simpleProfileChar4 },
    228          
    229          		// Characteristic 4 configuration
    230          		{ { ATT_BT_UUID_SIZE, clientCharCfgUUID }, GATT_PERMIT_READ | GATT_PERMIT_WRITE, 0, (uint8 *) simpleProfileChar4Config },
    231          
    232          		// Characteristic 4 User Description
    233          		{ { ATT_BT_UUID_SIZE, charUserDescUUID }, GATT_PERMIT_READ, 0, simpleProfileChar4UserDesp },
    234                          
    235          
    236          		// Characteristic 5 Declaration
    237          		{ { ATT_BT_UUID_SIZE, characterUUID }, GATT_PERMIT_READ, 0, &simpleProfileChar5Props },
    238          
    239          		// Characteristic Value 5
    240          		{ { ATT_BT_UUID_SIZE, simpleProfilechar5UUID },  GATT_PERMIT_READ | GATT_PERMIT_WRITE, 0, simpleProfileChar5 },
    241          
    242          		// Characteristic 5 User Description
    243          		{ { ATT_BT_UUID_SIZE, charUserDescUUID }, GATT_PERMIT_READ, 0, simpleProfileChar5UserDesp },
    244                          
    245                          
    246                          // Characteristic 6 Declaration
    247          		{ { ATT_BT_UUID_SIZE, characterUUID }, GATT_PERMIT_READ, 0, &simpleProfileChar6Props },
    248          
    249          		// Characteristic Value 6
    250          		{ { ATT_BT_UUID_SIZE, simpleProfilechar6UUID }, GATT_PERMIT_READ | GATT_PERMIT_WRITE, 0, simpleProfileChar6 },
    251          
    252          		// Characteristic 6 User Description
    253          		{ { ATT_BT_UUID_SIZE, charUserDescUUID }, GATT_PERMIT_READ, 0, simpleProfileChar6UserDesp },
    254                          
    255                          
    256                          // Characteristic 7 Declaration
    257          		{ { ATT_BT_UUID_SIZE, characterUUID }, GATT_PERMIT_READ, 0, &simpleProfileChar7Props },
    258          
    259          		// Characteristic Value 7
    260          		{ { ATT_BT_UUID_SIZE, simpleProfilechar7UUID }, GATT_PERMIT_READ | GATT_PERMIT_WRITE, 0, simpleProfileChar7 },
    261          
    262          		// Characteristic 7 User Description
    263          		{ { ATT_BT_UUID_SIZE, charUserDescUUID }, GATT_PERMIT_READ, 0, simpleProfileChar7UserDesp },
    264          
    265          };
    266          
    267          /*********************************************************************
    268           * LOCAL FUNCTIONS
    269           */
    270          static uint8 simpleProfile_ReadAttrCB(uint16 connHandle, gattAttribute_t *pAttr, uint8 *pValue, uint8 *pLen, uint16 offset, uint8 maxLen);
    271          static bStatus_t simpleProfile_WriteAttrCB(uint16 connHandle, gattAttribute_t *pAttr, uint8 *pValue, uint8 len, uint16 offset);
    272          
    273          static void simpleProfile_HandleConnStatusCB(uint16 connHandle, uint8 changeType);
    274          /*********************************************************************
    275           * PROFILE CALLBACKS
    276           */
    277          // Simple Profile Service Callbacks
    278          CONST gattServiceCBs_t simpleProfileCBs = { simpleProfile_ReadAttrCB, // Read callback function pointer
    279          		simpleProfile_WriteAttrCB, // Write callback function pointer
    280          		NULL // Authorization callback function pointer
    281          		};
    282          
    283          /*********************************************************************
    284           * PUBLIC FUNCTIONS
    285           */
    286          
    287          /*********************************************************************
    288           * @fn      SimpleProfile_AddService
    289           *
    290           * @brief   Initializes the Simple Profile service by registering
    291           *          GATT attributes with the GATT server.
    292           *
    293           * @param   services - services to add. This is a bit map and can
    294           *                     contain more than one service.
    295           *
    296           * @return  Success or Failure
    297           */
    298          bStatus_t SimpleProfile_AddService(uint32 services) {
    299          	uint8 status = SUCCESS;
    300          
    301          	// Initialize Client Characteristic Configuration attributes
    302          	GATTServApp_InitCharCfg(INVALID_CONNHANDLE, simpleProfileChar4Config);
    303          
    304          	// Register with Link DB to receive link status change callback
    305          	VOID linkDB_Register(simpleProfile_HandleConnStatusCB);
    306          
    307          	if (services & SIMPLEPROFILE_SERVICE) {
    308          		// Register GATT attribute list and CBs with GATT Server App
    309          		status = GATTServApp_RegisterService(simpleProfileAttrTbl, GATT_NUM_ATTRS( simpleProfileAttrTbl ), &simpleProfileCBs);
    310          	}
    311          
    312          	return (status);
    313          }
    314          
    315          /*********************************************************************
    316           * @fn      SimpleProfile_RegisterAppCBs
    317           *
    318           * @brief   Registers the application callback function. Only call 
    319           *          this function once.
    320           *
    321           * @param   callbacks - pointer to application callbacks.
    322           *
    323           * @return  SUCCESS or bleAlreadyInRequestedMode
    324           */
    325          bStatus_t SimpleProfile_RegisterAppCBs(simpleProfileCBs_t *appCallbacks) {
    326          	if (appCallbacks) {
    327          		simpleProfile_AppCBs = appCallbacks;
    328          
    329          		return (SUCCESS);
    330          	} else {
    331          		return (bleAlreadyInRequestedMode);
    332          	}
    333          }
    334          
    335          /*********************************************************************
    336           * @fn      SimpleProfile_SetParameter
    337           *
    338           * @brief   Set a Simple Profile parameter.
    339           *
    340           * @param   param - Profile parameter ID
    341           * @param   len - length of data to right
    342           * @param   value - pointer to data to write.  This is dependent on
    343           *          the parameter ID and WILL be cast to the appropriate 
    344           *          data type (example: data type of uint16 will be cast to 
    345           *          uint16 pointer).
    346           *
    347           * @return  bStatus_t
    348           */
    349          bStatus_t SimpleProfile_SetParameter(uint8 param, uint8 len, void *value) {
    350          	bStatus_t ret = SUCCESS;
    351          	switch (param) {
    352          	case SIMPLEPROFILE_CHAR1:
    353          		if (len == SIMPLEPROFILE_CHAR1_LEN) {
    354          			VOID osal_memcpy(simpleProfileChar1, value, SIMPLEPROFILE_CHAR1_LEN);
    355          		}
    356          
    357          		else {
    358          			ret = bleInvalidRange;
    359          		}
    360          		break;
    361          
    362          	case SIMPLEPROFILE_CHAR2:
    363          		if (len ==SIMPLEPROFILE_CHAR2_LEN) {
    364          			VOID osal_memcpy(simpleProfileChar2, value, SIMPLEPROFILE_CHAR2_LEN);
    365          		} else {
    366          			ret = bleInvalidRange;
    367          		}
    368          		break;
    369          
    370          	case SIMPLEPROFILE_CHAR3:
    371          		if (len == SIMPLEPROFILE_CHAR3_LEN) {
    372          			VOID osal_memcpy(simpleProfileChar3, value, SIMPLEPROFILE_CHAR3_LEN);
    373          		} else {
    374          			ret = bleInvalidRange;
    375          		}
    376          		break;
    377          
    378          	case SIMPLEPROFILE_CHAR4:
    379          		if (len == sizeof(uint8)) {
    380          			simpleProfileChar4 = *((uint8*) value);
    381          
    382          			// See if Notification has been enabled
    383          			GATTServApp_ProcessCharCfg(simpleProfileChar4Config, &simpleProfileChar4, FALSE, simpleProfileAttrTbl,
    384          					GATT_NUM_ATTRS( simpleProfileAttrTbl ), INVALID_TASK_ID);
    385          		} else {
    386          			ret = bleInvalidRange;
    387          		}
    388          		break;
    389          
    390          	case SIMPLEPROFILE_CHAR5:
    391          		if (len == SIMPLEPROFILE_CHAR5_LEN) {
    392          			VOID osal_memcpy(simpleProfileChar5, value, SIMPLEPROFILE_CHAR5_LEN);
    393          		} else {
    394          			ret = bleInvalidRange;
    395          		}
    396          		break;
    397                  case SIMPLEPROFILE_CHAR6:
    398                    
    399          		if (len == SIMPLEPROFILE_CHAR6_LEN) {
    400          			VOID osal_memcpy(simpleProfileChar6, value, SIMPLEPROFILE_CHAR6_LEN);
    401          		}
    402          
    403          		else {
    404          			ret = bleInvalidRange;
    405          		}
    406          		break;
    407                  case SIMPLEPROFILE_CHAR7:
    408                    
    409          		if (len == SIMPLEPROFILE_CHAR7_LEN) {
    410          			VOID osal_memcpy(simpleProfileChar7, value, SIMPLEPROFILE_CHAR7_LEN);
    411          		}
    412          
    413          		else {
    414          			ret = bleInvalidRange;
    415          		}
    416          		break;        
    417                          
    418          
    419          	default:
    420          		ret = INVALIDPARAMETER;
    421          		break;
    422          	}
    423          
    424          	return (ret);
    425          }
    426          
    427          /*********************************************************************
    428           * @fn      SimpleProfile_GetParameter
    429           *
    430           * @brief   Get a Simple Profile parameter.
    431           *
    432           * @param   param - Profile parameter ID
    433           * @param   value - pointer to data to put.  This is dependent on
    434           *          the parameter ID and WILL be cast to the appropriate 
    435           *          data type (example: data type of uint16 will be cast to 
    436           *          uint16 pointer).
    437           *
    438           * @return  bStatus_t
    439           */
    440          bStatus_t SimpleProfile_GetParameter(uint8 param, void *value) {
    441          	bStatus_t ret = SUCCESS;
    442          	switch (param) {
    443          	case SIMPLEPROFILE_CHAR1:
    444          		VOID osal_memcpy(value, simpleProfileChar1, SIMPLEPROFILE_CHAR1_LEN);
    445          		break;
    446          
    447          	case SIMPLEPROFILE_CHAR2:
    448          		VOID osal_memcpy(value, simpleProfileChar2, SIMPLEPROFILE_CHAR2_LEN);
    449          		break;
    450          
    451          	case SIMPLEPROFILE_CHAR3:
    452          		VOID osal_memcpy(value, simpleProfileChar3, SIMPLEPROFILE_CHAR3_LEN);
    453          		break;
    454          
    455          	case SIMPLEPROFILE_CHAR4:
    456          		*((uint8*) value) = simpleProfileChar4;
    457          		break;
    458          
    459          	case SIMPLEPROFILE_CHAR5:
    460          		VOID osal_memcpy(value, simpleProfileChar5, SIMPLEPROFILE_CHAR5_LEN);
    461          		break;
    462                  case SIMPLEPROFILE_CHAR6:
    463          		VOID osal_memcpy(value, simpleProfileChar6, SIMPLEPROFILE_CHAR6_LEN);
    464          		break;
    465                  case SIMPLEPROFILE_CHAR7:
    466          		VOID osal_memcpy(value, simpleProfileChar7, SIMPLEPROFILE_CHAR7_LEN);
    467          		break;
    468          
    469          	default:
    470          		ret = INVALIDPARAMETER;
    471          		break;
    472          	}
    473          
    474          	return (ret);
    475          }
    476          
    477          
    478          /*********************************************************************
    479           * @fn          simpleProfile_StateNotify
    480           *
    481           * @brief       Send a notification containing a rate
    482           *              measurement.
    483           *
    484           * @param       connHandle - connection handle
    485           * @param       pNoti - pointer to notification structure
    486           *
    487           * @return      Success or Failure
    488           */
    489          bStatus_t simpleProfile_StateNotify( uint16 connHandle, attHandleValueNoti_t *pNoti )
    490          {
    491            uint16 value = GATTServApp_ReadCharCfg( connHandle, simpleProfileChar4Config );
    492          
    493            // If notifications enabled
    494            if ( value & GATT_CLIENT_CFG_NOTIFY )
    495            {
    496              // Set the handle
    497              pNoti->handle = simpleProfileAttrTbl[12].handle;
    498          
    499              // Send the notification
    500              return GATT_Notification( connHandle, pNoti, FALSE );
    501            }
    502          
    503            return bleIncorrectMode;
    504          }
    505          
    506          /*********************************************************************
    507           * @fn          simpleProfile_ReadAttrCB
    508           *
    509           * @brief       Read an attribute.
    510           *
    511           * @param       connHandle - connection message was received on
    512           * @param       pAttr - pointer to attribute
    513           * @param       pValue - pointer to data to be read
    514           * @param       pLen - length of data to be read
    515           * @param       offset - offset of the first octet to be read
    516           * @param       maxLen - maximum length of data to be read
    517           *
    518           * @return      Success or Failure
    519           */
    520          static uint8 simpleProfile_ReadAttrCB(uint16 connHandle, gattAttribute_t *pAttr, uint8 *pValue, uint8 *pLen, uint16 offset, uint8 maxLen) {
    521          	bStatus_t status = SUCCESS;
    522          
    523          	// If attribute permissions require authorization to read, return error
    524          	if (gattPermitAuthorRead( pAttr->permissions )) {
    525          		// Insufficient authorization
    526          		return (ATT_ERR_INSUFFICIENT_AUTHOR);
    527          	}
    528          
    529          	// Make sure it's not a blob operation (no attributes in the profile are long)
    530          	if (offset > 0) {
    531          		return (ATT_ERR_ATTR_NOT_LONG);
    532          	}
    533          
    534          	if (pAttr->type.len == ATT_BT_UUID_SIZE) {
    535          		// 16-bit UUID
    536          		uint16 uuid = BUILD_UINT16( pAttr->type.uuid[0], pAttr->type.uuid[1]);
    537          		switch (uuid) {
    538          		// No need for "GATT_SERVICE_UUID" or "GATT_CLIENT_CHAR_CFG_UUID" cases;
    539          		// gattserverapp handles those reads
    540          
    541          		// characteristics 1 and 2 have read permissions
    542          		// characteritisc 3 does not have read permissions; therefore it is not
    543          		//   included here
    544          		// characteristic 4 does not have read permissions, but because it
    545          		//   can be sent as a notification, it is included here
    546          		case SIMPLEPROFILE_CHAR1_UUID:
    547                                *pLen = SIMPLEPROFILE_CHAR1_LEN;
    548                                VOID osal_memcpy(pValue, pAttr->pValue, SIMPLEPROFILE_CHAR1_LEN);
    549                                break;
    550          		case SIMPLEPROFILE_CHAR2_UUID:
    551                                *pLen = SIMPLEPROFILE_CHAR2_LEN;
    552                                VOID osal_memcpy(pValue, pAttr->pValue, SIMPLEPROFILE_CHAR2_LEN);
    553                                break;
    554                          case SIMPLEPROFILE_CHAR3_UUID: 
    555                                *pLen = SIMPLEPROFILE_CHAR3_LEN;
    556                                VOID osal_memcpy(pValue, pAttr->pValue, SIMPLEPROFILE_CHAR3_LEN);
    557                                break;
    558          		case SIMPLEPROFILE_CHAR4_UUID:
    559                                *pLen = 1;
    560                                pValue[0] = *pAttr->pValue;
    561                                break;
    562                          
    563          
    564          		case SIMPLEPROFILE_CHAR5_UUID:
    565                                *pLen = SIMPLEPROFILE_CHAR5_LEN;
    566                                VOID osal_memcpy(pValue, pAttr->pValue, SIMPLEPROFILE_CHAR5_LEN);
    567                                break;
    568                          case SIMPLEPROFILE_CHAR6_UUID:
    569                                *pLen = SIMPLEPROFILE_CHAR6_LEN;
    570                                VOID osal_memcpy(pValue, pAttr->pValue, SIMPLEPROFILE_CHAR6_LEN);
    571                                break;
    572                          case SIMPLEPROFILE_CHAR7_UUID:
    573                                *pLen = SIMPLEPROFILE_CHAR7_LEN;
    574                                VOID osal_memcpy(pValue, pAttr->pValue, SIMPLEPROFILE_CHAR7_LEN);
    575                                break;
    576          
    577          		default:
    578          			// Should never get here! (characteristics 3 and 4 do not have read permissions)
    579                                  *pLen = 0;
    580                                  status = ATT_ERR_ATTR_NOT_FOUND;
    581                                  break;
    582          		}
    583          	} else {
    584          		// 128-bit UUID
    585          		*pLen = 0;
    586          		status = ATT_ERR_INVALID_HANDLE;
    587          	}
    588          
    589          	return (status);
    590          }
    591          
    592          /*********************************************************************
    593           * @fn      simpleProfile_WriteAttrCB
    594           *
    595           * @brief   Validate attribute data prior to a write operation
    596           *
    597           * @param   connHandle - connection message was received on
    598           * @param   pAttr - pointer to attribute
    599           * @param   pValue - pointer to data to be written
    600           * @param   len - length of data
    601           * @param   offset - offset of the first octet to be written
    602           * @param   complete - whether this is the last packet
    603           * @param   oper - whether to validate and/or write attribute value  
    604           *
    605           * @return  Success or Failure
    606           */
    607          static bStatus_t simpleProfile_WriteAttrCB(uint16 connHandle, gattAttribute_t *pAttr, uint8 *pValue, uint8 len, uint16 offset) {
    608          	bStatus_t status = SUCCESS;
    609          	uint8 notifyApp = 0xFF;
    610          
    611          	// If attribute permissions require authorization to write, return error
    612          	if (gattPermitAuthorWrite( pAttr->permissions )) {
    613          		// Insufficient authorization
    614          		return (ATT_ERR_INSUFFICIENT_AUTHOR);
    615          	}
    616          
    617          	if (pAttr->type.len == ATT_BT_UUID_SIZE) {
    618          		// 16-bit UUID
    619          		uint16 uuid = BUILD_UINT16( pAttr->type.uuid[0], pAttr->type.uuid[1]);
    620          		switch (uuid) {
    621          		case SIMPLEPROFILE_CHAR1_UUID:
    622                            
    623                              //Validate the value
    624                              // Make sure it's not a blob oper
    625                              if (offset == 0) 
    626                              {
    627                                if (len > SIMPLEPROFILE_CHAR1_LEN) 
    628                                {
    629                                  status = ATT_ERR_INVALID_VALUE_SIZE;
    630                                }
    631                              } 
    632                              else 
    633                              {
    634                                status = ATT_ERR_ATTR_NOT_LONG;
    635                              }
    636                              
    637                              //Write the value
    638                              if (status == SUCCESS) 
    639                              {
    640                                uint8 *pCurValue = (uint8 *) pAttr->pValue;
    641                                osal_memset(pCurValue, 0, SIMPLEPROFILE_CHAR1_LEN);
    642                                VOID osal_memcpy(pCurValue, pValue, len);
    643                                
    644                                if (pAttr->pValue == simpleProfileChar1) 
    645                                {
    646                                  notifyApp = SIMPLEPROFILE_CHAR1;
    647                                } 
    648                                
    649                              }
    650             
    651                              break;
    652                          case SIMPLEPROFILE_CHAR2_UUID:
    653                              if ( offset == 0 )
    654                              {
    655                                if (len > SIMPLEPROFILE_CHAR2_LEN) 
    656                                {
    657                                  status = ATT_ERR_INVALID_VALUE_SIZE;
    658                                }
    659                              } 
    660                              else 
    661                              {
    662                                status = ATT_ERR_ATTR_NOT_LONG;
    663                              }
    664                              //Write the value
    665                              if ( status == SUCCESS )
    666                              {
    667                                uint8 *pCurValue = (uint8 *) pAttr->pValue;
    668                                osal_memset(pCurValue, 0, SIMPLEPROFILE_CHAR2_LEN);
    669                                VOID osal_memcpy(pCurValue, pValue, len);
    670                                
    671                                notifyApp = SIMPLEPROFILE_CHAR2; 
    672                              }
    673                              
    674                              break;
    675                           case SIMPLEPROFILE_CHAR3_UUID:
    676                               if ( offset == 0 )
    677                               {
    678                                 if (len > SIMPLEPROFILE_CHAR3_LEN) 
    679                                 {
    680                                   status = ATT_ERR_INVALID_VALUE_SIZE;
    681                                 }
    682                               } 
    683                               else 
    684                               {
    685                                 status = ATT_ERR_ATTR_NOT_LONG;
    686                               }
    687                               //Write the value
    688                               if ( status == SUCCESS )
    689                               {
    690                                 uint8 *pCurValue = (uint8 *) pAttr->pValue;
    691                                 osal_memset(pCurValue, 0, SIMPLEPROFILE_CHAR3_LEN);
    692                                 VOID osal_memcpy(pCurValue, pValue, len);
    693                                 
    694                                 notifyApp = SIMPLEPROFILE_CHAR3; 
    695                               }
    696                         
    697                                    break;
    698                          case SIMPLEPROFILE_CHAR5_UUID:
    699          		
    700                              //Validate the value
    701                              // Make sure it's not a blob oper
    702                              if (offset == 0) 
    703                              {
    704                                if (len > SIMPLEPROFILE_CHAR5_LEN) 
    705                                {
    706                                  status = ATT_ERR_INVALID_VALUE_SIZE;
    707                                }
    708                              } 
    709                              else 
    710                              {
    711                                status = ATT_ERR_ATTR_NOT_LONG;
    712                              }
    713                              
    714                              //Write the value
    715                              if (status == SUCCESS) 
    716                              {
    717                                uint8 *pCurValue = (uint8 *) pAttr->pValue;
    718                                osal_memset(pCurValue, 0, SIMPLEPROFILE_CHAR5_LEN);
    719                                VOID osal_memcpy(pCurValue, pValue, len);
    720                                
    721                                if (pAttr->pValue == simpleProfileChar5) 
    722                                {
    723                                  notifyApp = SIMPLEPROFILE_CHAR5;
    724                                } 
    725                                
    726                              }
    727              
    728                              break;
    729                       
    730                         case SIMPLEPROFILE_CHAR6_UUID:
    731          		
    732                              //Validate the value
    733                              // Make sure it's not a blob oper
    734                              if (offset == 0) 
    735                              {
    736                                if (len > SIMPLEPROFILE_CHAR6_LEN) 
    737                                {
    738                                  status = ATT_ERR_INVALID_VALUE_SIZE;
    739                                }
    740                              } 
    741                              else 
    742                              {
    743                                status = ATT_ERR_ATTR_NOT_LONG;
    744                              }
    745                              
    746                              //Write the value
    747                              if (status == SUCCESS) 
    748                              {
    749                                uint8 *pCurValue = (uint8 *) pAttr->pValue;
    750                                osal_memset(pCurValue, 0, SIMPLEPROFILE_CHAR6_LEN);
    751                                VOID osal_memcpy(pCurValue, pValue, len);
    752                                
    753                                if (pAttr->pValue == simpleProfileChar6) 
    754                                {
    755                                  notifyApp = SIMPLEPROFILE_CHAR6;
    756                                } 
    757                                
    758                              }
    759              
    760                              break;
    761                          case SIMPLEPROFILE_CHAR7_UUID: 
    762                              //Validate the value
    763                              // Make sure it's not a blob oper
    764                              if (offset == 0) 
    765                              {
    766                                if (len > SIMPLEPROFILE_CHAR7_LEN) 
    767                                {
    768                                  status = ATT_ERR_INVALID_VALUE_SIZE;
    769                                }
    770                              } 
    771                              else 
    772                              {
    773                                status = ATT_ERR_ATTR_NOT_LONG;
    774                              }
    775                              
    776                              //Write the value
    777                              if (status == SUCCESS) 
    778                              {
    779                                uint8 *pCurValue = (uint8 *) pAttr->pValue;
    780                                osal_memset(pCurValue, 0, SIMPLEPROFILE_CHAR7_LEN);
    781                                VOID osal_memcpy(pCurValue, pValue, len);
    782                                
    783                                if (pAttr->pValue == simpleProfileChar7) 
    784                                {
    785                                  notifyApp = SIMPLEPROFILE_CHAR7;
    786                                } 
    787                                
    788                              }
    789                    
    790                              break;
    791                          case GATT_CLIENT_CHAR_CFG_UUID:
    792          			status = GATTServApp_ProcessCCCWriteReq(connHandle, pAttr, pValue, len, offset, GATT_CLIENT_CFG_NOTIFY);
    793          			break;
    794          
    795          		default:
    796          			// Should never get here! (characteristics 2 and 4 do not have write permissions)
    797          			status = ATT_ERR_ATTR_NOT_FOUND;
    798          			break;
    799          		}
    800          	} else {
    801          		// 128-bit UUID
    802          		status = ATT_ERR_INVALID_HANDLE;
    803          	}
    804          
    805          // If a charactersitic value changed then callback function to notify application of change
    806          	if ((notifyApp != 0xFF) && simpleProfile_AppCBs && simpleProfile_AppCBs->pfnSimpleProfileChange) {
    807          		simpleProfile_AppCBs->pfnSimpleProfileChange(notifyApp);
    808          	}
    809          
    810          	return (status);
    811          }
    812          
    813          /*********************************************************************
    814           * @fn          simpleProfile_HandleConnStatusCB
    815           *
    816           * @brief       Simple Profile link status change handler function.
    817           *
    818           * @param       connHandle - connection handle
    819           * @param       changeType - type of change
    820           *
    821           * @return      none
    822           */
    823          static void simpleProfile_HandleConnStatusCB(uint16 connHandle, uint8 changeType) {
    824          // Make sure this is not loopback connection
    825          	if (connHandle != LOOPBACK_CONNHANDLE) {
    826          		// Reset Client Char Config if connection has dropped
    827          		if ((changeType == LINKDB_STATUS_UPDATE_REMOVED)
    828          				|| ((changeType == LINKDB_STATUS_UPDATE_STATEFLAGS) && (!linkDB_Up( connHandle )))) {
    829          			GATTServApp_InitCharCfg(connHandle, simpleProfileChar4Config);
    830          		}
    831          	}
    832          }
    833          
    834          /*********************************************************************
    835           *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     14  SimpleProfile_AddService
                          0 0 12 -> GATTServApp_InitCharCfg
                          0 0 14 -> GATTServApp_RegisterService
                          0 0 12 -> linkDB_Register
       1      0     12  SimpleProfile_GetParameter
                          0 0 12 -> osal_memcpy
       2      0      0  SimpleProfile_RegisterAppCBs
       0      0     17  SimpleProfile_SetParameter
                          0 0 17 -> GATTServApp_ProcessCharCfg
                          0 0 14 -> osal_memcpy
       0      0      9  simpleProfile_HandleConnStatusCB
                          0 0  9 -> GATTServApp_InitCharCfg
                          0 0  9 -> linkDB_State
       1      0     22  simpleProfile_ReadAttrCB
                          0 0 16 -> osal_memcpy
       0      0     10  simpleProfile_StateNotify
                          0 0 10 -> GATTServApp_ReadCharCfg
                          0 0 10 -> GATT_Notification
       0      0     29  simpleProfile_WriteAttrCB
                          0 0 25 -> GATTServApp_ProcessCCCWriteReq
                          0 0 21 -> osal_memcpy
                          0 0 19 -> osal_memset


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     192  ?<Initializer for simpleProfileAttrTbl>
       1  ?<Initializer for simpleProfileChar1Props>
      17  ?<Initializer for simpleProfileChar1UserDesp>
       1  ?<Initializer for simpleProfileChar2Props>
      17  ?<Initializer for simpleProfileChar2UserDesp>
       1  ?<Initializer for simpleProfileChar3Props>
      17  ?<Initializer for simpleProfileChar3UserDesp>
       1  ?<Initializer for simpleProfileChar4Props>
      17  ?<Initializer for simpleProfileChar4UserDesp>
       1  ?<Initializer for simpleProfileChar5Props>
      17  ?<Initializer for simpleProfileChar5UserDesp>
       1  ?<Initializer for simpleProfileChar6Props>
      17  ?<Initializer for simpleProfileChar6UserDesp>
       1  ?<Initializer for simpleProfileChar7Props>
      17  ?<Initializer for simpleProfileChar7UserDesp>
       6  ??SimpleProfile_AddService?relay
       6  ??SimpleProfile_GetParameter?relay
       6  ??SimpleProfile_RegisterAppCBs?relay
       6  ??SimpleProfile_SetParameter?relay
       6  ??Subroutine7_0
       6  ??simpleProfile_HandleConnStatusCB?relay
       6  ??simpleProfile_ReadAttrCB?relay
       6  ??simpleProfile_StateNotify?relay
       6  ??simpleProfile_WriteAttrCB?relay
       7  ?Subroutine0
       5  ?Subroutine1
      23  ?Subroutine2
      23  ?Subroutine3
       1  ?Subroutine4
       6  ?Subroutine5
       9  ?Subroutine6
      62  SimpleProfile_AddService
     149  SimpleProfile_GetParameter
      29  SimpleProfile_RegisterAppCBs
     262  SimpleProfile_SetParameter
     192  simpleProfileAttrTbl
       6  simpleProfileCBs
      20  simpleProfileChar1
       1  simpleProfileChar1Props
      17  simpleProfileChar1UserDesp
      20  simpleProfileChar2
       1  simpleProfileChar2Props
      17  simpleProfileChar2UserDesp
      20  simpleProfileChar3
       1  simpleProfileChar3Props
      17  simpleProfileChar3UserDesp
       1  simpleProfileChar4
       6  simpleProfileChar4Config
       1  simpleProfileChar4Props
      17  simpleProfileChar4UserDesp
      20  simpleProfileChar5
       1  simpleProfileChar5Props
      17  simpleProfileChar5UserDesp
      20  simpleProfileChar6
       1  simpleProfileChar6Props
      17  simpleProfileChar6UserDesp
      20  simpleProfileChar7
       1  simpleProfileChar7Props
      17  simpleProfileChar7UserDesp
       2  simpleProfileServUUID
       3  simpleProfileService
       2  simpleProfile_AppCBs
      57  simpleProfile_HandleConnStatusCB
     224  simpleProfile_ReadAttrCB
      59  simpleProfile_StateNotify
     614  simpleProfile_WriteAttrCB
       2  simpleProfilechar1UUID
       2  simpleProfilechar2UUID
       2  simpleProfilechar3UUID
       2  simpleProfilechar4UUID
       2  simpleProfilechar5UUID
       2  simpleProfilechar6UUID
       2  simpleProfilechar7UUID

 
 1 536 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
   318 bytes in segment XDATA_I
   318 bytes in segment XDATA_ID
    25 bytes in segment XDATA_ROM_C
   129 bytes in segment XDATA_Z
 
 1 902 bytes of CODE  memory
    25 bytes of CONST memory
   447 bytes of XDATA memory

Errors: none
Warnings: none
