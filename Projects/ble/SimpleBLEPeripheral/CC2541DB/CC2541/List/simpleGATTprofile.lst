###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             27/Mar/2014  14:01:45 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          Profiles\SimpleProfile\simpleGATTprofile.c         #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\config\build #
#                          Components.cfg (-DBROADCASTER_CFG=0x01             #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\buildConfig #
#                          .cfg (-DHOST_CONFIG=PERIPHERAL_CFG                 #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          Profiles\SimpleProfile\simpleGATTprofile.c -D      #
#                          INT_HEAP_LEN=3074 -D HALNODEBUG -D                 #
#                          OSAL_CBTIMER_NUM_TASKS=1 -D xHAL_AES_DMA=TRUE -D   #
#                          HAL_DMA=TRUE -D POWER_SAVING -D xPLUS_BROADCASTER  #
#                          -D HAL_LCD=TRUE -D HAL_LED=TRUE -D HAL_UART=FALSE  #
#                          -D HAL_ADC=TRUE -D HAL_SLEEP_DEBUG_LED -lcN        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\ -o       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\ -I   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\include\ -I     #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\hal\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\hal\target\CC2541EB\ -I        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\osal\include\ -I E:\TexasInstruments\BLE-CC254x- #
#                          1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\.. #
#                          \..\..\..\Components\services\saddr\ -I            #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\ble\controller\phy\ -I         #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\controller\include\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\. #
#                          .\..\Components\ble\host\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\common\cc2540\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\npi\n #
#                          pi_np\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profi #
#                          les\Roles\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\P #
#                          rofiles\SimpleProfile\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\Profiles\DevInf #
#                          o\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Project #
#                          s\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profiles\ #
#                          Batt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Proj #
#                          ects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profil #
#                          es\HIDDev\ -Ohz                                    #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\simpleGAT #
#                          Tprofile.lst                                       #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\simpleGATT #
#                          profile.r51                                        #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\Profiles\SimpleProfile\simpleGATTprofile.c
      1          /**************************************************************************************************
      2           Filename:       simpleGATTprofile.c
      3           Revised:        $Date: 2010-08-06 08:56:11 -0700 (Fri, 06 Aug 2010) $
      4           Revision:       $Revision: 23333 $
      5          
      6           Description:    This file contains the Simple GATT profile sample GATT service
      7           profile for use with the BLE sample application.
      8          
      9           Copyright 2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11           IMPORTANT: Your use of this Software is limited to those specific rights
     12           granted under the terms of a software license agreement between the user
     13           who downloaded the software, his/her employer (which must be your employer)
     14           and Texas Instruments Incorporated (the "License").  You may not use this
     15           Software unless you agree to abide by the terms of the License. The License
     16           limits your use, and you acknowledge, that the Software may not be modified,
     17           copied or distributed unless embedded on a Texas Instruments microcontroller
     18           or used solely and exclusively in conjunction with a Texas Instruments radio
     19           frequency transceiver, which is integrated into your product.  Other than for
     20           the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21           works of, modify, distribute, perform, display or sell this Software and/or
     22           its documentation for any purpose.
     23          
     24           YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25           PROVIDED �AS IS� WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26           INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27           NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28           TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29           NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30           LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31           INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32           OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33           OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34           (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36           Should you have any questions regarding your right to use this Software,
     37           contact Texas Instruments Incorporated at www.TI.com.
     38           **************************************************************************************************/
     39          /*********************************************************************
     40           * INCLUDES
     41           */
     42          #include "bcomdef.h"
     43          #include "OSAL.h"
     44          #include "linkdb.h"
     45          #include "att.h"
     46          #include "gatt.h"
     47          #include "gatt_uuid.h"
     48          #include "gattservapp.h"
     49          #include "gapbondmgr.h"
     50          #include "simpleGATTprofile.h"
     51          /*********************************************************************
     52           * MACROS
     53           */
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          #define SERVAPP_NUM_ATTR_SUPPORTED        26
     58          /*********************************************************************
     59           * TYPEDEFS
     60           */
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          // Simple GATT Profile Service UUID: 0xFFF0
     65          CONST uint8 simpleProfileServUUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_SERV_UUID), HI_UINT16(SIMPLEPROFILE_SERV_UUID) };
     66          // Characteristic 1 UUID: 0xFFF1
     67          CONST uint8 simpleProfilechar1UUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_CHAR1_UUID), HI_UINT16(SIMPLEPROFILE_CHAR1_UUID) };
     68          // Characteristic 2 UUID: 0xFFF2
     69          CONST uint8 simpleProfilechar2UUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_CHAR2_UUID), HI_UINT16(SIMPLEPROFILE_CHAR2_UUID) };
     70          // Characteristic 3 UUID: 0xFFF3
     71          CONST uint8 simpleProfilechar3UUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_CHAR3_UUID), HI_UINT16(SIMPLEPROFILE_CHAR3_UUID) };
     72          // Characteristic 4 UUID: 0xFFF4
     73          CONST uint8 simpleProfilechar4UUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_CHAR4_UUID), HI_UINT16(SIMPLEPROFILE_CHAR4_UUID) };
     74          // Characteristic 5 UUID: 0xFFF5
     75          CONST uint8 simpleProfilechar5UUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_CHAR5_UUID), HI_UINT16(SIMPLEPROFILE_CHAR5_UUID) };
     76          // Characteristic 6 UUID: 0xFFF6
     77          CONST uint8 simpleProfilechar6UUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_CHAR6_UUID), HI_UINT16(SIMPLEPROFILE_CHAR6_UUID) };
     78          // Characteristic 7 UUID: 0xFFF7
     79          CONST uint8 simpleProfilechar7UUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_CHAR7_UUID), HI_UINT16(SIMPLEPROFILE_CHAR7_UUID) };
     80          // Characteristic 8 UUID: 0xFFF8
     81          CONST uint8 simpleProfilechar8UUID[ATT_BT_UUID_SIZE] = { LO_UINT16(SIMPLEPROFILE_CHAR8_UUID), HI_UINT16(SIMPLEPROFILE_CHAR8_UUID) };
     82          
     83          /*********************************************************************
     84           * EXTERNAL VARIABLES
     85           */
     86          
     87          /*********************************************************************
     88           * EXTERNAL FUNCTIONS
     89           */
     90          
     91          /*********************************************************************
     92           * LOCAL VARIABLES
     93           */
     94          
     95          static simpleProfileCBs_t *simpleProfile_AppCBs = NULL;
     96          
     97          /*********************************************************************
     98           * Profile Attributes - variables
     99           */
    100          
    101          // Simple Profile Service attribute
    102          static CONST gattAttrType_t simpleProfileService = { ATT_BT_UUID_SIZE, simpleProfileServUUID };
    103          
    104          
    105          // Simple Profile Characteristic 1 Properties
    106          static uint8 simpleProfileChar1Props = GATT_PROP_READ | GATT_PROP_WRITE;
    107          
    108          // Characteristic 1 Value
    109          static uint8 simpleProfileChar1[SIMPLEPROFILE_CHAR1_LEN] = { 0 };
    110          
    111          // Simple Profile Characteristic 1 User Description
    112          static uint8 simpleProfileChar1UserDesp[17] = "Characteristic 1\0";
    113          
    114          
    115          // Simple Profile Characteristic 2 Properties
    116          static uint8 simpleProfileChar2Props = GATT_PROP_READ | GATT_PROP_WRITE;
    117          
    118          // Characteristic 2 Value
    119          static uint8 simpleProfileChar2[SIMPLEPROFILE_CHAR2_LEN] = { 0 };
    120          
    121          // Simple Profile Characteristic 2 User Description
    122          static uint8 simpleProfileChar2UserDesp[17] = "Characteristic 2\0";
    123          
    124          
    125          // Simple Profile Characteristic 3 Properties
    126          static uint8 simpleProfileChar3Props = GATT_PROP_READ| GATT_PROP_WRITE;
    127          
    128          // Characteristic 3 Value
    129          //static uint8 simpleProfileChar3 = 0;
    130          static uint8 simpleProfileChar3[SIMPLEPROFILE_CHAR3_LEN] = { 0 };
    131          
    132          // Simple Profile Characteristic 3 User Description
    133          static uint8 simpleProfileChar3UserDesp[17] = "Characteristic 3\0";
    134          
    135          
    136          // Simple Profile Characteristic 4 Properties
    137          static uint8 simpleProfileChar4Props = GATT_PROP_NOTIFY;
    138          
    139          // Characteristic 4 Value
    140          static uint8 simpleProfileChar4 = 0;
    141          
    142          // Simple Profile Characteristic 4 Configuration Each client has its own
    143          // instantiation of the Client Characteristic Configuration. Reads of the
    144          // Client Characteristic Configuration only shows the configuration for
    145          // that client and writes only affect the configuration of that client.
    146          static gattCharCfg_t simpleProfileChar4Config[GATT_MAX_NUM_CONN];
    147          
    148          // Simple Profile Characteristic 4 User Description
    149          static uint8 simpleProfileChar4UserDesp[17] = "Characteristic 4\0";
    150          
    151          // Simple Profile Characteristic 5 Properties
    152          static uint8 simpleProfileChar5Props =  GATT_PROP_READ | GATT_PROP_WRITE;
    153          
    154          // Characteristic 5 Value
    155          static uint8 simpleProfileChar5[SIMPLEPROFILE_CHAR5_LEN] = { 0, 0, 0, 0, 0 };
    156          
    157          // Simple Profile Characteristic 5 User Description
    158          static uint8 simpleProfileChar5UserDesp[17] = "Characteristic 5\0";
    159          
    160          
    161          // Simple Profile Characteristic 6 Properties
    162          static uint8 simpleProfileChar6Props = GATT_PROP_READ | GATT_PROP_WRITE;
    163          
    164          // Characteristic 6 Value
    165          static uint8 simpleProfileChar6[SIMPLEPROFILE_CHAR6_LEN] = { 0 };
    166          
    167          // Simple Profile Characteristic 6 User Description
    168          static uint8 simpleProfileChar6UserDesp[17] = "Characteristic 6\0";
    169          
    170          
    171          // Simple Profile Characteristic 7 Properties
    172          static uint8 simpleProfileChar7Props = GATT_PROP_READ | GATT_PROP_WRITE;
    173          
    174          // Characteristic 7 Value
    175          static uint8 simpleProfileChar7[SIMPLEPROFILE_CHAR7_LEN] = { 0 };
    176          
    177          // Simple Profile Characteristic 7 User Description
    178          static uint8 simpleProfileChar7UserDesp[17] = "Characteristic 7\0";
    179          
    180          
    181          // Simple Profile Characteristic 8 Properties
    182          static uint8 simpleProfileChar8Props = GATT_PROP_READ | GATT_PROP_WRITE;
    183          
    184          // Characteristic 8 Value
    185          static uint8 simpleProfileChar8[SIMPLEPROFILE_CHAR7_LEN] = { 0 };
    186          
    187          // Simple Profile Characteristic 8 User Description
    188          static uint8 simpleProfileChar8UserDesp[17] = "Characteristic 8\0";
    189          
    190          
    191          
    192          /*********************************************************************
    193           * Profile Attributes - Table
    194           */
    195          
    196          static gattAttribute_t simpleProfileAttrTbl[SERVAPP_NUM_ATTR_SUPPORTED] = {
    197          // Simple Profile Service
    198          		{ { ATT_BT_UUID_SIZE, primaryServiceUUID }, /* type */
    199          		GATT_PERMIT_READ, /* permissions */
    200          		0, /* handle */
    201          		(uint8 *) &simpleProfileService /* pValue */
    202          		},
    203          
    204          		// Characteristic 1 Declaration
    205          		{ { ATT_BT_UUID_SIZE, characterUUID }, GATT_PERMIT_READ, 0, &simpleProfileChar1Props },
    206          
    207          		// Characteristic Value 1
    208          		{ { ATT_BT_UUID_SIZE, simpleProfilechar1UUID }, GATT_PERMIT_READ | GATT_PERMIT_WRITE, 0, simpleProfileChar1 },
    209          
    210          		// Characteristic 1 User Description
    211          		{ { ATT_BT_UUID_SIZE, charUserDescUUID }, GATT_PERMIT_READ, 0, simpleProfileChar1UserDesp },
    212          
    213          		
    214                          
    215                         // Characteristic 2 Declaration
    216                        { { ATT_BT_UUID_SIZE, characterUUID },GATT_PERMIT_READ,  0,&simpleProfileChar2Props  },
    217          
    218                            // Characteristic Value 2
    219                        { { ATT_BT_UUID_SIZE, simpleProfilechar2UUID },GATT_PERMIT_READ | GATT_PERMIT_WRITE,  0, simpleProfileChar2  },
    220           
    221                        // Characteristic 2 User Description
    222                        { { ATT_BT_UUID_SIZE, charUserDescUUID },GATT_PERMIT_READ, 0, simpleProfileChar2UserDesp },      
    223          
    224          
    225          		// Characteristic 3 Declaration
    226          		{ { ATT_BT_UUID_SIZE, characterUUID }, GATT_PERMIT_READ, 0, &simpleProfileChar3Props },
    227          
    228          		// Characteristic Value 3
    229          		{ { ATT_BT_UUID_SIZE, simpleProfilechar3UUID },GATT_PERMIT_READ | GATT_PERMIT_WRITE, 0, simpleProfileChar3 },
    230          
    231          		// Characteristic 3 User Description
    232          		{ { ATT_BT_UUID_SIZE, charUserDescUUID }, GATT_PERMIT_READ, 0, simpleProfileChar3UserDesp },
    233          
    234          
    235          		// Characteristic 4 Declaration
    236          		{ { ATT_BT_UUID_SIZE, characterUUID }, GATT_PERMIT_READ, 0, &simpleProfileChar4Props },
    237          
    238          		// Characteristic Value 4
    239          		{ { ATT_BT_UUID_SIZE, simpleProfilechar4UUID }, 0, 0, &simpleProfileChar4 },
    240          
    241          		// Characteristic 4 configuration
    242          		{ { ATT_BT_UUID_SIZE, clientCharCfgUUID }, GATT_PERMIT_READ | GATT_PERMIT_WRITE, 0, (uint8 *) simpleProfileChar4Config },
    243          
    244          		// Characteristic 4 User Description
    245          		{ { ATT_BT_UUID_SIZE, charUserDescUUID }, GATT_PERMIT_READ, 0, simpleProfileChar4UserDesp },
    246                          
    247          
    248          		// Characteristic 5 Declaration
    249          		{ { ATT_BT_UUID_SIZE, characterUUID }, GATT_PERMIT_READ, 0, &simpleProfileChar5Props },
    250          
    251          		// Characteristic Value 5
    252          		{ { ATT_BT_UUID_SIZE, simpleProfilechar5UUID },  GATT_PERMIT_READ | GATT_PERMIT_WRITE, 0, simpleProfileChar5 },
    253          
    254          		// Characteristic 5 User Description
    255          		{ { ATT_BT_UUID_SIZE, charUserDescUUID }, GATT_PERMIT_READ, 0, simpleProfileChar5UserDesp },
    256                          
    257                          
    258                          // Characteristic 6 Declaration
    259          		{ { ATT_BT_UUID_SIZE, characterUUID }, GATT_PERMIT_READ, 0, &simpleProfileChar6Props },
    260          
    261          		// Characteristic Value 6
    262          		{ { ATT_BT_UUID_SIZE, simpleProfilechar6UUID }, GATT_PERMIT_READ | GATT_PERMIT_WRITE, 0, simpleProfileChar6 },
    263          
    264          		// Characteristic 6 User Description
    265          		{ { ATT_BT_UUID_SIZE, charUserDescUUID }, GATT_PERMIT_READ, 0, simpleProfileChar6UserDesp },
    266                          
    267                          
    268                          // Characteristic 7 Declaration
    269          		{ { ATT_BT_UUID_SIZE, characterUUID }, GATT_PERMIT_READ, 0, &simpleProfileChar7Props },
    270          
    271          		// Characteristic Value 7
    272          		{ { ATT_BT_UUID_SIZE, simpleProfilechar7UUID }, GATT_PERMIT_READ | GATT_PERMIT_WRITE, 0, simpleProfileChar7 },
    273          
    274          		// Characteristic 7 User Description
    275          		{ { ATT_BT_UUID_SIZE, charUserDescUUID }, GATT_PERMIT_READ, 0, simpleProfileChar7UserDesp },
    276                          
    277                           // Characteristic 8 Declaration
    278          		{ { ATT_BT_UUID_SIZE, characterUUID }, GATT_PERMIT_READ, 0, &simpleProfileChar8Props },
    279          
    280          		// Characteristic Value 8
    281          		{ { ATT_BT_UUID_SIZE, simpleProfilechar8UUID }, GATT_PERMIT_READ | GATT_PERMIT_WRITE, 0, simpleProfileChar8 },
    282          
    283          		// Characteristic 8 User Description
    284          		{ { ATT_BT_UUID_SIZE, charUserDescUUID }, GATT_PERMIT_READ, 0, simpleProfileChar8UserDesp },
    285          
    286          };
    287          
    288          /*********************************************************************
    289           * LOCAL FUNCTIONS
    290           */
    291          static uint8 simpleProfile_ReadAttrCB(uint16 connHandle, gattAttribute_t *pAttr, uint8 *pValue, uint8 *pLen, uint16 offset, uint8 maxLen);
    292          static bStatus_t simpleProfile_WriteAttrCB(uint16 connHandle, gattAttribute_t *pAttr, uint8 *pValue, uint8 len, uint16 offset);
    293          
    294          static void simpleProfile_HandleConnStatusCB(uint16 connHandle, uint8 changeType);
    295          /*********************************************************************
    296           * PROFILE CALLBACKS
    297           */
    298          // Simple Profile Service Callbacks
    299          CONST gattServiceCBs_t simpleProfileCBs = { simpleProfile_ReadAttrCB, // Read callback function pointer
    300          		simpleProfile_WriteAttrCB, // Write callback function pointer
    301          		NULL // Authorization callback function pointer
    302          		};
    303          
    304          /*********************************************************************
    305           * PUBLIC FUNCTIONS
    306           */
    307          
    308          /*********************************************************************
    309           * @fn      SimpleProfile_AddService
    310           *
    311           * @brief   Initializes the Simple Profile service by registering
    312           *          GATT attributes with the GATT server.
    313           *
    314           * @param   services - services to add. This is a bit map and can
    315           *                     contain more than one service.
    316           *
    317           * @return  Success or Failure
    318           */
    319          bStatus_t SimpleProfile_AddService(uint32 services) {
    320          	uint8 status = SUCCESS;
    321          
    322          	// Initialize Client Characteristic Configuration attributes
    323          	GATTServApp_InitCharCfg(INVALID_CONNHANDLE, simpleProfileChar4Config);
    324          
    325          	// Register with Link DB to receive link status change callback
    326          	VOID linkDB_Register(simpleProfile_HandleConnStatusCB);
    327          
    328          	if (services & SIMPLEPROFILE_SERVICE) {
    329          		// Register GATT attribute list and CBs with GATT Server App
    330          		status = GATTServApp_RegisterService(simpleProfileAttrTbl, GATT_NUM_ATTRS( simpleProfileAttrTbl ), &simpleProfileCBs);
    331          	}
    332          
    333          	return (status);
    334          }
    335          
    336          /*********************************************************************
    337           * @fn      SimpleProfile_RegisterAppCBs
    338           *
    339           * @brief   Registers the application callback function. Only call 
    340           *          this function once.
    341           *
    342           * @param   callbacks - pointer to application callbacks.
    343           *
    344           * @return  SUCCESS or bleAlreadyInRequestedMode
    345           */
    346          bStatus_t SimpleProfile_RegisterAppCBs(simpleProfileCBs_t *appCallbacks) {
    347          	if (appCallbacks) {
    348          		simpleProfile_AppCBs = appCallbacks;
    349          
    350          		return (SUCCESS);
    351          	} else {
    352          		return (bleAlreadyInRequestedMode);
    353          	}
    354          }
    355          
    356          /*********************************************************************
    357           * @fn      SimpleProfile_SetParameter
    358           *
    359           * @brief   Set a Simple Profile parameter.
    360           *
    361           * @param   param - Profile parameter ID
    362           * @param   len - length of data to right
    363           * @param   value - pointer to data to write.  This is dependent on
    364           *          the parameter ID and WILL be cast to the appropriate 
    365           *          data type (example: data type of uint16 will be cast to 
    366           *          uint16 pointer).
    367           *
    368           * @return  bStatus_t
    369           */
    370          bStatus_t SimpleProfile_SetParameter(uint8 param, uint8 len, void *value) {
    371          	bStatus_t ret = SUCCESS;
    372          	switch (param) {
    373          	case SIMPLEPROFILE_CHAR1:
    374          		if (len == SIMPLEPROFILE_CHAR1_LEN) {
    375          			VOID osal_memcpy(simpleProfileChar1, value, SIMPLEPROFILE_CHAR1_LEN);
    376          		}
    377          
    378          		else {
    379          			ret = bleInvalidRange;
    380          		}
    381          		break;
    382          
    383          	case SIMPLEPROFILE_CHAR2:
    384          		if (len ==SIMPLEPROFILE_CHAR2_LEN) {
    385          			VOID osal_memcpy(simpleProfileChar2, value, SIMPLEPROFILE_CHAR2_LEN);
    386          		} else {
    387          			ret = bleInvalidRange;
    388          		}
    389          		break;
    390          
    391          	case SIMPLEPROFILE_CHAR3:
    392          		if (len == SIMPLEPROFILE_CHAR3_LEN) {
    393          			VOID osal_memcpy(simpleProfileChar3, value, SIMPLEPROFILE_CHAR3_LEN);
    394          		} else {
    395          			ret = bleInvalidRange;
    396          		}
    397          		break;
    398          
    399          	case SIMPLEPROFILE_CHAR4:
    400          		if (len == sizeof(uint8)) {
    401          			simpleProfileChar4 = *((uint8*) value);
    402          
    403          			// See if Notification has been enabled
    404          			GATTServApp_ProcessCharCfg(simpleProfileChar4Config, &simpleProfileChar4, FALSE, simpleProfileAttrTbl,
    405          					GATT_NUM_ATTRS( simpleProfileAttrTbl ), INVALID_TASK_ID);
    406          		} else {
    407          			ret = bleInvalidRange;
    408          		}
    409          		break;
    410          
    411          	case SIMPLEPROFILE_CHAR5:
    412          		if (len == SIMPLEPROFILE_CHAR5_LEN) {
    413          			VOID osal_memcpy(simpleProfileChar5, value, SIMPLEPROFILE_CHAR5_LEN);
    414          		} else {
    415          			ret = bleInvalidRange;
    416          		}
    417          		break;
    418                  case SIMPLEPROFILE_CHAR6:
    419                    
    420          		if (len == SIMPLEPROFILE_CHAR6_LEN) {
    421          			VOID osal_memcpy(simpleProfileChar6, value, SIMPLEPROFILE_CHAR6_LEN);
    422          		}
    423          
    424          		else {
    425          			ret = bleInvalidRange;
    426          		}
    427          		break;
    428                  case SIMPLEPROFILE_CHAR7:
    429                    
    430          		if (len == SIMPLEPROFILE_CHAR7_LEN) {
    431          			VOID osal_memcpy(simpleProfileChar7, value, SIMPLEPROFILE_CHAR7_LEN);
    432          		}
    433          
    434          		else {
    435          			ret = bleInvalidRange;
    436          		}
    437          		break;    
    438                  case SIMPLEPROFILE_CHAR8:
    439                    
    440          		if (len == SIMPLEPROFILE_CHAR8_LEN) {
    441          			VOID osal_memcpy(simpleProfileChar8, value, SIMPLEPROFILE_CHAR8_LEN);
    442          		}
    443          
    444          		else {
    445          			ret = bleInvalidRange;
    446          		}
    447          		break;        
    448                          
    449          
    450          	default:
    451          		ret = INVALIDPARAMETER;
    452          		break;
    453          	}
    454          
    455          	return (ret);
    456          }
    457          
    458          /*********************************************************************
    459           * @fn      SimpleProfile_GetParameter
    460           *
    461           * @brief   Get a Simple Profile parameter.
    462           *
    463           * @param   param - Profile parameter ID
    464           * @param   value - pointer to data to put.  This is dependent on
    465           *          the parameter ID and WILL be cast to the appropriate 
    466           *          data type (example: data type of uint16 will be cast to 
    467           *          uint16 pointer).
    468           *
    469           * @return  bStatus_t
    470           */
    471          bStatus_t SimpleProfile_GetParameter(uint8 param, void *value) {
    472          	bStatus_t ret = SUCCESS;
    473          	switch (param) {
    474          	case SIMPLEPROFILE_CHAR1:
    475          		VOID osal_memcpy(value, simpleProfileChar1, SIMPLEPROFILE_CHAR1_LEN);
    476          		break;
    477          
    478          	case SIMPLEPROFILE_CHAR2:
    479          		VOID osal_memcpy(value, simpleProfileChar2, SIMPLEPROFILE_CHAR2_LEN);
    480          		break;
    481          
    482          	case SIMPLEPROFILE_CHAR3:
    483          		VOID osal_memcpy(value, simpleProfileChar3, SIMPLEPROFILE_CHAR3_LEN);
    484          		break;
    485          
    486          	case SIMPLEPROFILE_CHAR4:
    487          		*((uint8*) value) = simpleProfileChar4;
    488          		break;
    489          
    490          	case SIMPLEPROFILE_CHAR5:
    491          		VOID osal_memcpy(value, simpleProfileChar5, SIMPLEPROFILE_CHAR5_LEN);
    492          		break;
    493                  case SIMPLEPROFILE_CHAR6:
    494          		VOID osal_memcpy(value, simpleProfileChar6, SIMPLEPROFILE_CHAR6_LEN);
    495          		break;
    496                  case SIMPLEPROFILE_CHAR7:
    497          		VOID osal_memcpy(value, simpleProfileChar7, SIMPLEPROFILE_CHAR7_LEN);
    498          		break;
    499                  case SIMPLEPROFILE_CHAR8:
    500          		VOID osal_memcpy(value, simpleProfileChar8, SIMPLEPROFILE_CHAR8_LEN);
    501          		break;
    502          
    503          	default:
    504          		ret = INVALIDPARAMETER;
    505          		break;
    506          	}
    507          
    508          	return (ret);
    509          }
    510          
    511          
    512          /*********************************************************************
    513           * @fn          simpleProfile_StateNotify
    514           *
    515           * @brief       Send a notification containing a rate
    516           *              measurement.
    517           *
    518           * @param       connHandle - connection handle
    519           * @param       pNoti - pointer to notification structure
    520           *
    521           * @return      Success or Failure
    522           */
    523          bStatus_t simpleProfile_StateNotify( uint16 connHandle, attHandleValueNoti_t *pNoti )
    524          {
    525            uint16 value = GATTServApp_ReadCharCfg( connHandle, simpleProfileChar4Config );
    526          
    527            // If notifications enabled
    528            if ( value & GATT_CLIENT_CFG_NOTIFY )
    529            {
    530              // Set the handle
    531              pNoti->handle = simpleProfileAttrTbl[12].handle;
    532          
    533              // Send the notification
    534              return GATT_Notification( connHandle, pNoti, FALSE );
    535            }
    536          
    537            return bleIncorrectMode;
    538          }
    539          
    540          /*********************************************************************
    541           * @fn          simpleProfile_ReadAttrCB
    542           *
    543           * @brief       Read an attribute.
    544           *
    545           * @param       connHandle - connection message was received on
    546           * @param       pAttr - pointer to attribute
    547           * @param       pValue - pointer to data to be read
    548           * @param       pLen - length of data to be read
    549           * @param       offset - offset of the first octet to be read
    550           * @param       maxLen - maximum length of data to be read
    551           *
    552           * @return      Success or Failure
    553           */
    554          static uint8 simpleProfile_ReadAttrCB(uint16 connHandle, gattAttribute_t *pAttr, uint8 *pValue, uint8 *pLen, uint16 offset, uint8 maxLen) {
    555          	bStatus_t status = SUCCESS;
    556          
    557          	// If attribute permissions require authorization to read, return error
    558          	if (gattPermitAuthorRead( pAttr->permissions )) {
    559          		// Insufficient authorization
    560          		return (ATT_ERR_INSUFFICIENT_AUTHOR);
    561          	}
    562          
    563          	// Make sure it's not a blob operation (no attributes in the profile are long)
    564          	if (offset > 0) {
    565          		return (ATT_ERR_ATTR_NOT_LONG);
    566          	}
    567          
    568          	if (pAttr->type.len == ATT_BT_UUID_SIZE) {
    569          		// 16-bit UUID
    570          		uint16 uuid = BUILD_UINT16( pAttr->type.uuid[0], pAttr->type.uuid[1]);
    571          		switch (uuid) {
    572          		// No need for "GATT_SERVICE_UUID" or "GATT_CLIENT_CHAR_CFG_UUID" cases;
    573          		// gattserverapp handles those reads
    574          
    575          		// characteristics 1 and 2 have read permissions
    576          		// characteritisc 3 does not have read permissions; therefore it is not
    577          		//   included here
    578          		// characteristic 4 does not have read permissions, but because it
    579          		//   can be sent as a notification, it is included here
    580          		case SIMPLEPROFILE_CHAR1_UUID:
    581                                *pLen = SIMPLEPROFILE_CHAR1_LEN;
    582                                VOID osal_memcpy(pValue, pAttr->pValue, SIMPLEPROFILE_CHAR1_LEN);
    583                                break;
    584          		case SIMPLEPROFILE_CHAR2_UUID:
    585                                *pLen = SIMPLEPROFILE_CHAR2_LEN;
    586                                VOID osal_memcpy(pValue, pAttr->pValue, SIMPLEPROFILE_CHAR2_LEN);
    587                                break;
    588                          case SIMPLEPROFILE_CHAR3_UUID: 
    589                                *pLen = SIMPLEPROFILE_CHAR3_LEN;
    590                                VOID osal_memcpy(pValue, pAttr->pValue, SIMPLEPROFILE_CHAR3_LEN);
    591                                break;
    592          		case SIMPLEPROFILE_CHAR4_UUID:
    593                                *pLen = 1;
    594                                pValue[0] = *pAttr->pValue;
    595                                break;
    596                          
    597          
    598          		case SIMPLEPROFILE_CHAR5_UUID:
    599                                *pLen = SIMPLEPROFILE_CHAR5_LEN;
    600                                VOID osal_memcpy(pValue, pAttr->pValue, SIMPLEPROFILE_CHAR5_LEN);
    601                                break;
    602                          case SIMPLEPROFILE_CHAR6_UUID:
    603                                *pLen = SIMPLEPROFILE_CHAR6_LEN;
    604                                VOID osal_memcpy(pValue, pAttr->pValue, SIMPLEPROFILE_CHAR6_LEN);
    605                                break;
    606                          case SIMPLEPROFILE_CHAR7_UUID:
    607                                *pLen = SIMPLEPROFILE_CHAR7_LEN;
    608                                VOID osal_memcpy(pValue, pAttr->pValue, SIMPLEPROFILE_CHAR7_LEN);
    609                                break;
    610                           case SIMPLEPROFILE_CHAR8_UUID:
    611                                *pLen = SIMPLEPROFILE_CHAR8_LEN;
    612                                VOID osal_memcpy(pValue, pAttr->pValue, SIMPLEPROFILE_CHAR8_LEN);
    613                                break;
    614                                
    615                                
    616          
    617          		default:
    618          			// Should never get here! (characteristics 3 and 4 do not have read permissions)
    619                                  *pLen = 0;
    620                                  status = ATT_ERR_ATTR_NOT_FOUND;
    621                                  break;
    622          		}
    623          	} else {
    624          		// 128-bit UUID
    625          		*pLen = 0;
    626          		status = ATT_ERR_INVALID_HANDLE;
    627          	}
    628          
    629          	return (status);
    630          }
    631          
    632          /*********************************************************************
    633           * @fn      simpleProfile_WriteAttrCB
    634           *
    635           * @brief   Validate attribute data prior to a write operation
    636           *
    637           * @param   connHandle - connection message was received on
    638           * @param   pAttr - pointer to attribute
    639           * @param   pValue - pointer to data to be written
    640           * @param   len - length of data
    641           * @param   offset - offset of the first octet to be written
    642           * @param   complete - whether this is the last packet
    643           * @param   oper - whether to validate and/or write attribute value  
    644           *
    645           * @return  Success or Failure
    646           */
    647          static bStatus_t simpleProfile_WriteAttrCB(uint16 connHandle, gattAttribute_t *pAttr, uint8 *pValue, uint8 len, uint16 offset) {
    648          	bStatus_t status = SUCCESS;
    649          	uint8 notifyApp = 0xFF;
    650          
    651          	// If attribute permissions require authorization to write, return error
    652          	if (gattPermitAuthorWrite( pAttr->permissions )) {
    653          		// Insufficient authorization
    654          		return (ATT_ERR_INSUFFICIENT_AUTHOR);
    655          	}
    656          
    657          	if (pAttr->type.len == ATT_BT_UUID_SIZE) {
    658          		// 16-bit UUID
    659          		uint16 uuid = BUILD_UINT16( pAttr->type.uuid[0], pAttr->type.uuid[1]);
    660          		switch (uuid) {
    661          		case SIMPLEPROFILE_CHAR1_UUID:
    662                            
    663                              //Validate the value
    664                              // Make sure it's not a blob oper
    665                              if (offset == 0) 
    666                              {
    667                                if (len > SIMPLEPROFILE_CHAR1_LEN) 
    668                                {
    669                                  status = ATT_ERR_INVALID_VALUE_SIZE;
    670                                }
    671                              } 
    672                              else 
    673                              {
    674                                status = ATT_ERR_ATTR_NOT_LONG;
    675                              }
    676                              
    677                              //Write the value
    678                              if (status == SUCCESS) 
    679                              {
    680                                uint8 *pCurValue = (uint8 *) pAttr->pValue;
    681                                osal_memset(pCurValue, 0, SIMPLEPROFILE_CHAR1_LEN);
    682                                VOID osal_memcpy(pCurValue, pValue, len);
    683                                
    684                                if (pAttr->pValue == simpleProfileChar1) 
    685                                {
    686                                  notifyApp = SIMPLEPROFILE_CHAR1;
    687                                } 
    688                                
    689                              }
    690             
    691                              break;
    692                          case SIMPLEPROFILE_CHAR2_UUID:
    693                              if ( offset == 0 )
    694                              {
    695                                if (len > SIMPLEPROFILE_CHAR2_LEN) 
    696                                {
    697                                  status = ATT_ERR_INVALID_VALUE_SIZE;
    698                                }
    699                              } 
    700                              else 
    701                              {
    702                                status = ATT_ERR_ATTR_NOT_LONG;
    703                              }
    704                              //Write the value
    705                              if ( status == SUCCESS )
    706                              {
    707                                uint8 *pCurValue = (uint8 *) pAttr->pValue;
    708                                osal_memset(pCurValue, 0, SIMPLEPROFILE_CHAR2_LEN);
    709                                VOID osal_memcpy(pCurValue, pValue, len);
    710                                
    711                                notifyApp = SIMPLEPROFILE_CHAR2; 
    712                              }
    713                              
    714                              break;
    715                           case SIMPLEPROFILE_CHAR3_UUID:
    716                               if ( offset == 0 )
    717                               {
    718                                 if (len > SIMPLEPROFILE_CHAR3_LEN) 
    719                                 {
    720                                   status = ATT_ERR_INVALID_VALUE_SIZE;
    721                                 }
    722                               } 
    723                               else 
    724                               {
    725                                 status = ATT_ERR_ATTR_NOT_LONG;
    726                               }
    727                               //Write the value
    728                               if ( status == SUCCESS )
    729                               {
    730                                 uint8 *pCurValue = (uint8 *) pAttr->pValue;
    731                                 osal_memset(pCurValue, 0, SIMPLEPROFILE_CHAR3_LEN);
    732                                 VOID osal_memcpy(pCurValue, pValue, len);
    733                                 
    734                                 notifyApp = SIMPLEPROFILE_CHAR3; 
    735                               }
    736                         
    737                                    break;
    738                          case SIMPLEPROFILE_CHAR5_UUID:
    739          		
    740                              //Validate the value
    741                              // Make sure it's not a blob oper
    742                              if (offset == 0) 
    743                              {
    744                                if (len > SIMPLEPROFILE_CHAR5_LEN) 
    745                                {
    746                                  status = ATT_ERR_INVALID_VALUE_SIZE;
    747                                }
    748                              } 
    749                              else 
    750                              {
    751                                status = ATT_ERR_ATTR_NOT_LONG;
    752                              }
    753                              
    754                              //Write the value
    755                              if (status == SUCCESS) 
    756                              {
    757                                uint8 *pCurValue = (uint8 *) pAttr->pValue;
    758                                osal_memset(pCurValue, 0, SIMPLEPROFILE_CHAR5_LEN);
    759                                VOID osal_memcpy(pCurValue, pValue, len);
    760                                
    761                                if (pAttr->pValue == simpleProfileChar5) 
    762                                {
    763                                  notifyApp = SIMPLEPROFILE_CHAR5;
    764                                } 
    765                                
    766                              }
    767              
    768                              break;
    769                       
    770                         case SIMPLEPROFILE_CHAR6_UUID:
    771          		
    772                              //Validate the value
    773                              // Make sure it's not a blob oper
    774                              if (offset == 0) 
    775                              {
    776                                if (len > SIMPLEPROFILE_CHAR6_LEN) 
    777                                {
    778                                  status = ATT_ERR_INVALID_VALUE_SIZE;
    779                                }
    780                              } 
    781                              else 
    782                              {
    783                                status = ATT_ERR_ATTR_NOT_LONG;
    784                              }
    785                              
    786                              //Write the value
    787                              if (status == SUCCESS) 
    788                              {
    789                                uint8 *pCurValue = (uint8 *) pAttr->pValue;
    790                                osal_memset(pCurValue, 0, SIMPLEPROFILE_CHAR6_LEN);
    791                                VOID osal_memcpy(pCurValue, pValue, len);
    792                                
    793                                if (pAttr->pValue == simpleProfileChar6) 
    794                                {
    795                                  notifyApp = SIMPLEPROFILE_CHAR6;
    796                                } 
    797                                
    798                              }
    799              
    800                              break;
    801                          case SIMPLEPROFILE_CHAR7_UUID: 
    802                              //Validate the value
    803                              // Make sure it's not a blob oper
    804                              if (offset == 0) 
    805                              {
    806                                if (len > SIMPLEPROFILE_CHAR7_LEN) 
    807                                {
    808                                  status = ATT_ERR_INVALID_VALUE_SIZE;
    809                                }
    810                              } 
    811                              else 
    812                              {
    813                                status = ATT_ERR_ATTR_NOT_LONG;
    814                              }
    815                              
    816                              //Write the value
    817                              if (status == SUCCESS) 
    818                              {
    819                                uint8 *pCurValue = (uint8 *) pAttr->pValue;
    820                                osal_memset(pCurValue, 0, SIMPLEPROFILE_CHAR7_LEN);
    821                                VOID osal_memcpy(pCurValue, pValue, len);
    822                                
    823                                if (pAttr->pValue == simpleProfileChar7) 
    824                                {
    825                                  notifyApp = SIMPLEPROFILE_CHAR7;
    826                                } 
    827                                
    828                              }
    829                    
    830                              break;
    831                           case SIMPLEPROFILE_CHAR8_UUID: 
    832                              //Validate the value
    833                              // Make sure it's not a blob oper
    834                              if (offset == 0) 
    835                              {
    836                                if (len > SIMPLEPROFILE_CHAR8_LEN) 
    837                                {
    838                                  status = ATT_ERR_INVALID_VALUE_SIZE;
    839                                }
    840                              } 
    841                              else 
    842                              {
    843                                status = ATT_ERR_ATTR_NOT_LONG;
    844                              }
    845                              
    846                              //Write the value
    847                              if (status == SUCCESS) 
    848                              {
    849                                uint8 *pCurValue = (uint8 *) pAttr->pValue;
    850                                osal_memset(pCurValue, 0, SIMPLEPROFILE_CHAR8_LEN);
    851                                VOID osal_memcpy(pCurValue, pValue, len);
    852                                
    853                                if (pAttr->pValue == simpleProfileChar8) 
    854                                {
    855                                  notifyApp = SIMPLEPROFILE_CHAR8;
    856                                } 
    857                                
    858                              }
    859                    
    860                              break;
    861                          case GATT_CLIENT_CHAR_CFG_UUID:
    862          			status = GATTServApp_ProcessCCCWriteReq(connHandle, pAttr, pValue, len, offset, GATT_CLIENT_CFG_NOTIFY);
    863          			break;
    864          
    865          		default:
    866          			// Should never get here! (characteristics 2 and 4 do not have write permissions)
    867          			status = ATT_ERR_ATTR_NOT_FOUND;
    868          			break;
    869          		}
    870          	} else {
    871          		// 128-bit UUID
    872          		status = ATT_ERR_INVALID_HANDLE;
    873          	}
    874          
    875          // If a charactersitic value changed then callback function to notify application of change
    876          	if ((notifyApp != 0xFF) && simpleProfile_AppCBs && simpleProfile_AppCBs->pfnSimpleProfileChange) {
    877          		simpleProfile_AppCBs->pfnSimpleProfileChange(notifyApp);
    878          	}
    879          
    880          	return (status);
    881          }
    882          
    883          /*********************************************************************
    884           * @fn          simpleProfile_HandleConnStatusCB
    885           *
    886           * @brief       Simple Profile link status change handler function.
    887           *
    888           * @param       connHandle - connection handle
    889           * @param       changeType - type of change
    890           *
    891           * @return      none
    892           */
    893          static void simpleProfile_HandleConnStatusCB(uint16 connHandle, uint8 changeType) {
    894          // Make sure this is not loopback connection
    895          	if (connHandle != LOOPBACK_CONNHANDLE) {
    896          		// Reset Client Char Config if connection has dropped
    897          		if ((changeType == LINKDB_STATUS_UPDATE_REMOVED)
    898          				|| ((changeType == LINKDB_STATUS_UPDATE_STATEFLAGS) && (!linkDB_Up( connHandle )))) {
    899          			GATTServApp_InitCharCfg(connHandle, simpleProfileChar4Config);
    900          		}
    901          	}
    902          }
    903          
    904          /*********************************************************************
    905           *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     14  SimpleProfile_AddService
                          0 0 12 -> GATTServApp_InitCharCfg
                          0 0 14 -> GATTServApp_RegisterService
                          0 0 12 -> linkDB_Register
       1      0     12  SimpleProfile_GetParameter
                          0 0 12 -> osal_memcpy
       2      0      0  SimpleProfile_RegisterAppCBs
       0      0     17  SimpleProfile_SetParameter
                          0 0 17 -> GATTServApp_ProcessCharCfg
                          0 0 14 -> osal_memcpy
       0      0      9  simpleProfile_HandleConnStatusCB
                          0 0  9 -> GATTServApp_InitCharCfg
                          0 0  9 -> linkDB_State
       1      0     22  simpleProfile_ReadAttrCB
                          0 0 16 -> osal_memcpy
       0      0     10  simpleProfile_StateNotify
                          0 0 10 -> GATTServApp_ReadCharCfg
                          0 0 10 -> GATT_Notification
       0      0     29  simpleProfile_WriteAttrCB
                          0 0 25 -> GATTServApp_ProcessCCCWriteReq
                          0 0 21 -> osal_memcpy
                          0 0 19 -> osal_memset


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     208  ?<Initializer for simpleProfileAttrTbl>
       1  ?<Initializer for simpleProfileChar1Props>
      17  ?<Initializer for simpleProfileChar1UserDesp>
       1  ?<Initializer for simpleProfileChar2Props>
      17  ?<Initializer for simpleProfileChar2UserDesp>
       1  ?<Initializer for simpleProfileChar3Props>
      17  ?<Initializer for simpleProfileChar3UserDesp>
       1  ?<Initializer for simpleProfileChar4Props>
      17  ?<Initializer for simpleProfileChar4UserDesp>
       1  ?<Initializer for simpleProfileChar5Props>
      17  ?<Initializer for simpleProfileChar5UserDesp>
       1  ?<Initializer for simpleProfileChar6Props>
      17  ?<Initializer for simpleProfileChar6UserDesp>
       1  ?<Initializer for simpleProfileChar7Props>
      17  ?<Initializer for simpleProfileChar7UserDesp>
       1  ?<Initializer for simpleProfileChar8Props>
      17  ?<Initializer for simpleProfileChar8UserDesp>
       6  ??SimpleProfile_AddService?relay
       6  ??SimpleProfile_GetParameter?relay
       6  ??SimpleProfile_RegisterAppCBs?relay
       6  ??SimpleProfile_SetParameter?relay
       6  ??Subroutine7_0
       6  ??simpleProfile_HandleConnStatusCB?relay
       6  ??simpleProfile_ReadAttrCB?relay
       6  ??simpleProfile_StateNotify?relay
       6  ??simpleProfile_WriteAttrCB?relay
       7  ?Subroutine0
       5  ?Subroutine1
      23  ?Subroutine2
      23  ?Subroutine3
       1  ?Subroutine4
       6  ?Subroutine5
       9  ?Subroutine6
      62  SimpleProfile_AddService
     169  SimpleProfile_GetParameter
      29  SimpleProfile_RegisterAppCBs
     290  SimpleProfile_SetParameter
     208  simpleProfileAttrTbl
       6  simpleProfileCBs
      20  simpleProfileChar1
       1  simpleProfileChar1Props
      17  simpleProfileChar1UserDesp
      20  simpleProfileChar2
       1  simpleProfileChar2Props
      17  simpleProfileChar2UserDesp
      20  simpleProfileChar3
       1  simpleProfileChar3Props
      17  simpleProfileChar3UserDesp
       1  simpleProfileChar4
       6  simpleProfileChar4Config
       1  simpleProfileChar4Props
      17  simpleProfileChar4UserDesp
      20  simpleProfileChar5
       1  simpleProfileChar5Props
      17  simpleProfileChar5UserDesp
      20  simpleProfileChar6
       1  simpleProfileChar6Props
      17  simpleProfileChar6UserDesp
      20  simpleProfileChar7
       1  simpleProfileChar7Props
      17  simpleProfileChar7UserDesp
      20  simpleProfileChar8
       1  simpleProfileChar8Props
      17  simpleProfileChar8UserDesp
       2  simpleProfileServUUID
       3  simpleProfileService
       2  simpleProfile_AppCBs
      57  simpleProfile_HandleConnStatusCB
     226  simpleProfile_ReadAttrCB
      59  simpleProfile_StateNotify
     689  simpleProfile_WriteAttrCB
       2  simpleProfilechar1UUID
       2  simpleProfilechar2UUID
       2  simpleProfilechar3UUID
       2  simpleProfilechar4UUID
       2  simpleProfilechar5UUID
       2  simpleProfilechar6UUID
       2  simpleProfilechar7UUID
       2  simpleProfilechar8UUID

 
 1 661 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
   352 bytes in segment XDATA_I
   352 bytes in segment XDATA_ID
    27 bytes in segment XDATA_ROM_C
   149 bytes in segment XDATA_Z
 
 2 061 bytes of CODE  memory
    27 bytes of CONST memory
   501 bytes of XDATA memory

Errors: none
Warnings: none
