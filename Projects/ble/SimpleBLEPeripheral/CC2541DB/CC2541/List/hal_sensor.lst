###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             18/Mar/2014  14:18:02 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\target\CC2541EB\hal_sensor.c                     #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\config\build #
#                          Components.cfg (-DBROADCASTER_CFG=0x01             #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\buildConfig #
#                          .cfg (-DHOST_CONFIG=PERIPHERAL_CFG                 #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\target\CC2541EB\hal_sensor.c -D                  #
#                          INT_HEAP_LEN=3074 -D HALNODEBUG -D                 #
#                          OSAL_CBTIMER_NUM_TASKS=1 -D xHAL_AES_DMA=TRUE -D   #
#                          HAL_DMA=TRUE -D POWER_SAVING -D xPLUS_BROADCASTER  #
#                          -D HAL_LCD=TRUE -D HAL_LED=TRUE -D HAL_UART=TRUE   #
#                          -D HAL_ADC=TRUE -lcN E:\TexasInstruments\BLE-CC254 #
#                          x-1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\ #
#                          CC2541\List\ -o E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheral\CC2541DB\CC254 #
#                          1\Obj\ -e --debug --core=plain --dptr=16,1         #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\ -I   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\include\ -I     #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\hal\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\hal\target\CC2541EB\ -I        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\osal\include\ -I E:\TexasInstruments\BLE-CC254x- #
#                          1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\.. #
#                          \..\..\..\Components\services\saddr\ -I            #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\ble\controller\phy\ -I         #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\controller\include\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\. #
#                          .\..\Components\ble\host\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\common\cc2540\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\npi\n #
#                          pi_np\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profi #
#                          les\Roles\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\P #
#                          rofiles\SimpleProfile\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\Profiles\DevInf #
#                          o\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Project #
#                          s\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profiles\ #
#                          Batt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Proj #
#                          ects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profil #
#                          es\HIDDev\ -Ohz                                    #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\hal_senso #
#                          r.lst                                              #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\hal_sensor #
#                          .r51                                               #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Components\hal\target\CC2541EB\hal_sensor.c
      1          #include "hal_sensor.h"
      2          #include "hal_i2c.h"
      3          #include "hal_lcd.h"
      4          
      5          static uint8 buffer[24];
      6          static uint8 addrMSB = 0;
      7          static uint8 addrLSB = 0;
      8          static uint8 addrBuf[2] = { 0 };
      9          
     10          /**************************************************************************************************
     11           * @fn          HalSensorReadReg
     12           *
     13           * @brief       This function implements the I2C protocol to read from a sensor. The sensor must
     14           *              be selected before this routine is called.
     15           *
     16           * @param       addr - which register to read
     17           * @param       pBuf - pointer to buffer to place data
     18           * @param       nBytes - numbver of bytes to read
     19           *
     20           * @return      TRUE if the required number of bytes are reveived
     21           **************************************************************************************************/
     22          bool HalSensorReadReg(uint8 addr, uint8 *pBuf, uint8 nBytes) {
     23          	uint8 i = 0;
     24          
     25          	/* Send address we're reading from */
     26          	if (HalI2CWrite(1, &addr) == 1) {
     27          		/* Now read data */
     28          		i = HalI2CRead(nBytes, pBuf);
     29          	}
     30          
     31          	return i == nBytes;
     32          }
     33          
     34          /**************************************************************************************************
     35           * @fn          HalSensorWriteReg
     36           * @brief       This function implements the I2C protocol to write to a sensor. he sensor must
     37           *              be selected before this routine is called.
     38           *
     39           * @param       addr - which register to write
     40           * @param       pBuf - pointer to buffer containing data to be written
     41           * @param       nBytes - number of bytes to write
     42           *
     43           * @return      TRUE if successful write
     44           */
     45          bool HalSensorWriteReg(uint8 addr, uint8 *pBuf, uint8 nBytes) {
     46          	uint8 i;
     47          	uint8 *p = buffer;
     48          
     49          	/* Copy address and data to local buffer for burst write */
     50          	*p++ = addr;
     51          	for (i = 0; i < nBytes; i++) {
     52          		*p++ = *pBuf++;
     53          	}
     54          	nBytes++;
     55          
     56          	/* Send address and data */
     57          	i = HalI2CWrite(nBytes, buffer);
     58          	if (i != nBytes) {
     59          	}
     60          	//HAL_TOGGLE_LED2();
     61          
     62          	return (i == nBytes);       
     63                  
     64          }
     65          
     66          /**************************************************************************************************
     67           * @fn          HalLongAddrSensorReadReg
     68           *
     69           * @brief       This function implements the I2C protocol to read from a sensor. The sensor must
     70           *              be selected before this routine is called.
     71           *
     72           * @param       uint16 addr - which register to read
     73           * @param       pBuf - pointer to buffer to place data
     74           * @param       nBytes - numbver of bytes to read
     75           *
     76           * @return      TRUE if the required number of bytes are reveived
     77           **************************************************************************************************/
     78          bool HalLongAddrSensorReadReg(uint16 addr, uint8 *pBuf, uint8 nBytes) {
     79          	uint8 i = 0;
     80          	addrBuf[0] = addr >> 8;
     81          	addrBuf[1] = addr & 0xFF;
     82          	/* Send address we're reading from */
     83          	if (HalI2CWrite(2, addrBuf) == 2) {
     84          		/* Now read data */
     85          		i = HalI2CRead(nBytes, pBuf);
     86          	}
     87          
     88          	return i == nBytes;
     89                  
     90                  
     91                 
     92          }
     93          
     94          /**************************************************************************************************
     95           * @fn          HalLongAddrSensorWriteReg
     96           * @brief       This function implements the I2C protocol to write to a sensor. he sensor must
     97           *              be selected before this routine is called.
     98           *
     99           * @param       uint16 addr - which register to write
    100           * @param       pBuf - pointer to buffer containing data to be written
    101           * @param       nBytes - number of bytes to write
    102           *
    103           * @return      TRUE if successful write
    104           */
    105          bool HalLongAddrSensorWriteReg(uint16 addr, uint8 *pBuf, uint8 nBytes) {
    106          	uint8 i;
    107          	uint8 *p = buffer;
    108                  addrMSB = addr >> 8;
    109          	addrLSB = addr & 0xFF;
    110          
    111          	/*Copy address and data to local buffer for burst write*/ 
    112          	*p++ = addrMSB;
    113          	*p++ = addrLSB;
    114          	for (i = 0; i < nBytes; i++) {
    115          		*p++ = *pBuf++;
    116          	}
    117          	nBytes++;
    118          	nBytes++;
    119          
    120          	/* Send address and data */
    121          	i = HalI2CWrite(nBytes, buffer);
    122          	if (i != nBytes) {
    123          	}
    124          	//HAL_TOGGLE_LED2();
    125          
    126          	return (i == nBytes);
    127                 
    128          }
    129          
    130          void Hal_HW_WaitUs(uint16 microSecs) {
    131          	while (microSecs--) {
    132          		/* 32 NOPs == 1 usecs */
    133          		asm("NOP");
    134          		asm("NOP");
    135          		asm("NOP");
    136          		asm("NOP");
    137          		asm("NOP");
    138          		asm("NOP");
    139          		asm("NOP");
    140          		asm("NOP");
    141          		asm("NOP");
    142          		asm("NOP");
    143          		asm("NOP");
    144          		asm("NOP");
    145          		asm("NOP");
    146          		asm("NOP");
    147          		asm("NOP");
    148          		asm("NOP");
    149          		asm("NOP");
    150          		asm("NOP");
    151          		asm("NOP");
    152          		asm("NOP");
    153          		asm("NOP");
    154          		asm("NOP");
    155          		asm("NOP");
    156          		asm("NOP");
    157          		asm("NOP");
    158          		asm("NOP");
    159          		asm("NOP");
    160          		asm("NOP");
    161          		asm("NOP");
    162          		asm("NOP");
    163          		asm("NOP");
    164          		asm("NOP");
    165          	}
    166          }
    167          
    168          
    169          /**************************************************************************************************
    170           * @fn          HalSensorWriteReg
    171           * @brief       This function implements the I2C protocol to write to a sensor. he sensor must
    172           *              be selected before this routine is called.
    173           *
    174           * @param       addr - which register to write
    175           * @param       pBuf - pointer to buffer containing data to be written
    176           * @param       nBytes - number of bytes to write
    177           *
    178           * @return      TRUE if successful write
    179           */
    180          void HalWriteReg(uint8 addr, uint8 *pBuf, uint8 nBytes,uint8 NumToWrite) {
    181            
    182                  
    183            uint8 *p;
    184            
    185            while(NumToWrite--)
    186          	{
    187          		*p=*pBuf++;
    188                          HalSensorWriteReg(addr,p,nBytes);
    189          		addr++;
    190          		
    191          	}
    192          	  
    193                  
    194          }
    195          
    196          
    197          /**************************************************************************************************
    198           * @fn          HalSensorReadReg
    199           *
    200           * @brief       This function implements the I2C protocol to read from a sensor. The sensor must
    201           *              be selected before this routine is called.
    202           *
    203           * @param       addr - which register to read
    204           * @param       pBuf - pointer to buffer to place data
    205           * @param       nBytes - numbver of bytes to read
    206           *
    207           * @return      TRUE if the required number of bytes are reveived
    208           **************************************************************************************************/
    209          void HalReadReg(uint8 addr, uint8 *pBuf, uint8 nBytes,uint8 NumToRead) {
    210          	
    211            	while(NumToRead)
    212          	{
    213          		
    214                          HalSensorReadReg(addr, pBuf, nBytes);
    215                          //HalLcdWriteString((uint8*)pBuf, HAL_LCD_LINE_5);
    216                         // Hal_HW_WaitUs(5000000);
    217                          //while(1);
    218                          addr++;
    219          		NumToRead--;       
    220          	}
    221            
    222          }
    223          
    224          
    225          
    226          
    227          
    228          
    229          
    230          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     10  HalLongAddrSensorReadReg
                          0 0 10 -> HalI2CRead
                          0 0 10 -> HalI2CWrite
       1      0      9  HalLongAddrSensorWriteReg
                          0 0  9 -> HalI2CWrite
       0      0     11  HalReadReg
                          0 0 11 -> HalSensorReadReg
       1      0     22  HalSensorReadReg
                          0 0 11 -> HalI2CRead
                          0 0 11 -> HalI2CWrite
       1      0     22  HalSensorWriteReg
                          0 0  9 -> HalI2CWrite
       1      0     13  HalWriteReg
                          0 0 13 -> HalSensorWriteReg
       0      0      0  Hal_HW_WaitUs


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??HalLongAddrSensorReadReg?relay
       6  ??HalLongAddrSensorWriteReg?relay
       6  ??HalReadReg?relay
       6  ??HalSensorReadReg?relay
       6  ??HalSensorWriteReg?relay
       6  ??HalWriteReg?relay
       6  ??Hal_HW_WaitUs?relay
       5  ?Subroutine0
       5  ?Subroutine1
      63  HalLongAddrSensorReadReg
     100  HalLongAddrSensorWriteReg
      41  HalReadReg
      70  HalSensorReadReg
      76  HalSensorWriteReg
      66  HalWriteReg
      53  Hal_HW_WaitUs
       2  addrBuf
       1  addrLSB
       1  addrMSB
      24  buffer

 
 479 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
  28 bytes in segment XDATA_Z
 
 521 bytes of CODE  memory
  28 bytes of XDATA memory

Errors: none
Warnings: 1
