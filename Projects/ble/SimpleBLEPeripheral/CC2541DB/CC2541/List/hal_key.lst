###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             27/Mar/2014  14:01:42 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\target\CC2541EB\hal_key.c                        #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\config\build #
#                          Components.cfg (-DBROADCASTER_CFG=0x01             #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\buildConfig #
#                          .cfg (-DHOST_CONFIG=PERIPHERAL_CFG                 #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\target\CC2541EB\hal_key.c -D INT_HEAP_LEN=3074   #
#                          -D HALNODEBUG -D OSAL_CBTIMER_NUM_TASKS=1 -D       #
#                          xHAL_AES_DMA=TRUE -D HAL_DMA=TRUE -D POWER_SAVING  #
#                          -D xPLUS_BROADCASTER -D HAL_LCD=TRUE -D            #
#                          HAL_LED=TRUE -D HAL_UART=FALSE -D HAL_ADC=TRUE -D  #
#                          HAL_SLEEP_DEBUG_LED -lcN                           #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\ -o       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\ -I   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\include\ -I     #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\hal\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\hal\target\CC2541EB\ -I        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\osal\include\ -I E:\TexasInstruments\BLE-CC254x- #
#                          1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\.. #
#                          \..\..\..\Components\services\saddr\ -I            #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\ble\controller\phy\ -I         #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\controller\include\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\. #
#                          .\..\Components\ble\host\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\common\cc2540\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\npi\n #
#                          pi_np\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profi #
#                          les\Roles\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\P #
#                          rofiles\SimpleProfile\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\Profiles\DevInf #
#                          o\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Project #
#                          s\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profiles\ #
#                          Batt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Proj #
#                          ects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profil #
#                          es\HIDDev\ -Ohz                                    #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\hal_key.l #
#                          st                                                 #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\hal_key.r5 #
#                          1                                                  #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Components\hal\target\CC2541EB\hal_key.c
      1          /**************************************************************************************************
      2            Filename:       hal_key.c
      3            Revised:        $Date: 2013-09-20 11:53:10 -0700 (Fri, 20 Sep 2013) $
      4            Revision:       $Revision: 35401 $
      5          
      6            Description:    This file contains the interface to the HAL KEY Service.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          /*********************************************************************
     40           NOTE: If polling is used, the hal_driver task schedules the KeyRead()
     41                 to occur every 100ms.  This should be long enough to naturally
     42                 debounce the keys.  The KeyRead() function remembers the key
     43                 state of the previous poll and will only return a non-zero
     44                 value if the key state changes.
     45          
     46           NOTE: If interrupts are used, the KeyRead() function is scheduled
     47                 25ms after the interrupt occurs by the ISR.  This delay is used
     48                 for key debouncing.  The ISR disables any further Key interrupt
     49                 until KeyRead() is executed.  KeyRead() will re-enable Key
     50                 interrupts after executing.  Unlike polling, when interrupts
     51                 are enabled, the previous key state is not remembered.  This
     52                 means that KeyRead() will return the current state of the keys
     53                 (not a change in state of the keys).
     54          
     55           NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
     56                 the ISR.  Therefore, the joystick movements will only be detected
     57                 during a pushbutton interrupt caused by S1 or the center joystick
     58                 pushbutton.
     59          
     60           NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
     61                 high state to a low state.  This transition is typically clean.  The
     62                 duration of the low state is around 200ms.  When the signal returns
     63                 to the high state, there is a high likelihood of signal bounce, which
     64                 causes a unwanted interrupts.  Normally, we would set the interrupt
     65                 edge to falling edge to generate an interrupt when S1 is pushed, but
     66                 because of the signal bounce, it is better to set the edge to rising
     67                 edge to generate an interrupt when S1 is released.  The debounce logic
     68                 can then filter out the signal bounce.  The result is that we typically
     69                 get only 1 interrupt per button push.  This mechanism is not totally
     70                 foolproof because occasionally, signal bound occurs during the falling
     71                 edge as well.  A similar mechanism is used to handle the joystick
     72                 pushbutton on the DB.  For the EB, we do not have independent control
     73                 of the interrupt edge for the S1 and center joystick pushbutton.  As
     74                 a result, only one or the other pushbuttons work reasonably well with
     75                 interrupts.  The default is the make the S1 switch on the EB work more
     76                 reliably.
     77          
     78          *********************************************************************/
     79          
     80          /**************************************************************************************************
     81           *                                            INCLUDES
     82           **************************************************************************************************/
     83          #include "hal_mcu.h"
     84          #include "hal_defs.h"
     85          #include "hal_types.h"
     86          #include "hal_drivers.h"
     87          #include "hal_adc.h"
     88          #include "hal_key.h"
     89          #include "osal.h"
     90          
     91          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
     92          
     93          /**************************************************************************************************
     94           *                                            CONSTANTS
     95           **************************************************************************************************/
     96          #define HAL_KEY_RISING_EDGE   0
     97          #define HAL_KEY_FALLING_EDGE  1
     98          
     99          #define HAL_KEY_DEBOUNCE_VALUE  25
    100          
    101          /* CPU port interrupt */
    102          #define HAL_KEY_CPU_PORT_0_IF P0IF
    103          #define HAL_KEY_CPU_PORT_2_IF P2IF
    104          
    105          #if defined ( CC2540_MINIDK )
    106          /* SW_1 is at P0.0 */
    107          #define HAL_KEY_SW_1_PORT   P0
    108          #define HAL_KEY_SW_1_BIT    BV(0)
    109          #define HAL_KEY_SW_1_SEL    P0SEL
    110          #define HAL_KEY_SW_1_DIR    P0DIR
    111          
    112          /* SW_2 is at P0.1 */
    113          #define HAL_KEY_SW_2_PORT   P0
    114          #define HAL_KEY_SW_2_BIT    BV(1)
    115          #define HAL_KEY_SW_2_SEL    P0SEL
    116          #define HAL_KEY_SW_2_DIR    P0DIR
    117          
    118          #define HAL_KEY_SW_1_IEN      IEN1  /* CPU interrupt mask register */
    119          #define HAL_KEY_SW_1_ICTL     P0IEN /* Port Interrupt Control register */
    120          #define HAL_KEY_SW_1_ICTLBIT  BV(0) /* P0IEN - P0.0 enable/disable bit */
    121          #define HAL_KEY_SW_1_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    122          
    123          #define HAL_KEY_SW_1_PXIFG    P0IFG /* Interrupt flag at source */
    124          #define HAL_KEY_SW_2_IEN      IEN1  /* CPU interrupt mask register */
    125          #define HAL_KEY_SW_2_ICTL     P0IEN /* Port Interrupt Control register */
    126          #define HAL_KEY_SW_2_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
    127          #define HAL_KEY_SW_2_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    128          #define HAL_KEY_SW_2_PXIFG    P0IFG /* Interrupt flag at source */
    129          
    130          #define HAL_KEY_SW_1_EDGEBIT  BV(0)
    131          
    132          #else
    133          
    134          /* SW_6 is at P0.1 */
    135          #define HAL_KEY_SW_6_PORT   P0
    136          #define HAL_KEY_SW_6_BIT    BV(1)
    137          #define HAL_KEY_SW_6_SEL    P0SEL
    138          #define HAL_KEY_SW_6_DIR    P0DIR
    139          
    140          /* edge interrupt */
    141          #define HAL_KEY_SW_6_EDGEBIT  BV(0)
    142          #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
    143          
    144          /* SW_6 interrupts */
    145          #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
    146          #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    147          #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
    148          #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
    149          #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
    150          
    151          /* Joy stick move at P2.0 */
    152          #define HAL_KEY_JOY_MOVE_PORT   P2
    153          #define HAL_KEY_JOY_MOVE_BIT    BV(0)
    154          #define HAL_KEY_JOY_MOVE_SEL    P2SEL
    155          #define HAL_KEY_JOY_MOVE_DIR    P2DIR
    156          
    157          /* edge interrupt */
    158          #define HAL_KEY_JOY_MOVE_EDGEBIT  BV(3)
    159          #define HAL_KEY_JOY_MOVE_EDGE     HAL_KEY_FALLING_EDGE
    160          
    161          /* Joy move interrupts */
    162          #define HAL_KEY_JOY_MOVE_IEN      IEN2  /* CPU interrupt mask register */
    163          #define HAL_KEY_JOY_MOVE_IENBIT   BV(1) /* Mask bit for all of Port_2 */
    164          #define HAL_KEY_JOY_MOVE_ICTL     P2IEN /* Port Interrupt Control register */
    165          #define HAL_KEY_JOY_MOVE_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
    166          #define HAL_KEY_JOY_MOVE_PXIFG    P2IFG /* Interrupt flag at source */
    167          
    168          #define HAL_KEY_JOY_CHN   HAL_ADC_CHANNEL_6
    169          
    170          #endif
    171          
    172          /**************************************************************************************************
    173           *                                            TYPEDEFS
    174           **************************************************************************************************/
    175          
    176          
    177          uint8 keypresslasttime=1;
    178          
    179          
    180          
    181          /**************************************************************************************************
    182           *                                        GLOBAL VARIABLES
    183           **************************************************************************************************/
    184          static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
    185          static halKeyCBack_t pHalKeyProcessFunction;
    186          static uint8 HalKeyConfigured;
    187          bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
    188          
    189          /**************************************************************************************************
    190           *                                        FUNCTIONS - Local
    191           **************************************************************************************************/
    192          void halProcessKeyInterrupt(void);
    193          uint8 halGetJoyKeyInput(void);
    194          
    195          
    196          
    197          /**************************************************************************************************
    198           *                                        FUNCTIONS - API
    199           **************************************************************************************************/
    200          
    201          
    202          /**************************************************************************************************
    203           * @fn      HalKeyInit
    204           *
    205           * @brief   Initilize Key Service
    206           *
    207           * @param   none
    208           *
    209           * @return  None
    210           **************************************************************************************************/
    211          void HalKeyInit( void )
    212          {
    213            halKeySavedKeys = 0;  // Initialize previous key to 0.
    214          
    215          #if defined ( CC2540_MINIDK )
    216            HAL_KEY_SW_1_SEL &= ~(HAL_KEY_SW_1_BIT);    /* Set pin function to GPIO */
    217            HAL_KEY_SW_1_DIR &= ~(HAL_KEY_SW_1_BIT);    /* Set pin direction to Input */
    218            HAL_KEY_SW_2_SEL &= ~(HAL_KEY_SW_2_BIT);    /* Set pin function to GPIO */
    219            HAL_KEY_SW_2_DIR &= ~(HAL_KEY_SW_2_BIT);    /* Set pin direction to Input */
    220          #else
    221            HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO ÆÕÍ¨¿Ú*/
    222            HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to InputÊäÈë */
    223            HAL_KEY_JOY_MOVE_SEL &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin function to GPIO */
    224            HAL_KEY_JOY_MOVE_DIR &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin direction to Input */
    225          
    226            P2INP |= PUSH2_BV;  /* Configure GPIO tri-state. */
    227          #endif
    228          
    229            /* Initialize callback function */
    230            pHalKeyProcessFunction  = NULL;
    231          
    232            /* Start with key is not configured */
    233            HalKeyConfigured = FALSE;
    234          
    235          #if defined ( CC2540_MINIDK )
    236            /* Rising/Falling edge configuratinn */
    237            PICTL |= HAL_KEY_SW_1_EDGEBIT;   /* Set the edge bit to set falling edge to give int */
    238            HAL_KEY_SW_1_IEN |= ( HAL_KEY_SW_1_IENBIT | HAL_KEY_SW_2_IENBIT );   /* enable CPU interrupt */
    239          #endif
    240          }
    241          
    242          
    243          /**************************************************************************************************
    244           * @fn      HalKeyConfig
    245           *
    246           * @brief   Configure the Key serivce
    247           *
    248           * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
    249           *          cback - pointer to the CallBack function
    250           *
    251           * @return  None
    252           **************************************************************************************************/
    253          void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
    254          {
    255            /* Enable/Disable Interrupt or */
    256            Hal_KeyIntEnable = interruptEnable;
    257          
    258            /* Register the callback fucntion */
    259            pHalKeyProcessFunction = cback;
    260          
    261            /* Determine if interrupt is enable or not */
    262            if (Hal_KeyIntEnable)
    263            {
    264          #if defined ( CC2540_MINIDK )
    265              HAL_KEY_SW_1_ICTL |= HAL_KEY_SW_1_ICTLBIT; /* enable interrupt generation at port */    
    266              HAL_KEY_SW_1_PXIFG = ~(HAL_KEY_SW_1_BIT);  /* Clear any pending interrupt */
    267              HAL_KEY_SW_2_ICTL |= HAL_KEY_SW_2_ICTLBIT; /* enable interrupt generation at port */
    268              HAL_KEY_SW_2_PXIFG = ~(HAL_KEY_SW_2_BIT);  /* Clear any pending interrupt */
    269          
    270          #else
    271              /* Rising/Falling edge configuratinn */
    272              PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
    273              /* For falling edge, the bit must be set. */
    274            #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
    275              PICTL |= HAL_KEY_SW_6_EDGEBIT;
    276            #endif
    277          
    278          
    279              /* Interrupt configuration:
    280               * - Enable interrupt generation at the port
    281               * - Enable CPU interrupt
    282               * - Clear any pending interrupt
    283               */
    284              HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
    285              HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
    286              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
    287          
    288              /* Rising/Falling edge configuratinn */
    289              HAL_KEY_JOY_MOVE_ICTL &= ~(HAL_KEY_JOY_MOVE_EDGEBIT);    /* Clear the edge bit */
    290              /* For falling edge, the bit must be set. */
    291            #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_FALLING_EDGE)
    292              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_EDGEBIT;
    293            #endif
    294          
    295          
    296              /* Interrupt configuration:
    297               * - Enable interrupt generation at the port
    298               * - Enable CPU interrupt
    299               * - Clear any pending interrupt
    300               */
    301              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_ICTLBIT;
    302              HAL_KEY_JOY_MOVE_IEN |= HAL_KEY_JOY_MOVE_IENBIT;
    303              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT);
    304          #endif // !CC2540_MINIDK
    305          
    306              /* Do this only after the hal_key is configured - to work with sleep stuff */
    307              if (HalKeyConfigured == TRUE)
    308              {
    309                osal_stop_timerEx(Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
    310              }
    311            }
    312            else    /* Interrupts NOT enabled */
    313            {
    314          #if defined ( CC2540_MINIDK )
    315              HAL_KEY_SW_1_ICTL &= ~(HAL_KEY_SW_1_ICTLBIT); /* don't generate interrupt */
    316              HAL_KEY_SW_2_ICTL &= ~(HAL_KEY_SW_2_ICTLBIT); /* don't generate interrupt */
    317          #else
    318              HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt */
    319              HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
    320          #endif  // !CC2540_MINIDK
    321          
    322              osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
    323            }
    324          
    325            /* Key now is configured */
    326            HalKeyConfigured = TRUE;
    327          }
    328          
    329          
    330          /**************************************************************************************************
    331           * @fn      HalKeyRead
    332           *
    333           * @brief   Read the current value of a key
    334           *
    335           * @param   None
    336           *
    337           * @return  keys - current keys status
    338           **************************************************************************************************/
    339          uint8 HalKeyRead ( void )
    340          {
    341            uint8 keys = 0;
    342          
    343          #if defined (CC2540_MINIDK)
    344            if (!(HAL_KEY_SW_1_PORT & HAL_KEY_SW_1_BIT))    /* Key is active low */
    345            {
    346              keys |= HAL_KEY_SW_1;
    347            }
    348            if (!(HAL_KEY_SW_2_PORT & HAL_KEY_SW_2_BIT))    /* Key is active low */
    349            {
    350              keys |= HAL_KEY_SW_2;
    351            }
    352          #else
    353          #ifdef HAL_BOARD_CC2530EB_REV17
    354            if ( (HAL_KEY_SW_6_PORT & HAL_KEY_SW_6_BIT))    /* Key is active high */
    355          #elif defined (HAL_BOARD_CC2530EB_REV13)
    356            if (!(HAL_KEY_SW_6_PORT & HAL_KEY_SW_6_BIT))    /* Key is active low */
    357          #endif
    358            {
    359              keys |= HAL_KEY_SW_6;
    360            }
    361          
    362            if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active low */
    363            {
    364              keys |= halGetJoyKeyInput();
    365            }
    366          #endif
    367            return keys;
    368          }
    369          
    370          
    371          /**************************************************************************************************
    372           * @fn      HalKeyPoll
    373           *
    374           * @brief   Called by hal_driver to poll the keys
    375           *
    376           * @param   None
    377           *
    378           * @return  None
    379           **************************************************************************************************/
    380          void HalKeyPoll (void)
    381          {
    382            uint8 keys = 0,sendkeys=0;
    383            uint8 notify = 0;
    384          #if defined (CC2540_MINIDK)
    385            if (!(HAL_KEY_SW_1_PORT & HAL_KEY_SW_1_BIT))    /* Key is active low */
    386            {
    387              keys |= HAL_KEY_SW_1;
    388            }
    389            if (!(HAL_KEY_SW_2_PORT & HAL_KEY_SW_2_BIT))    /* Key is active low */
    390            {
    391              keys |= HAL_KEY_SW_2;
    392            }
    393          #else
    394            if (!(HAL_KEY_SW_6_PORT & HAL_KEY_SW_6_BIT))    /* Key is active low */
    395            {
    396              keys |= HAL_KEY_SW_6;
    397            }
    398          
    399            if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active HIGH */
    400            {
    401              keys = halGetJoyKeyInput();
    402            }
    403          #endif
    404          
    405            /* If interrupts are not enabled, previous key status and current key status
    406             * are compared to find out if a key has changed status.
    407             */
    408           if (!Hal_KeyIntEnable)
    409              {
    410                if (keys == halKeySavedKeys)                                                //Èç¹ûÖÐ¶Ï¹Ø±Õ£¨ÂÖÑ¯ÖÐ£©£¬²¢ÇÒ°´¼üÊÇ±£³Ö°´ÏÂµÄ
    411                  {
    412                    
    413                    keypresslasttime++;
    414          
    415                      /* Exit - since no keys have changed */
    416                        return;
    417                  }
    418                else 
    419                  {
    420                    //µ±°´¼üµ¯ÆðÊ±£¬¿´Ò»ÏÂ°´ÏÂµÄÊ±¼ä¶à³¤£¬ÒòÎªpollingµÄÊ±¼äÊÇ100ms£¬ËùÒÔµ±keypresslasttime<5Ê±£¬·¢³ö¶Ì°´µÄÏûÏ¢£¬
    421                    if(keypresslasttime <5 && keypresslasttime!=1)
    422                      {
    423                          //keys;
    424                         sendkeys = halKeySavedKeys| HAL_KEY_SHORT;
    425                        (pHalKeyProcessFunction) ( sendkeys, HAL_KEY_STATE_NORMAL);
    426                        keypresslasttime=1;
    427                      }
    428                     else if(keypresslasttime >15)
    429                      {
    430                          
    431                         sendkeys = halKeySavedKeys| HAL_KEY_LONG;
    432                        (pHalKeyProcessFunction) ( sendkeys, HAL_KEY_STATE_NORMAL);
    433                         keypresslasttime=1;
    434                      }
    435                    notify = 1;
    436                   
    437                  }
    438              }
    439           else                                                                            
    440              {
    441                /* Key interrupt handled here */
    442                //Èç¹ûÊÇ°´¼üÖÕ¶Ë£¬Ôò¿ªÊ¼¼ÆÊ±
    443                keypresslasttime = 1;
    444                if (keys)
    445                  {
    446                    notify = 1;
    447                  }
    448                    /* Store the current keys for comparation next time */
    449              halKeySavedKeys = keys;
    450           /* Invoke Callback if new keys were depressed */
    451              if (notify && (pHalKeyProcessFunction))
    452                {
    453          
    454                      (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
    455                }
    456           
    457              }
    458          
    459          }
    460          
    461          #if !defined ( CC2540_MINIDK )
    462          /**************************************************************************************************
    463           * @fn      halGetJoyKeyInput
    464           *
    465           * @brief   Map the ADC value to its corresponding key.
    466           *
    467           * @param   None
    468           *
    469           * @return  keys - current joy key status
    470           **************************************************************************************************/
    471          uint8 halGetJoyKeyInput(void)
    472          {
    473            /* The joystick control is encoded as an analog voltage.
    474             * Read the JOY_LEVEL analog value and map it to joy movement.
    475             */
    476            uint8 adc;
    477            uint8 ksave0 = 0;
    478            uint8 ksave1;
    479          
    480            /* Keep on reading the ADC until two consecutive key decisions are the same. */
    481            do
    482            {
    483              ksave1 = ksave0;    /* save previouse key reading */
    484          
    485              adc = HalAdcRead (HAL_KEY_JOY_CHN, HAL_ADC_RESOLUTION_8);
    486          
    487              if ((adc >= 2) && (adc <= 38))
    488              {
    489                 ksave0 |= HAL_KEY_UP;
    490              }
    491              else if ((adc >= 74) && (adc <= 88))
    492              {
    493                ksave0 |= HAL_KEY_RIGHT;
    494              }
    495              else if ((adc >= 60) && (adc <= 73))
    496              {
    497                ksave0 |= HAL_KEY_LEFT;
    498              }
    499              else if ((adc >= 39) && (adc <= 59))
    500              {
    501                ksave0 |= HAL_KEY_DOWN;
    502              }
    503              else if ((adc >= 89) && (adc <= 100))
    504              {
    505                ksave0 |= HAL_KEY_CENTER;
    506              }
    507            } while (ksave0 != ksave1);
    508          
    509            return ksave0;
    510          }
    511          #endif
    512          
    513          /**************************************************************************************************
    514           * @fn      halProcessKeyInterrupt
    515           *
    516           * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
    517           *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
    518           *
    519           * @param
    520           *
    521           * @return
    522           **************************************************************************************************/
    523          void halProcessKeyInterrupt (void)
    524          {
    525            bool valid=FALSE;
    526          
    527          #if defined ( CC2540_MINIDK )
    528            if( HAL_KEY_SW_1_PXIFG & HAL_KEY_SW_1_BIT) /* Interrupt Flag has been set by SW1 */
    529            {
    530              HAL_KEY_SW_1_PXIFG = ~(HAL_KEY_SW_1_BIT); /* Clear Interrupt Flag */
    531              valid = TRUE;
    532            }
    533          
    534            if (HAL_KEY_SW_2_PXIFG & HAL_KEY_SW_2_BIT)  /* Interrupt Flag has been set by SW2 */
    535            {
    536              HAL_KEY_SW_2_PXIFG = ~(HAL_KEY_SW_2_BIT); /* Clear Interrupt Flag */
    537              valid = TRUE;
    538            }
    539          #else
    540            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
    541            {
    542              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
    543              valid = TRUE;
    544            }
    545          
    546            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)  /* Interrupt Flag has been set */
    547            {
    548              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT); /* Clear Interrupt Flag */
    549              valid = TRUE;
    550            }
    551          #endif
    552            if (valid)
    553            {
    554              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
    555            }
    556          }
    557          
    558          /**************************************************************************************************
    559           * @fn      HalKeyEnterSleep
    560           *
    561           * @brief  - Get called to enter sleep mode
    562           *
    563           * @param
    564           *
    565           * @return
    566           **************************************************************************************************/
    567          void HalKeyEnterSleep ( void )
    568          {
    569          }
    570          
    571          /**************************************************************************************************
    572           * @fn      HalKeyExitSleep
    573           *
    574           * @brief   - Get called when sleep is over
    575           *
    576           * @param
    577           *
    578           * @return  - return saved keys
    579           **************************************************************************************************/
    580          uint8 HalKeyExitSleep ( void )
    581          {
    582            /* Wake up and read keys */
    583            return ( HalKeyRead () );
    584          }
    585          
    586          /***************************************************************************************************
    587           *                                    INTERRUPT SERVICE ROUTINE
    588           ***************************************************************************************************/
    589          
    590          /**************************************************************************************************
    591           * @fn      halKeyPort0Isr
    592           *
    593           * @brief   Port0 ISR
    594           *
    595           * @param
    596           *
    597           * @return
    598           **************************************************************************************************/
    599          HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
    600          {
    601            HAL_ENTER_ISR();
    602          
    603          #if defined ( CC2540_MINIDK )
    604            if ((HAL_KEY_SW_1_PXIFG & HAL_KEY_SW_1_BIT) || (HAL_KEY_SW_2_PXIFG & HAL_KEY_SW_2_BIT))
    605          #else
    606            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
    607          #endif
    608            {
    609              halProcessKeyInterrupt();
    610            }
    611          
    612            /*
    613              Clear the CPU interrupt flag for Port_0
    614              PxIFG has to be cleared before PxIF
    615            */
    616          #if defined ( CC2540_MINIDK )
    617            HAL_KEY_SW_1_PXIFG = 0;
    618            HAL_KEY_SW_2_PXIFG = 0;
    619          #else
    620            HAL_KEY_SW_6_PXIFG = 0;
    621          #endif
    622            HAL_KEY_CPU_PORT_0_IF = 0;
    623          
    624            CLEAR_SLEEP_MODE();
    625          
    626            HAL_EXIT_ISR();
    627          
    628            return;
    629          }
    630          
    631          #if !defined ( CC2540_MINIDK )
    632          /**************************************************************************************************
    633           * @fn      halKeyPort2Isr
    634           *
    635           * @brief   Port2 ISR
    636           *
    637           * @param
    638           *
    639           * @return
    640           **************************************************************************************************/
    641          HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
    642          {
    643            HAL_ENTER_ISR();
    644          
    645            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
    646            {
    647              halProcessKeyInterrupt();
    648            }
    649          
    650            /*
    651              Clear the CPU interrupt flag for Port_2
    652              PxIFG has to be cleared before PxIF
    653              Notes: P2_1 and P2_2 are debug lines.
    654            */
    655            HAL_KEY_JOY_MOVE_PXIFG = 0;
    656            HAL_KEY_CPU_PORT_2_IF = 0;
    657          
    658            CLEAR_SLEEP_MODE();
    659          
    660            HAL_EXIT_ISR();
    661          
    662            return;
    663          }
    664          #endif
    665          #else
    666          
    667          void HalKeyInit(void){}
    668          void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
    669          uint8 HalKeyRead(void){ return 0;}
    670          void HalKeyPoll(void){}
    671          
    672          #endif
    673          /**************************************************************************************************
    674          **************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      9  HalKeyConfig
                          0 0  9 -> osal_set_event
                          0 0  9 -> osal_stop_timerEx
       0      0      0  HalKeyEnterSleep
       2      0      0  HalKeyExitSleep
                          2 0  0 -> HalKeyRead
       2      0      0  HalKeyInit
       0      0      9  HalKeyPoll
                          0 0  9 -> halGetJoyKeyInput
       0      0      9  HalKeyRead
                          0 0  9 -> halGetJoyKeyInput
       0      0     18  halGetJoyKeyInput
                          0 0  9 -> HalAdcRead
       0      0     14  halKeyPort0Isr
                          0 0 14 -> halProcessKeyInterrupt
       0      0     14  halKeyPort2Isr
                          0 0 14 -> halProcessKeyInterrupt
       2      0     18  halProcessKeyInterrupt
                          2 0  4 -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for keypresslasttime>
       6  ??HalKeyConfig?relay
       6  ??HalKeyEnterSleep?relay
       6  ??HalKeyExitSleep?relay
       6  ??HalKeyInit?relay
       6  ??HalKeyPoll?relay
       6  ??HalKeyRead?relay
       6  ??halGetJoyKeyInput?relay
       3  ??halKeyPort0Isr??INTVEC 107
       3  ??halKeyPort2Isr??INTVEC 51
       6  ??halProcessKeyInterrupt?relay
       7  ?Subroutine0
       5  ?Subroutine1
      13  ?Subroutine2
      12  ?Subroutine3
     102  HalKeyConfig
       1  HalKeyConfigured
       3  HalKeyEnterSleep
      10  HalKeyExitSleep
      34  HalKeyInit
     133  HalKeyPoll
      27  HalKeyRead
       1  Hal_KeyIntEnable
       1  IEN2
       1  P0DIR
       1  P0IEN
       1  P0IFG
       1  P0SEL
       1  P2DIR
       1  P2IEN
       1  P2IFG
       1  P2INP
       1  P2SEL
       1  PICTL
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON
       1  _A_IRCON2
       1  _A_P0
       1  _A_P2
       4  __Constant_19
      91  halGetJoyKeyInput
      28  halKeyPort0Isr
      30  halKeyPort2Isr
       1  halKeySavedKeys
      58  halProcessKeyInterrupt
       1  keypresslasttime
       2  pHalKeyProcessFunction

 
 482 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   6 bytes in segment INTVEC
  71 bytes in segment NEAR_CODE
  17 bytes in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
   4 bytes in segment XDATA_ROM_C
   5 bytes in segment XDATA_Z
 
 602 bytes of CODE  memory (+  6 bytes shared)
   0 bytes of CONST memory (+  4 bytes shared)
   0 bytes of DATA  memory (+ 17 bytes shared)
   6 bytes of XDATA memory

Errors: none
Warnings: 1
