###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             28/Feb/2014  17:04:20 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          Profiles\Batt\battservice.c                        #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\config\b #
#                          uildComponents.cfg (-DBROADCASTER_CFG=0x01         #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheralzeke\CC2541DB\buildCo #
#                          nfig.cfg (-DHOST_CONFIG=PERIPHERAL_CFG             #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          Profiles\Batt\battservice.c -D INT_HEAP_LEN=3074   #
#                          -D HALNODEBUG -D OSAL_CBTIMER_NUM_TASKS=1 -D       #
#                          HAL_AES_DMA=TRUE -D HAL_DMA=TRUE -D POWER_SAVING   #
#                          -D xPLUS_BROADCASTER -D HAL_LCD=TRUE -D            #
#                          HAL_LED=TRUE -D HAL_UART=TRUE -lcN                 #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\ -o   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\ -e    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\common\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\include\ #
#                           -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ #
#                          ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\C #
#                          omponents\hal\include\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\hal\target\CC2541EB\ -I                      #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\osal\include\ -I E:\TexasInstruments\BLE-CC2 #
#                          54x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2 #
#                          541DB\..\..\..\..\Components\services\saddr\ -I    #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\include\ -I E:\TexasInstruments\BLE-CC25 #
#                          4x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC25 #
#                          41DB\..\..\..\..\Components\ble\controller\phy\    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Co #
#                          mponents\ble\controller\include\ -I                #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\..\..\Components\ble\host\ -I               #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\common\cc25 #
#                          40\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\comm #
#                          on\npi\npi_np\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\Profiles\Roles\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Si #
#                          mpleProfile\ -I E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB\. #
#                          .\..\Profiles\DevInfo\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Ba #
#                          tt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\Prof #
#                          iles\HIDDev\ -Ohz                                  #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\batts #
#                          ervice.lst                                         #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\battse #
#                          rvice.r51                                          #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\Profiles\Batt\battservice.c
      1          /**************************************************************************************************
      2            Filename:       battservice.c
      3            Revised:        $Date $
      4            Revision:       $Revision $
      5          
      6            Description:    This file contains the Battery service.
      7          
      8            Copyright 2012-2013 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          **************************************************************************************************/
     38          
     39          /*********************************************************************
     40           * INCLUDES
     41           */
     42          #include "bcomdef.h"
     43          #include "OSAL.h"
     44          #include "hal_adc.h"
     45          #include "linkdb.h"
     46          #include "att.h"
     47          #include "gatt.h"
     48          #include "gatt_uuid.h"
     49          #include "gatt_profile_uuid.h"
     50          #include "gattservapp.h"
     51          #include "hiddev.h"
     52          #include "hal_lcd.h"
     53          #include "battservice.h"
     54          
     55          /*********************************************************************
     56           * MACROS
     57           */
     58          
     59          /*********************************************************************
     60           * CONSTANTS
     61           */
     62          
     63          // ADC voltage levels
     64          #define BATT_ADC_LEVEL_3V           409
     65          #define BATT_ADC_LEVEL_2V           273
     66          
     67          #define BATT_LEVEL_VALUE_IDX        2 // Position of battery level in attribute array
     68          #define BATT_LEVEL_VALUE_CCCD_IDX   3 // Position of battery level CCCD in attribute array
     69          
     70          /*********************************************************************
     71           * TYPEDEFS
     72           */
     73          
     74          /*********************************************************************
     75           * GLOBAL VARIABLES
     76           */
     77          // Battery service
     78          CONST uint8 battServUUID[ATT_BT_UUID_SIZE] =
     79          {
     80            LO_UINT16(BATT_SERV_UUID), HI_UINT16(BATT_SERV_UUID)
     81          };
     82          
     83          // Battery level characteristic
     84          CONST uint8 battLevelUUID[ATT_BT_UUID_SIZE] =
     85          {
     86            LO_UINT16(BATT_LEVEL_UUID), HI_UINT16(BATT_LEVEL_UUID)
     87          };
     88          
     89          /*********************************************************************
     90           * EXTERNAL VARIABLES
     91           */
     92          
     93          /*********************************************************************
     94           * EXTERNAL FUNCTIONS
     95           */
     96          
     97          /*********************************************************************
     98           * LOCAL VARIABLES
     99           */
    100          
    101          // Application callback
    102          static battServiceCB_t battServiceCB;
    103          
    104          // Measurement setup callback
    105          static battServiceSetupCB_t battServiceSetupCB = NULL;
    106          
    107          // Measurement teardown callback
    108          static battServiceTeardownCB_t battServiceTeardownCB = NULL;
    109          
    110          // Measurement calculation callback
    111          static battServiceCalcCB_t battServiceCalcCB = NULL;
    112          
    113          static uint16 battMinLevel = BATT_ADC_LEVEL_2V; // For VDD/3 measurements
    114          static uint16 battMaxLevel = BATT_ADC_LEVEL_3V; // For VDD/3 measurements
    115          
    116          // Critical battery level setting
    117          static uint8 battCriticalLevel;
    118          
    119          // ADC channel to be used for reading
    120          static uint8 battServiceAdcCh = HAL_ADC_CHANNEL_VDD;
    121          
    122          /*********************************************************************
    123           * Profile Attributes - variables
    124           */
    125          
    126          // Battery Service attribute
    127          static CONST gattAttrType_t battService = { ATT_BT_UUID_SIZE, battServUUID };
    128          
    129          // Battery level characteristic
    130          static uint8 battLevelProps = GATT_PROP_READ | GATT_PROP_NOTIFY;
    131          static uint8 battLevel = 100;
    132          static gattCharCfg_t battLevelClientCharCfg[GATT_MAX_NUM_CONN];
    133          
    134          // HID Report Reference characteristic descriptor, battery level
    135          static uint8 hidReportRefBattLevel[HID_REPORT_REF_LEN] =
    136                       { HID_RPT_ID_BATT_LEVEL_IN, HID_REPORT_TYPE_INPUT };
    137          
    138          /*********************************************************************
    139           * Profile Attributes - Table
    140           */
    141          
    142          static gattAttribute_t battAttrTbl[] =
    143          {
    144            // Battery Service
    145            {
    146              { ATT_BT_UUID_SIZE, primaryServiceUUID }, /* type */
    147              GATT_PERMIT_READ,                         /* permissions */
    148              0,                                        /* handle */
    149              (uint8 *)&battService                     /* pValue */
    150            },
    151          
    152              // Battery Level Declaration
    153              {
    154                { ATT_BT_UUID_SIZE, characterUUID },
    155                GATT_PERMIT_READ,
    156                0,
    157                &battLevelProps
    158              },
    159          
    160                // Battery Level Value
    161                {
    162                  { ATT_BT_UUID_SIZE, battLevelUUID },
    163                  GATT_PERMIT_READ,
    164                  0,
    165                  &battLevel
    166                },
    167          
    168                // Battery Level Client Characteristic Configuration
    169                {
    170                  { ATT_BT_UUID_SIZE, clientCharCfgUUID },
    171                  GATT_PERMIT_READ | GATT_PERMIT_WRITE,
    172                  0,
    173                  (uint8 *) &battLevelClientCharCfg
    174                },
    175          
    176                // HID Report Reference characteristic descriptor, batter level input
    177                {
    178                  { ATT_BT_UUID_SIZE, reportRefUUID },
    179                  GATT_PERMIT_READ,
    180                  0,
    181                  hidReportRefBattLevel
    182                }
    183          };
    184          
    185          
    186          /*********************************************************************
    187           * LOCAL FUNCTIONS
    188           */
    189          static uint8 battReadAttrCB( uint16 connHandle, gattAttribute_t *pAttr,
    190                                       uint8 *pValue, uint8 *pLen, uint16 offset, uint8 maxLen );
    191          static bStatus_t battWriteAttrCB( uint16 connHandle, gattAttribute_t *pAttr,
    192                                            uint8 *pValue, uint8 len, uint16 offset );
    193          static void battNotifyCB( linkDBItem_t *pLinkItem );
    194          static uint8 battMeasure( void );
    195          static void battNotifyLevel( void );
    196          
    197          /*********************************************************************
    198           * PROFILE CALLBACKS
    199           */
    200          // Battery Service Callbacks
    201          CONST gattServiceCBs_t battCBs =
    202          {
    203            battReadAttrCB,  // Read callback function pointer
    204            battWriteAttrCB, // Write callback function pointer
    205            NULL             // Authorization callback function pointer
    206          };
    207          
    208          /*********************************************************************
    209           * PUBLIC FUNCTIONS
    210           */
    211          
    212          /*********************************************************************
    213           * @fn      Batt_AddService
    214           *
    215           * @brief   Initializes the Battery Service by registering
    216           *          GATT attributes with the GATT server.
    217           *
    218           * @return  Success or Failure
    219           */
    220          bStatus_t Batt_AddService( void )
    221          {
    222            uint8 status = SUCCESS;
    223          
    224            // Initialize Client Characteristic Configuration attributes
    225            GATTServApp_InitCharCfg( INVALID_CONNHANDLE, battLevelClientCharCfg );
    226          
    227            // Register GATT attribute list and CBs with GATT Server App
    228            status = GATTServApp_RegisterService( battAttrTbl,
    229                                                  GATT_NUM_ATTRS( battAttrTbl ),
    230                                                  &battCBs );
    231          
    232            return ( status );
    233          }
    234          
    235          /*********************************************************************
    236           * @fn      Batt_Register
    237           *
    238           * @brief   Register a callback function with the Battery Service.
    239           *
    240           * @param   pfnServiceCB - Callback function.
    241           *
    242           * @return  None.
    243           */
    244          extern void Batt_Register( battServiceCB_t pfnServiceCB )
    245          {
    246            battServiceCB = pfnServiceCB;
    247          }
    248          
    249          /*********************************************************************
    250           * @fn      Batt_SetParameter
    251           *
    252           * @brief   Set a Battery Service parameter.
    253           *
    254           * @param   param - Profile parameter ID
    255           * @param   len - length of data to right
    256           * @param   value - pointer to data to write.  This is dependent on
    257           *          the parameter ID and WILL be cast to the appropriate
    258           *          data type (example: data type of uint16 will be cast to
    259           *          uint16 pointer).
    260           *
    261           * @return  bStatus_t
    262           */
    263          bStatus_t Batt_SetParameter( uint8 param, uint8 len, void *value )
    264          {
    265            bStatus_t ret = SUCCESS;
    266          
    267            switch ( param )
    268            {
    269              case BATT_PARAM_CRITICAL_LEVEL:
    270                battCriticalLevel = *((uint8*)value);
    271          
    272                // If below the critical level and critical state not set, notify it
    273                if ( battLevel < battCriticalLevel )
    274                {
    275                  battNotifyLevel();
    276                }
    277                break;
    278          
    279              default:
    280                ret = INVALIDPARAMETER;
    281                break;
    282            }
    283          
    284            return ( ret );
    285          }
    286          
    287          /*********************************************************************
    288           * @fn      Batt_GetParameter
    289           *
    290           * @brief   Get a Battery Service parameter.
    291           *
    292           * @param   param - Profile parameter ID
    293           * @param   value - pointer to data to get.  This is dependent on
    294           *          the parameter ID and WILL be cast to the appropriate
    295           *          data type (example: data type of uint16 will be cast to
    296           *          uint16 pointer).
    297           *
    298           * @return  bStatus_t
    299           */
    300          bStatus_t Batt_GetParameter( uint8 param, void *value )
    301          {
    302            bStatus_t ret = SUCCESS;
    303            switch ( param )
    304            {
    305              case BATT_PARAM_LEVEL:
    306                *((uint8*)value) = battLevel;
    307                break;
    308          
    309              case BATT_PARAM_CRITICAL_LEVEL:
    310                *((uint8*)value) = battCriticalLevel;
    311                break;
    312          
    313              case BATT_PARAM_SERVICE_HANDLE:
    314                *((uint16*)value) = GATT_SERVICE_HANDLE( battAttrTbl );
    315                break;
    316          
    317              case BATT_PARAM_BATT_LEVEL_IN_REPORT:
    318                {
    319                  hidRptMap_t *pRpt = (hidRptMap_t *)value;
    320          
    321                  pRpt->id = hidReportRefBattLevel[0];
    322                  pRpt->type = hidReportRefBattLevel[1];
    323                  pRpt->handle = battAttrTbl[BATT_LEVEL_VALUE_IDX].handle;
    324                  pRpt->cccdHandle = battAttrTbl[BATT_LEVEL_VALUE_CCCD_IDX].handle;
    325                  pRpt->mode = HID_PROTOCOL_MODE_REPORT;
    326                }
    327                break;
    328          
    329              default:
    330                ret = INVALIDPARAMETER;
    331                break;
    332            }
    333          
    334            return ( ret );
    335          }
    336          
    337          /*********************************************************************
    338           * @fn          Batt_MeasLevel
    339           *
    340           * @brief       Measure the battery level and update the battery
    341           *              level value in the service characteristics.  If
    342           *              the battery level-state characteristic is configured
    343           *              for notification and the battery level has changed
    344           *              since the last measurement, then a notification
    345           *              will be sent.
    346           *
    347           * @return      Success
    348           */
    349          bStatus_t Batt_MeasLevel( void )
    350          {
    351            uint8 level;
    352          HalLcdWriteString("now  start batt..", HAL_LCD_LINE_4);
    353            level = battMeasure();
    354          HalLcdWriteStringValue("batt_lebel:", level, 10, HAL_LCD_LINE_5);
    355            // If level has gone down
    356            if (level < battLevel)
    357            {
    358              // Update level
    359              battLevel = level;
    360          
    361              // Send a notification
    362              battNotifyLevel();
    363            }
    364          
    365            return SUCCESS;
    366          }
    367          
    368          /*********************************************************************
    369           * @fn      Batt_Setup
    370           *
    371           * @brief   Set up which ADC source is to be used. Defaults to VDD/3.
    372           *
    373           * @param   adc_ch - ADC Channel, e.g. HAL_ADC_CHN_AIN6
    374           * @param   minVal - max battery level
    375           * @param   maxVal - min battery level
    376           * @param   sCB - HW setup callback
    377           * @param   tCB - HW tear down callback
    378           * @param   cCB - percentage calculation callback
    379           *
    380           * @return  none.
    381           */
    382          void Batt_Setup( uint8 adc_ch, uint16 minVal, uint16 maxVal,
    383                           battServiceSetupCB_t sCB, battServiceTeardownCB_t tCB,
    384                           battServiceCalcCB_t cCB )
    385          {
    386            battServiceAdcCh = adc_ch;
    387            battMinLevel = minVal;
    388            battMaxLevel = maxVal;
    389          
    390            battServiceSetupCB = sCB;
    391            battServiceTeardownCB = tCB;
    392            battServiceCalcCB = cCB;
    393          }
    394          
    395          /*********************************************************************
    396           * @fn          battReadAttrCB
    397           *
    398           * @brief       Read an attribute.
    399           *
    400           * @param       connHandle - connection message was received on
    401           * @param       pAttr - pointer to attribute
    402           * @param       pValue - pointer to data to be read
    403           * @param       pLen - length of data to be read
    404           * @param       offset - offset of the first octet to be read
    405           * @param       maxLen - maximum length of data to be read
    406           *
    407           * @return      Success or Failure
    408           */
    409          static uint8 battReadAttrCB( uint16 connHandle, gattAttribute_t *pAttr,
    410                                       uint8 *pValue, uint8 *pLen, uint16 offset, uint8 maxLen )
    411          {
    412            bStatus_t status = SUCCESS;
    413          
    414            // Make sure it's not a blob operation (no attributes in the profile are long)
    415            if ( offset > 0 )
    416            {
    417              return ( ATT_ERR_ATTR_NOT_LONG );
    418            }
    419          
    420            uint16 uuid = BUILD_UINT16( pAttr->type.uuid[0], pAttr->type.uuid[1] );
    421          
    422            // Measure battery level if reading level
    423            if ( uuid == BATT_LEVEL_UUID )
    424            {
    425              uint8 level;
    426          
    427              level = battMeasure();
    428          
    429              // If level has gone down
    430              if (level < battLevel)
    431              {
    432                // Update level
    433                battLevel = level;
    434              }
    435          
    436              *pLen = 1;
    437              pValue[0] = battLevel;
    438            }
    439            else if ( uuid == GATT_REPORT_REF_UUID )
    440            {
    441              *pLen = HID_REPORT_REF_LEN;
    442              osal_memcpy( pValue, pAttr->pValue, HID_REPORT_REF_LEN );
    443            }
    444            else
    445            {
    446              status = ATT_ERR_ATTR_NOT_FOUND;
    447            }
    448          
    449            return ( status );
    450          }
    451          
    452          /*********************************************************************
    453           * @fn      battWriteAttrCB
    454           *
    455           * @brief   Validate attribute data prior to a write operation
    456           *
    457           * @param   connHandle - connection message was received on
    458           * @param   pAttr - pointer to attribute
    459           * @param   pValue - pointer to data to be written
    460           * @param   len - length of data
    461           * @param   offset - offset of the first octet to be written
    462           *
    463           * @return  Success or Failure
    464           */
    465          static bStatus_t battWriteAttrCB( uint16 connHandle, gattAttribute_t *pAttr,
    466                                            uint8 *pValue, uint8 len, uint16 offset )
    467          {
    468            bStatus_t status = SUCCESS;
    469          
    470            uint16 uuid = BUILD_UINT16( pAttr->type.uuid[0], pAttr->type.uuid[1]);
    471            switch ( uuid )
    472            {
    473              case GATT_CLIENT_CHAR_CFG_UUID:
    474                status = GATTServApp_ProcessCCCWriteReq( connHandle, pAttr, pValue, len,
    475                                                         offset, GATT_CLIENT_CFG_NOTIFY );
    476                if ( status == SUCCESS )
    477                {
    478                  uint16 charCfg = BUILD_UINT16( pValue[0], pValue[1] );
    479          
    480                  if ( battServiceCB )
    481                  {
    482                    (*battServiceCB)( (charCfg == GATT_CFG_NO_OPERATION) ?
    483                                      BATT_LEVEL_NOTI_DISABLED :
    484                                      BATT_LEVEL_NOTI_ENABLED);
    485                  }
    486                }
    487                break;
    488          
    489              default:
    490                status = ATT_ERR_ATTR_NOT_FOUND;
    491                break;
    492            }
    493          
    494            return ( status );
    495          }
    496          
    497          /*********************************************************************
    498           * @fn          battNotifyCB
    499           *
    500           * @brief       Send a notification of the level state characteristic.
    501           *
    502           * @param       connHandle - linkDB item
    503           *
    504           * @return      None.
    505           */
    506          static void battNotifyCB( linkDBItem_t *pLinkItem )
    507          {
    508            if ( pLinkItem->stateFlags & LINK_CONNECTED )
    509            {
    510              uint16 value = GATTServApp_ReadCharCfg( pLinkItem->connectionHandle,
    511                                                      battLevelClientCharCfg );
    512              if ( value & GATT_CLIENT_CFG_NOTIFY )
    513              {
    514                attHandleValueNoti_t noti;
    515          
    516                noti.handle = battAttrTbl[BATT_LEVEL_VALUE_IDX].handle;
    517                noti.len = 1;
    518                noti.value[0] = battLevel;
    519          
    520                GATT_Notification( pLinkItem->connectionHandle, &noti, FALSE );
    521              }
    522            }
    523          }
    524          
    525          /*********************************************************************
    526           * @fn      battMeasure
    527           *
    528           * @brief   Measure the battery level with the ADC and return
    529           *          it as a percentage 0-100%.
    530           *
    531           * @return  Battery level.
    532           */
    533          static uint8 battMeasure( void )
    534          {
    535            uint16 adc;
    536            uint8 percent;
    537          
    538            /**
    539             * Battery level conversion from ADC to a percentage:
    540             *
    541             * The maximum ADC value for the battery voltage level is 511 for a
    542             * 10-bit conversion.  The ADC value is references vs. 1.25v and
    543             * this maximum value corresponds to a voltage of 3.75v.
    544             *
    545             * For a coin cell battery 3.0v = 100%.  The minimum operating
    546             * voltage of the CC2540 is 2.0v so 2.0v = 0%.
    547             *
    548             * To convert a voltage to an ADC value use:
    549             *
    550             *   (v/3)/1.25 * 511 = adc
    551             *
    552             * 3.0v = 409 ADC
    553             * 2.0v = 273 ADC
    554             *
    555             * We need to map ADC values from 409-273 to 100%-0%.
    556             *
    557             * Normalize the ADC values to zero:
    558             *
    559             * 409 - 273 = 136
    560             *
    561             * And convert ADC range to percentage range:
    562             *
    563             * percent/adc = 100/136 = 25/34
    564             *
    565             * Resulting in the final equation, with round:
    566             *
    567             * percent = ((adc - 273) * 25) + 33 / 34
    568             */
    569          
    570            // Call measurement setup callback
    571            if (battServiceSetupCB != NULL)
    572            {
    573              battServiceSetupCB();
    574            }
    575          
    576            // Configure ADC and perform a read
    577            HalAdcSetReference( HAL_ADC_REF_125V );
    578            adc = HalAdcRead( battServiceAdcCh, HAL_ADC_RESOLUTION_10 );
    579          
    580            // Call measurement teardown callback
    581            if (battServiceTeardownCB != NULL)
    582            {
    583              battServiceTeardownCB();
    584            }
    585          
    586            if (adc >= battMaxLevel)
    587            {
    588              percent = 100;
    589            }
    590            else if (adc <= battMinLevel)
    591            {
    592              percent = 0;
    593            }
    594            else
    595            {
    596              if (battServiceCalcCB != NULL)
    597              {
    598                percent = battServiceCalcCB(adc);
    599              }
    600              else
    601              {
    602                uint16 range =  battMaxLevel - battMinLevel + 1;
    603          
    604                // optional if you want to keep it even, otherwise just take floor of divide
    605                // range += (range & 1);
    606                range >>= 2; // divide by 4
    607          
    608                percent = (uint8) ((((adc - battMinLevel) * 25) + (range - 1)) / range);
    609              }
    610            }
    611          
    612            return percent;
    613          }
    614          
    615          /*********************************************************************
    616           * @fn      battNotifyLevelState
    617           *
    618           * @brief   Send a notification of the battery level state
    619           *          characteristic if a connection is established.
    620           *
    621           * @return  None.
    622           */
    623          static void battNotifyLevel( void )
    624          {
    625            // Execute linkDB callback to send notification
    626            linkDB_PerformFunc( battNotifyCB );
    627          }
    628          
    629          /*********************************************************************
    630           * @fn          Batt_HandleConnStatusCB
    631           *
    632           * @brief       Battery Service link status change handler function.
    633           *
    634           * @param       connHandle - connection handle
    635           * @param       changeType - type of change
    636           *
    637           * @return      none
    638           */
    639          void Batt_HandleConnStatusCB( uint16 connHandle, uint8 changeType )
    640          {
    641            // Make sure this is not loopback connection
    642            if ( connHandle != LOOPBACK_CONNHANDLE )
    643            {
    644              // Reset Client Char Config if connection has dropped
    645              if ( ( changeType == LINKDB_STATUS_UPDATE_REMOVED )      ||
    646                   ( ( changeType == LINKDB_STATUS_UPDATE_STATEFLAGS ) &&
    647                     ( !linkDB_Up( connHandle ) ) ) )
    648              {
    649                GATTServApp_InitCharCfg( connHandle, battLevelClientCharCfg );
    650              }
    651            }
    652          }
    653          
    654          
    655          /*********************************************************************
    656          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     12  Batt_AddService
                          0 0 10 -> GATTServApp_InitCharCfg
                          0 0 12 -> GATTServApp_RegisterService
       1      0      9  Batt_GetParameter
       0      0      9  Batt_HandleConnStatusCB
                          0 0  9 -> GATTServApp_InitCharCfg
                          0 0  9 -> linkDB_State
       0      0     11  Batt_MeasLevel
                          0 0 10 -> HalLcdWriteString
                          0 0 11 -> HalLcdWriteStringValue
                          0 0 10 -> battMeasure
                          0 0 10 -> linkDB_PerformFunc
       2      0      0  Batt_Register
       0      0      9  Batt_SetParameter
                          0 0  9 -> linkDB_PerformFunc
       0      0     18  Batt_Setup
       2      0     21  battMeasure
                          0 0 10 -> HalAdcRead
                          0 0 10 -> HalAdcSetReference
       1      0     32  battNotifyCB
                          0 0 32 -> GATTServApp_ReadCharCfg
                          0 0 32 -> GATT_Notification
       1      0     19  battReadAttrCB
                          0 0 11 -> battMeasure
                          0 0 13 -> osal_memcpy
       0      0     24  battWriteAttrCB
                          0 0 20 -> GATTServApp_ProcessCCCWriteReq


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "batt_lebel:">
      18  ?<Constant "now  start batt..">
      40  ?<Initializer for battAttrTbl>
       1  ?<Initializer for battLevel>
       1  ?<Initializer for battLevelProps>
       2  ?<Initializer for battMaxLevel>
       2  ?<Initializer for battMinLevel>
       1  ?<Initializer for battServiceAdcCh>
       2  ?<Initializer for hidReportRefBattLevel>
       6  ??Batt_AddService?relay
       6  ??Batt_GetParameter?relay
       6  ??Batt_HandleConnStatusCB?relay
       6  ??Batt_MeasLevel?relay
       6  ??Batt_Register?relay
       6  ??Batt_SetParameter?relay
       6  ??Batt_Setup?relay
       5  ??Subroutine10_0
       4  ??Subroutine9_0
       6  ??battMeasure?relay
       6  ??battNotifyCB?relay
       6  ??battReadAttrCB?relay
       6  ??battWriteAttrCB?relay
       5  ?Subroutine0
       1  ?Subroutine1
       6  ?Subroutine2
      12  ?Subroutine3
      14  ?Subroutine4
       3  ?Subroutine5
      10  ?Subroutine6
       6  ?Subroutine7
       6  ?Subroutine8
      43  Batt_AddService
     104  Batt_GetParameter
      55  Batt_HandleConnStatusCB
      71  Batt_MeasLevel
      19  Batt_Register
      47  Batt_SetParameter
      97  Batt_Setup
      40  battAttrTbl
       6  battCBs
       1  battCriticalLevel
       1  battLevel
       6  battLevelClientCharCfg
       1  battLevelProps
       2  battLevelUUID
       2  battMaxLevel
     193  battMeasure
       2  battMinLevel
     118  battNotifyCB
     171  battReadAttrCB
       2  battServUUID
       3  battService
       1  battServiceAdcCh
       2  battServiceCB
       2  battServiceCalcCB
       2  battServiceSetupCB
       2  battServiceTeardownCB
     135  battWriteAttrCB
       2  hidReportRefBattLevel

 
 1 125 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
    49 bytes in segment XDATA_I
    49 bytes in segment XDATA_ID
    43 bytes in segment XDATA_ROM_C
    15 bytes in segment XDATA_Z
 
 1 240 bytes of CODE  memory
    43 bytes of CONST memory
    64 bytes of XDATA memory

Errors: none
Warnings: 1
