###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             26/Mar/2014  11:07:07 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          common\cc2540\OnBoard.c                            #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\config\build #
#                          Components.cfg (-DBROADCASTER_CFG=0x01             #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\buildConfig #
#                          .cfg (-DHOST_CONFIG=PERIPHERAL_CFG                 #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          common\cc2540\OnBoard.c -D INT_HEAP_LEN=3074 -D    #
#                          HALNODEBUG -D OSAL_CBTIMER_NUM_TASKS=1 -D          #
#                          xHAL_AES_DMA=TRUE -D HAL_DMA=TRUE -D POWER_SAVING  #
#                          -D xPLUS_BROADCASTER -D HAL_LCD=TRUE -D            #
#                          HAL_LED=TRUE -D HAL_UART=TRUE -D HAL_ADC=TRUE      #
#                          -lcN E:\TexasInstruments\BLE-CC254x-1.4.0\Projects #
#                          \ble\SimpleBLEPeripheral\CC2541DB\CC2541\List\ -o  #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\ -I   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\include\ -I     #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\hal\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\hal\target\CC2541EB\ -I        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\osal\include\ -I E:\TexasInstruments\BLE-CC254x- #
#                          1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\.. #
#                          \..\..\..\Components\services\saddr\ -I            #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\ble\controller\phy\ -I         #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\controller\include\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\. #
#                          .\..\Components\ble\host\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\common\cc2540\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\npi\n #
#                          pi_np\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profi #
#                          les\Roles\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\P #
#                          rofiles\SimpleProfile\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\Profiles\DevInf #
#                          o\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Project #
#                          s\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profiles\ #
#                          Batt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Proj #
#                          ects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profil #
#                          es\HIDDev\ -Ohz                                    #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\OnBoard.l #
#                          st                                                 #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\OnBoard.r5 #
#                          1                                                  #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\common\cc2540\OnBoard.c
      1          /**************************************************************************************************
      2            Filename:       OnBoard.c
      3            Revised:        $Date: 2008-03-18 15:14:17 -0700 (Tue, 18 Mar 2008) $
      4            Revision:       $Revision: 16604 $
      5          
      6            Description:    This file contains the UI and control for the
      7                            peripherals on the EVAL development board
      8            Notes:          This file targets the Chipcon CC2430DB/CC2430EB
      9          
     10          
     11            Copyright 2005-2013 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          #include "bcomdef.h"
     46          #include "OnBoard.h"
     47          #include "OSAL.h"
     48          #include "OnBoard.h"
     49          
     50          #include "hal_led.h"
     51          #include "hal_key.h"
     52          
     53          
     54          /*********************************************************************
     55           * MACROS
     56           */
     57          
     58          /*********************************************************************
     59           * CONSTANTS
     60           */
     61          
     62          // Task ID not initialized
     63          #define NO_TASK_ID 0xFF
     64          
     65          
     66          /*********************************************************************
     67           * TYPEDEFS
     68           */
     69          
     70          /*********************************************************************
     71           * GLOBAL VARIABLES
     72           */
     73          uint8 OnboardKeyIntEnable;
     74          
     75          
     76          /*********************************************************************
     77           * EXTERNAL VARIABLES
     78           */
     79          
     80          /*********************************************************************
     81           * EXTERNAL FUNCTIONS
     82           */
     83          extern uint8 LL_PseudoRand( uint8 *randData, uint8 dataLen );
     84          
     85          #if   defined FEATURE_ABL
     86          #include "..\..\util\ABL\app\sbl_app.c"
     87          #elif defined FEATURE_SBL
     88          #include "..\..\util\SBL\app\sbl_app.c"
     89          #elif defined FEATURE_EBL
     90          #include "..\..\util\EBL\app\sbl_app.c"
     91          #elif defined FEATURE_UBL_MSD
     92          #include "..\..\util\UBL\soc_8051\usb_msd\app\ubl_app.c"
     93          #else
     94          void appForceBoot(void);
     95          #endif
     96          
     97          /*********************************************************************
     98           * LOCAL VARIABLES
     99           */
    100          
    101          // Registered keys task ID, initialized to NOT USED.
    102          static uint8 registeredKeysTaskID = NO_TASK_ID;
    103          
    104          /*********************************************************************
    105           * @fn      InitBoard()
    106           * @brief   Initialize the CC2540DB Board Peripherals
    107           * @param   level: COLD,WARM,READY
    108           * @return  None
    109           */
    110          void InitBoard( uint8 level )
    111          {
    112            if ( level == OB_COLD )
    113            {
    114              // Interrupts off
    115              osal_int_disable( INTS_ALL );
    116              // Turn all LEDs off
    117              HalLedSet( HAL_LED_ALL, HAL_LED_MODE_OFF );
    118              // Check for Brown-Out reset
    119          //    ChkReset();
    120            }
    121            else  // !OB_COLD
    122            {
    123              /* Initialize Key stuff */
    124              OnboardKeyIntEnable = HAL_KEY_INTERRUPT_ENABLE;
    125              HalKeyConfig( OnboardKeyIntEnable, OnBoard_KeyCallback);
    126            }
    127          }
    128          
    129          /*********************************************************************
    130           * @fn        Onboard_rand
    131           *
    132           * @brief    Random number generator
    133           *
    134           * @param   none
    135           *
    136           * @return  uint16 - new random number
    137           *
    138           *********************************************************************/
    139          uint16 Onboard_rand( void )
    140          {
    141            uint16 randNum;
    142          
    143            LL_PseudoRand( (uint8 *)&randNum, 2 );
    144          
    145            return ( randNum );
    146          }
    147          
    148          /*********************************************************************
    149           * @fn      _itoa
    150           *
    151           * @brief   convert a 16bit number to ASCII
    152           *
    153           * @param   num -
    154           *          buf -
    155           *          radix -
    156           *
    157           * @return  void
    158           *
    159           *********************************************************************/
    160          void _itoa(uint16 num, uint8 *buf, uint8 radix)
    161          {
    162            char c,i;
    163            uint8 *p, rst[5];
    164          
    165            p = rst;
    166            for ( i=0; i<5; i++,p++ )
    167            {
    168              c = num % radix;  // Isolate a digit
    169              *p = c + (( c < 10 ) ? '0' : '7');  // Convert to Ascii
    170              num /= radix;
    171              if ( !num )
    172                break;
    173            }
    174          
    175            for ( c=0 ; c<=i; c++ )
    176              *buf++ = *p--;  // Reverse character order
    177          
    178            *buf = '\0';
    179          }
    180          
    181          /*********************************************************************
    182           *                        "Keyboard" Support
    183           *********************************************************************/
    184          
    185          /*********************************************************************
    186           * Keyboard Register function
    187           *
    188           * The keyboard handler is setup to send all keyboard changes to
    189           * one task (if a task is registered).
    190           *
    191           * If a task registers, it will get all the keys. You can change this
    192           * to register for individual keys.
    193           *********************************************************************/
    194          uint8 RegisterForKeys( uint8 task_id )
    195          {
    196            // Allow only the first task
    197            if ( registeredKeysTaskID == NO_TASK_ID )
    198            {
    199              registeredKeysTaskID = task_id;
    200              return ( true );
    201            }
    202            else
    203              return ( false );
    204          }
    205          
    206          /*********************************************************************
    207           * @fn      OnBoard_SendKeys
    208           *
    209           * @brief   Send "Key Pressed" message to application.
    210           *
    211           * @param   keys  - keys that were pressed
    212           *          state - shifted
    213           *
    214           * @return  status
    215           *********************************************************************/
    216          uint8 OnBoard_SendKeys( uint8 keys, uint8 state )
    217          {
    218            keyChange_t *msgPtr;
    219          
    220            if ( registeredKeysTaskID != NO_TASK_ID )
    221            {
    222              // Send the address to the task
    223              msgPtr = (keyChange_t *)osal_msg_allocate( sizeof(keyChange_t) );
    224              if ( msgPtr )
    225              {
    226                msgPtr->hdr.event = KEY_CHANGE;
    227                msgPtr->state = state;
    228                msgPtr->keys = keys;
    229          
    230                osal_msg_send( registeredKeysTaskID, (uint8 *)msgPtr );
    231              }
    232              return ( SUCCESS );
    233            }
    234            else
    235              return ( FAILURE );
    236          }
    237          
    238          /*********************************************************************
    239           * @fn      OnBoard_KeyCallback
    240           *
    241           * @brief   Callback service for keys
    242           *
    243           * @param   keys  - keys that were pressed
    244           *          state - shifted
    245           *
    246           * @return  void
    247           *********************************************************************/
    248          void OnBoard_KeyCallback ( uint8 keys, uint8 state )
    249          {
    250            uint8 shift;
    251            (void)state;
    252          
    253            // shift key (S1) is used to generate key interrupt
    254            // applications should not use S1 when key interrupt is enabled
    255            shift = (OnboardKeyIntEnable == HAL_KEY_INTERRUPT_ENABLE) ? false : ((keys & HAL_KEY_SW_6) ? true : false);
    256          
    257            if ( OnBoard_SendKeys( keys, shift ) != SUCCESS )
    258            {
    259              // Process SW1 here
    260              if ( keys & HAL_KEY_SW_1 )  // Switch 1
    261              {
    262              }
    263              // Process SW2 here
    264              if ( keys & HAL_KEY_SW_2 )  // Switch 2
    265              {
    266              }
    267              // Process SW3 here
    268              if ( keys & HAL_KEY_SW_3 )  // Switch 3
    269              {
    270              }
    271              // Process SW4 here
    272              if ( keys & HAL_KEY_SW_4 )  // Switch 4
    273              {
    274              }
    275              // Process SW5 here
    276              if ( keys & HAL_KEY_SW_5 )  // Switch 5
    277              {
    278              }
    279              // Process SW6 here
    280              if ( keys & HAL_KEY_SW_6 )  // Switch 6
    281              {
    282              }
    283            }
    284          
    285            /* If any key is currently pressed down and interrupt
    286               is still enabled, disable interrupt and switch to polling */
    287            if( keys == 0x04 )////////////////////////////////////////////key!=0
    288            {
    289              if( OnboardKeyIntEnable == HAL_KEY_INTERRUPT_ENABLE )
    290              {
    291                OnboardKeyIntEnable = HAL_KEY_INTERRUPT_DISABLE;
    292                HalKeyConfig( OnboardKeyIntEnable, OnBoard_KeyCallback);
    293              }
    294            }
    295            /* If no key is currently pressed down and interrupt
    296               is disabled, enable interrupt and turn off polling */
    297            else 
    298            {
    299              if( OnboardKeyIntEnable == HAL_KEY_INTERRUPT_DISABLE )
    300              {
    301                OnboardKeyIntEnable = HAL_KEY_INTERRUPT_ENABLE;
    302                HalKeyConfig( OnboardKeyIntEnable, OnBoard_KeyCallback);
    303              }
    304            }
    305          }
    306          
    307          /*********************************************************************
    308           * @fn      Onboard_soft_reset
    309           *
    310           * @brief   Effect a soft reset.
    311           *
    312           * @param   none
    313           *
    314           * @return  none
    315           *
    316           *********************************************************************/
    317          __near_func void Onboard_soft_reset( void )
    318          {
    319            HAL_DISABLE_INTERRUPTS();
    320            asm("LJMP 0x0");
    321          }
    322          
    323          #if   defined FEATURE_ABL
    324          #elif defined FEATURE_SBL
    325          #elif defined FEATURE_EBL
    326          #elif defined FEATURE_UBL_MSD
    327          #else
    328          /*********************************************************************
    329           * @fn      appForceBoot
    330           *
    331           * @brief   Common force-boot function for the HCI library to invoke.
    332           *
    333           * @param   none
    334           *
    335           * @return  void
    336           *********************************************************************/
    337          void appForceBoot(void)
    338          {
    339            // Dummy function for HCI library that cannot depend on the SBL build defines.
    340          }
    341          #endif
    342          
    343          /*********************************************************************
    344          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      9  InitBoard
                          0 0  9 -> HalKeyConfig
                          0 0  9 -> HalLedSet
                          0 0  9 -> osal_int_disable
       0      0      9  OnBoard_KeyCallback
                          0 0  9 -> HalKeyConfig
                          0 0  9 -> OnBoard_SendKeys
       1      0     19  OnBoard_SendKeys
                          0 0 10 -> osal_msg_allocate
                          0 0 10 -> osal_msg_send
       2      0      2  Onboard_rand
                          2 0  2 -> LL_PseudoRand
       0      0      0  Onboard_soft_reset
       2      0      0  RegisterForKeys
       1      0     21  _itoa
       0      0      0  appForceBoot


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for registeredKeysTaskID>
       6  ??InitBoard?relay
       6  ??OnBoard_KeyCallback?relay
       6  ??OnBoard_SendKeys?relay
       6  ??Onboard_rand?relay
       6  ??RegisterForKeys?relay
       6  ??_itoa?relay
       6  ??appForceBoot?relay
       5  ?Subroutine0
       7  ?Subroutine1
      36  InitBoard
      71  OnBoard_KeyCallback
      66  OnBoard_SendKeys
       1  OnboardKeyIntEnable
      40  Onboard_rand
       6  Onboard_soft_reset
      24  RegisterForKeys
       1  _A_IEN0
     152  _itoa
       3  appForceBoot
       1  registeredKeysTaskID

 
 404 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
   6 bytes in segment NEAR_CODE
   1 byte  in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
   1 byte  in segment XDATA_Z
 
 453 bytes of CODE  memory
   0 bytes of DATA  memory (+ 1 byte shared)
   2 bytes of XDATA memory

Errors: none
Warnings: 1
