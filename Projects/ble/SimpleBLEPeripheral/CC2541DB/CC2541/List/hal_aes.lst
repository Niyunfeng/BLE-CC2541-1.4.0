###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             18/Mar/2014  16:35:32 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\target\CC2540EB\hal_aes.c                        #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\config\build #
#                          Components.cfg (-DBROADCASTER_CFG=0x01             #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\buildConfig #
#                          .cfg (-DHOST_CONFIG=PERIPHERAL_CFG                 #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\target\CC2540EB\hal_aes.c -D INT_HEAP_LEN=3074   #
#                          -D HALNODEBUG -D OSAL_CBTIMER_NUM_TASKS=1 -D       #
#                          xHAL_AES_DMA=TRUE -D HAL_DMA=TRUE -D POWER_SAVING  #
#                          -D xPLUS_BROADCASTER -D HAL_LCD=TRUE -D            #
#                          HAL_LED=TRUE -D HAL_UART=TRUE -D HAL_ADC=TRUE      #
#                          -lcN E:\TexasInstruments\BLE-CC254x-1.4.0\Projects #
#                          \ble\SimpleBLEPeripheral\CC2541DB\CC2541\List\ -o  #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\ -I   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\include\ -I     #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\hal\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\hal\target\CC2541EB\ -I        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\osal\include\ -I E:\TexasInstruments\BLE-CC254x- #
#                          1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\.. #
#                          \..\..\..\Components\services\saddr\ -I            #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\ble\controller\phy\ -I         #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\controller\include\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\. #
#                          .\..\Components\ble\host\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\common\cc2540\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\npi\n #
#                          pi_np\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profi #
#                          les\Roles\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\P #
#                          rofiles\SimpleProfile\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\Profiles\DevInf #
#                          o\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Project #
#                          s\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profiles\ #
#                          Batt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Proj #
#                          ects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profil #
#                          es\HIDDev\ -Ohz                                    #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\hal_aes.l #
#                          st                                                 #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\hal_aes.r5 #
#                          1                                                  #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Components\hal\target\CC2540EB\hal_aes.c
      1          /**************************************************************************************************
      2            Filename:       hal_aes.c
      3            Revised:        $Date: 2009-10-29 16:57:32 -0700 (Thu, 29 Oct 2009) $
      4            Revision:       $Revision: 21020 $
      5          
      6            Description:    Support for Hardware AES encryption.
      7          
      8            Copyright 2007-2009 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          **************************************************************************************************/
     38          
     39          /******************************************************************************
     40           * INCLUDES
     41           */
     42          #include "osal.h"
     43          #include "hal_aes.h"
     44          #include "hal_dma.h"
     45          
     46          /******************************************************************************
     47           * MACROS
     48           */
     49          
     50          /******************************************************************************
     51           * CONSTANTS
     52           */
     53          
     54          /******************************************************************************
     55           * TYPEDEFS
     56           */
     57          
     58          /******************************************************************************
     59           * LOCAL VARIABLES
     60           */
     61          
     62          /******************************************************************************
     63           * GLOBAL VARIABLES
     64           */
     65          
     66          void (*pSspAesEncrypt)( uint8 *, uint8 * ) = (void*)NULL;
     67          
     68          /******************************************************************************
     69           * FUNCTION PROTOTYPES
     70           */
     71          void aesDmaInit( void );
     72          
     73          #if ((defined HAL_DMA) && (HAL_DMA == TRUE))
     74          /******************************************************************************
     75           * @fn      aesDmaInit
     76           *
     77           * @brief   Initilize DMA for AES engine
     78           *
     79           * input parameters
     80           *
     81           * @param   None
     82           *
     83           * @return  None
     84           */
     85          void aesDmaInit( void )
     86          {
     87            halDMADesc_t *ch;
     88          
     89            /* Fill in DMA channel 1 descriptor and define it as input */
     90            ch = HAL_DMA_GET_DESC1234( HAL_DMA_AES_IN );
     91            HAL_DMA_SET_DEST( ch, HAL_AES_IN_ADDR );              /* Input of the AES module */
     92            HAL_DMA_SET_VLEN( ch, HAL_DMA_VLEN_USE_LEN );         /* Using the length field */
     93            HAL_DMA_SET_WORD_SIZE( ch, HAL_DMA_WORDSIZE_BYTE );   /* One byte is transferred each time */
     94            HAL_DMA_SET_TRIG_MODE( ch, HAL_DMA_TMODE_SINGLE );    /* A single byte is transferred each time */
     95            HAL_DMA_SET_TRIG_SRC( ch, HAL_DMA_TRIG_ENC_DW );      /* Setting the AES module to generate the DMA trigger */
     96            HAL_DMA_SET_SRC_INC( ch, HAL_DMA_SRCINC_1 );          /* The address for data fetch is incremented by 1 byte */
     97            HAL_DMA_SET_DST_INC( ch, HAL_DMA_DSTINC_0 );          /* The destination address is constant */
     98            HAL_DMA_SET_IRQ( ch, HAL_DMA_IRQMASK_DISABLE );       /* The DMA complete interrupt flag is not set at completion */
     99            HAL_DMA_SET_M8( ch, HAL_DMA_M8_USE_8_BITS );          /* Transferring all 8 bits in each byte */
    100            HAL_DMA_SET_PRIORITY( ch, HAL_DMA_PRI_HIGH );         /* DMA has priority */
    101          
    102            /* Fill in DMA channel 2 descriptor and define it as output */
    103            ch = HAL_DMA_GET_DESC1234( HAL_DMA_AES_OUT );
    104            HAL_DMA_SET_SOURCE( ch, HAL_AES_OUT_ADDR );           /* Start address of the segment */
    105            HAL_DMA_SET_VLEN( ch, HAL_DMA_VLEN_USE_LEN );         /* Using the length field */
    106            HAL_DMA_SET_WORD_SIZE( ch, HAL_DMA_WORDSIZE_BYTE );   /* One byte is transferred each time */
    107            HAL_DMA_SET_TRIG_MODE( ch, HAL_DMA_TMODE_SINGLE );    /* A single byte is transferred each time */
    108            HAL_DMA_SET_TRIG_SRC( ch, HAL_DMA_TRIG_ENC_UP );      /* Setting the AES module to generate the DMA trigger */
    109            HAL_DMA_SET_SRC_INC( ch, HAL_DMA_SRCINC_0 );          /* The address for data fetch is constant */
    110            HAL_DMA_SET_DST_INC( ch, HAL_DMA_DSTINC_1 );          /* The destination address is incremented by 1 byte */
    111            HAL_DMA_SET_IRQ( ch, HAL_DMA_IRQMASK_DISABLE );       /* The DMA complete interrupt flag is not set at completion */
    112            HAL_DMA_SET_M8( ch, HAL_DMA_M8_USE_8_BITS );          /* Transferring all 8 bits in each byte */
    113            HAL_DMA_SET_PRIORITY( ch, HAL_DMA_PRI_HIGH );         /* DMA has priority */
    114          }
    115          #endif
    116          
    117          #if (!defined HAL_AES_DMA) || (HAL_AES_DMA == FALSE)
    118          /******************************************************************************
    119           * @fn      AesLoadBlock
    120           *
    121           * @brief   Write a block to AES engine
    122           *
    123           * input parameters
    124           *
    125           * @param   ptr  - Pointer to date to be written.
    126           *
    127           * @return  None
    128           */
    129          void AesLoadBlock( uint8 *ptr )
    130          {
    131            uint8 i;
    132          
    133            /* Kick it off */
    134            AES_START();
    135          
    136            /* Copy block to encryption input register */
    137            for (i = 0; i < STATE_BLENGTH; i++)
    138            {
    139              ENCDI = *ptr++;
    140            }
    141          }
    142          
    143          /******************************************************************************
    144           * @fn      AesStartBlock
    145           *
    146           * @brief   Write and read a block to and from the AES engine
    147           *
    148           * input parameters
    149           *
    150           * @param   out  - Pointer to result to be read.
    151           *          in   - pointer to data to be written.
    152           *
    153           * @return  None
    154           */
    155          void AesStartBlock( uint8 *out, uint8 *in )
    156          {
    157            uint8 i;
    158          
    159            /* Kick it off */
    160            AES_START();
    161          
    162            /* Copy data to encryption input register */
    163            for (i = 0; i < STATE_BLENGTH; i++)
    164            {
    165              ENCDI = *in++;
    166            }
    167          
    168            /* Delay is required for non-DMA AES */
    169            HAL_AES_DELAY();
    170          
    171            /* Copy encryption output register to out */
    172            for (i = 0; i < STATE_BLENGTH; i++)
    173            {
    174              *out++ = ENCDO;
    175            }
    176          }
    177          
    178          /******************************************************************************
    179           * @fn      AesStartShortBlock
    180           *
    181           * @brief   Write and read a block to and from the AES engine. When using CFB,
    182           *          OFB, and CTR mode, the 128 bits blocks are divided into four 32 bit
    183           *          blocks.
    184           *
    185           * input parameters
    186           *
    187           * @param   out  - Pointer to result to be read.
    188           *          in   - pointer to data to be written.
    189           *
    190           * @return  None
    191           */
    192          void AesStartShortBlock( uint8 *out, uint8 *in )
    193          {
    194            uint8 i, j;
    195          
    196            AES_START();
    197            for (i = 0; i < 4; i++)
    198            {
    199              /* Copy in block to encryption input register */
    200              for (j = 0; j < 4; j++)
    201              {
    202                ENCDI = *in++;
    203              }
    204          
    205              /* Delay is required for non-DMA AES */
    206              HAL_AES_DELAY();
    207          
    208              /* Copy encryptioon output register to out block */
    209              for (j = 0; j < 4; j++)
    210              {
    211                *out++ = ENCDO;
    212              }
    213            }
    214          }
    215          #endif
    216          
    217          /******************************************************************************
    218           * @fn      AesLoadIV
    219           *
    220           * @brief   Writes IV into the CC2540
    221           *
    222           * input parameters
    223           *
    224           * @param   IV  - Pointer to IV.
    225           *
    226           * @return  None
    227           */
    228          void AesLoadIV( uint8 *IV )
    229          {
    230          #if (defined HAL_AES_DMA) && (HAL_AES_DMA == TRUE)
    231            halDMADesc_t *ch = HAL_DMA_GET_DESC1234( HAL_DMA_AES_IN );
    232          
    233            /* Modify descriptors for channel 1 */
    234            HAL_DMA_SET_SOURCE( ch, IV );
    235            HAL_DMA_SET_LEN( ch, STATE_BLENGTH );
    236          
    237            /* Arm DMA channel 1 */
    238            HAL_DMA_CLEAR_IRQ( HAL_DMA_AES_IN );
    239            HAL_DMA_ARM_CH( HAL_DMA_AES_IN );
    240            do {
    241              asm("NOP");
    242            } while (!HAL_DMA_CH_ARMED(HAL_DMA_AES_IN));
    243          
    244            /* Set AES mode */
    245            AES_SET_ENCR_DECR_KEY_IV( AES_LOAD_IV );
    246          
    247            /* Kick it off, block until AES is ready */
    248            AES_START();
    249            while( !(ENCCS & 0x08) );
    250          #else
    251            /* Set AES mode */
    252            AES_SET_ENCR_DECR_KEY_IV( AES_LOAD_IV );
    253          
    254            /* Load the block */
    255            AesLoadBlock( IV );
    256          #endif
    257          }
    258          
    259          /******************************************************************************
    260           * @fn      AesLoadKey
    261           *
    262           * @brief   Writes the key into the CC2540
    263           *
    264           * input parameters
    265           *
    266           * @param   AesKey  - Pointer to AES Key.
    267           *
    268           * @return  None
    269           */
    270          void AesLoadKey( uint8 *AesKey )
    271          {
    272          #if (defined HAL_AES_DMA) && (HAL_AES_DMA == TRUE)
    273            halDMADesc_t *ch = HAL_DMA_GET_DESC1234( HAL_DMA_AES_IN );
    274          
    275            /* Modify descriptors for channel 1 */
    276            HAL_DMA_SET_SOURCE( ch, AesKey );
    277            HAL_DMA_SET_LEN( ch, KEY_BLENGTH );
    278          
    279            /* Arm DMA channel 1 */
    280            HAL_DMA_CLEAR_IRQ( HAL_DMA_AES_IN );
    281            HAL_DMA_ARM_CH( HAL_DMA_AES_IN );
    282            do {
    283              asm("NOP");
    284            } while (!HAL_DMA_CH_ARMED(HAL_DMA_AES_IN));
    285          
    286            /* Set AES mode */
    287            AES_SET_ENCR_DECR_KEY_IV( AES_LOAD_KEY );
    288          
    289            /* Kick it off, block until AES is ready */
    290            AES_START();
    291            while( !(ENCCS & 0x08) );
    292          #else
    293            /* Set AES mode */
    294            AES_SET_ENCR_DECR_KEY_IV( AES_LOAD_KEY );
    295          
    296            /* Load the block */
    297            AesLoadBlock( AesKey );
    298          #endif
    299          }
    300          
    301          #if (defined HAL_AES_DMA) && (HAL_AES_DMA == TRUE)
    302          /******************************************************************************
    303           * @fn      AesDmaSetup
    304           *
    305           * @brief   Sets up DMA of 16 byte block using CC2540 HW aes encryption engine
    306           *
    307           * input parameters
    308           *
    309           * @param   Cstate  - Pointer to output data.
    310           * @param   msg_out_len - message out length
    311           * @param   msg_in  - pointer to input data.
    312           * @param   msg_in_len - message in length
    313           *
    314           * output parameters
    315           *
    316           * @param   Cstate  - Pointer to encrypted data.
    317           *
    318           * @return  None
    319           *
    320           */
    321          void AesDmaSetup( uint8 *Cstate, uint16 msg_out_len, uint8 *msg_in, uint16 msg_in_len )
    322          {
    323            halDMADesc_t *ch;
    324          
    325            /* Modify descriptors for channel 1 */
    326            ch = HAL_DMA_GET_DESC1234( HAL_DMA_AES_IN );
    327            HAL_DMA_SET_SOURCE( ch, msg_in );
    328            HAL_DMA_SET_LEN( ch, msg_in_len );
    329          
    330            /* Modify descriptors for channel 2 */
    331            ch = HAL_DMA_GET_DESC1234( HAL_DMA_AES_OUT );
    332            HAL_DMA_SET_DEST( ch, Cstate );
    333            HAL_DMA_SET_LEN( ch, msg_out_len );
    334          
    335            /* Arm DMA channels 1 and 2 */
    336            HAL_DMA_CLEAR_IRQ( HAL_DMA_AES_IN );
    337            HAL_DMA_ARM_CH( HAL_DMA_AES_IN );
    338            do {
    339              asm("NOP");
    340            } while (!HAL_DMA_CH_ARMED(HAL_DMA_AES_IN));
    341            HAL_DMA_CLEAR_IRQ( HAL_DMA_AES_OUT );
    342            HAL_DMA_ARM_CH( HAL_DMA_AES_OUT );
    343            do {
    344              asm("NOP");
    345            } while (!HAL_DMA_CH_ARMED(HAL_DMA_AES_OUT));
    346          }
    347          #endif
    348          
    349          /******************************************************************************
    350           * @fn      HalAesInit
    351           *
    352           * @brief   Initilize AES engine
    353           *
    354           * input parameters
    355           *
    356           * @param   None
    357           *
    358           * @return  None
    359           */
    360          void HalAesInit( void )
    361          {
    362          #if (defined HAL_AES_DMA) && (HAL_AES_DMA == TRUE)
    363            /* Init DMA channels 1 and 2 */
    364            aesDmaInit();
    365          #endif
    366          }
    367          
    368          /******************************************************************************
    369           * @fn      ssp_HW_KeyInit
    370           *
    371           * @brief   Writes the key into AES engine
    372           *
    373           * input parameters
    374           *
    375           * @param   AesKey  - Pointer to AES Key.
    376           *
    377           * @return  None
    378           */
    379          void ssp_HW_KeyInit( uint8 *AesKey )
    380          {
    381            AES_SETMODE(ECB);
    382            AesLoadKey( AesKey );
    383          }
    384          
    385          /******************************************************************************
    386           * @fn      sspAesEncryptHW
    387           *
    388           * @brief   Encrypts 16 byte block using AES encryption engine
    389           *
    390           * input parameters
    391           *
    392           * @param   AesKey  - Pointer to AES Key.
    393           * @param   Cstate  - Pointer to input data.
    394           *
    395           * output parameters
    396           *
    397           * @param   Cstate  - Pointer to encrypted data.
    398           *
    399           * @return  None
    400           *
    401           */
    402          void sspAesEncryptHW( uint8 *AesKey, uint8 *Cstate )
    403          {
    404            (void)AesKey;
    405          
    406          #if (defined HAL_AES_DMA) && (HAL_AES_DMA == TRUE)
    407            /* Setup DMA for AES encryption */
    408            AesDmaSetup( Cstate, STATE_BLENGTH, Cstate, STATE_BLENGTH );
    409            AES_SET_ENCR_DECR_KEY_IV( AES_ENCRYPT );
    410          
    411            /* Kick it off, block until DMA is done */
    412            AES_START();
    413            while( !HAL_DMA_CHECK_IRQ( HAL_DMA_AES_OUT ) );
    414          #else
    415            /* Set ECB mode for AES encryption */
    416            AES_SETMODE(ECB);
    417            AES_SET_ENCR_DECR_KEY_IV( AES_ENCRYPT );
    418          
    419            /* Load and start the block */
    420            AesStartBlock( Cstate, Cstate );
    421          #endif
    422          }

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     25  AesDmaSetup
       2      0      0  AesLoadIV
       2      0      0  AesLoadKey
       2      0      0  HalAesInit
                          2 0  0 -> aesDmaInit
       2      0      0  aesDmaInit
       0      0     16  sspAesEncryptHW
                          0 0 16 -> AesDmaSetup
       2      0      0  ssp_HW_KeyInit
                          2 0  0 -> AesLoadKey


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??AesDmaSetup?relay
       6  ??AesLoadIV?relay
       6  ??AesLoadKey?relay
       6  ??HalAesInit?relay
       6  ??aesDmaInit?relay
       6  ??sspAesEncryptHW?relay
       6  ??ssp_HW_KeyInit?relay
       7  ?Subroutine0
      28  ?Subroutine1
     100  AesDmaSetup
      33  AesLoadIV
      31  AesLoadKey
       1  DMAARM
       1  DMAIRQ
       1  ENCCS
      10  HalAesInit
      56  aesDmaInit
       2  pSspAesEncrypt
      58  sspAesEncryptHW
      18  ssp_HW_KeyInit

 
 341 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
   3 bytes in segment SFR_AN
   2 bytes in segment XDATA_Z
 
 383 bytes of CODE  memory
   0 bytes of DATA  memory (+ 3 bytes shared)
   2 bytes of XDATA memory

Errors: none
Warnings: 1
