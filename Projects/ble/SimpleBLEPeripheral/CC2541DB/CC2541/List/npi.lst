###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             27/Mar/2014  14:01:43 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          common\npi\npi_np\npi.c                            #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\config\build #
#                          Components.cfg (-DBROADCASTER_CFG=0x01             #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\buildConfig #
#                          .cfg (-DHOST_CONFIG=PERIPHERAL_CFG                 #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          common\npi\npi_np\npi.c -D INT_HEAP_LEN=3074 -D    #
#                          HALNODEBUG -D OSAL_CBTIMER_NUM_TASKS=1 -D          #
#                          xHAL_AES_DMA=TRUE -D HAL_DMA=TRUE -D POWER_SAVING  #
#                          -D xPLUS_BROADCASTER -D HAL_LCD=TRUE -D            #
#                          HAL_LED=TRUE -D HAL_UART=FALSE -D HAL_ADC=TRUE -D  #
#                          HAL_SLEEP_DEBUG_LED -lcN                           #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\ -o       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\ -I   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\include\ -I     #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\hal\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\hal\target\CC2541EB\ -I        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\osal\include\ -I E:\TexasInstruments\BLE-CC254x- #
#                          1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\.. #
#                          \..\..\..\Components\services\saddr\ -I            #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\ble\controller\phy\ -I         #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\controller\include\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\. #
#                          .\..\Components\ble\host\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\common\cc2540\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\npi\n #
#                          pi_np\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profi #
#                          les\Roles\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\P #
#                          rofiles\SimpleProfile\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\Profiles\DevInf #
#                          o\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Project #
#                          s\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profiles\ #
#                          Batt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Proj #
#                          ects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profil #
#                          es\HIDDev\ -Ohz                                    #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\npi.lst   #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\npi.r51    #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\common\npi\npi_np\npi.c
      1          /*******************************************************************************
      2            Filename:       npi.c
      3            Revised:        $Date: 2008-06-11 14:30:47 -0700 (Wed, 11 Jun 2008) $
      4            Revision:       $Revision: 17210 $
      5          
      6            Description:    This file contains the Network Processor Interface (NPI),
      7                            which abstracts the physical link between the Application
      8                            Processor (AP) and the Network Processor (NP). The NPI
      9                            serves as the HAL's client for the SPI and UART drivers, and
     10                            provides API and callback services for its client.
     11          
     12            Copyright 2006-2012 Texas Instruments Incorporated. All rights reserved.
     13          
     14            IMPORTANT: Your use of this Software is limited to those specific rights
     15            granted under the terms of a software license agreement between the user
     16            who downloaded the software, his/her employer (which must be your employer)
     17            and Texas Instruments Incorporated (the "License").  You may not use this
     18            Software unless you agree to abide by the terms of the License. The License
     19            limits your use, and you acknowledge, that the Software may not be modified,
     20            copied or distributed unless embedded on a Texas Instruments microcontroller
     21            or used solely and exclusively in conjunction with a Texas Instruments radio
     22            frequency transceiver, which is integrated into your product.  Other than for
     23            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     24            works of, modify, distribute, perform, display or sell this Software and/or
     25            its documentation for any purpose.
     26          
     27            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     28            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     29            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     30            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     31            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     32            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     33            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     34            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     35            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     36            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     37            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     38          
     39            Should you have any questions regarding your right to use this Software,
     40            contact Texas Instruments Incorporated at www.TI.com.
     41          *******************************************************************************/
     42          
     43          /*******************************************************************************
     44           * INCLUDES
     45           */
     46          
     47          #include "hal_types.h"
     48          #include "hal_board.h"
     49          #include "npi.h"
     50          
     51          /*******************************************************************************
     52           * MACROS
     53           */
     54          
     55          /*******************************************************************************
     56           * CONSTANTS
     57           */
     58          
     59          /*******************************************************************************
     60           * TYPEDEFS
     61           */
     62          
     63          /*******************************************************************************
     64           * LOCAL VARIABLES
     65           */
     66          
     67          /*******************************************************************************
     68           * GLOBAL VARIABLES
     69           */
     70          
     71          /*******************************************************************************
     72           * PROTOTYPES
     73           */
     74          
     75          /*******************************************************************************
     76           * FUNCTIONS
     77           */
     78          
     79          /*******************************************************************************
     80           * @fn          NPI_InitTransport
     81           *
     82           * @brief       This routine initializes the transport layer and opens the port
     83           *              of the device. Note that based on project defines, either the
     84           *              UART, USB (CDC), or SPI driver can be used.
     85           *
     86           * input parameters
     87           *
     88           * @param       npiCback - User callback function when data is available.
     89           *
     90           * output parameters
     91           *
     92           * @param       None.
     93           *
     94           * @return      None.
     95           */
     96          void NPI_InitTransport( npiCBack_t npiCBack )
     97          {
     98            halUARTCfg_t uartConfig;
     99          
    100            // configure UART
    101            uartConfig.configured           = TRUE;
    102            uartConfig.baudRate             = NPI_UART_BR;
    103            uartConfig.flowControl          = NPI_UART_FC;
    104            uartConfig.flowControlThreshold = NPI_UART_FC_THRESHOLD;
    105            uartConfig.rx.maxBufSize        = NPI_UART_RX_BUF_SIZE;
    106            uartConfig.tx.maxBufSize        = NPI_UART_TX_BUF_SIZE;
    107            uartConfig.idleTimeout          = NPI_UART_IDLE_TIMEOUT;
    108            uartConfig.intEnable            = NPI_UART_INT_ENABLE;
    109            uartConfig.callBackFunc         = (halUARTCBack_t)npiCBack;
    110          
    111            // start UART
    112            // Note: Assumes no issue opening UART port.
    113            (void)HalUARTOpen( NPI_UART_PORT, &uartConfig );
    114          
    115            return;
    116          }
    117          
    118          
    119          /*******************************************************************************
    120           * @fn          NPI_ReadTransport
    121           *
    122           * @brief       This routine reads data from the transport layer based on len,
    123           *              and places it into the buffer.
    124           *
    125           * input parameters
    126           *
    127           * @param       buf - Pointer to buffer to place read data.
    128           * @param       len - Number of bytes to read.
    129           *
    130           * output parameters
    131           *
    132           * @param       None.
    133           *
    134           * @return      Returns the number of bytes read from transport.
    135           */
    136          uint16 NPI_ReadTransport( uint8 *buf, uint16 len )
    137          {
    138            return( HalUARTRead( NPI_UART_PORT, buf, len ) );
    139          }
    140          
    141          
    142          /*******************************************************************************
    143           * @fn          NPI_WriteTransport
    144           *
    145           * @brief       This routine writes data from the buffer to the transport layer.
    146           *
    147           * input parameters
    148           *
    149           * @param       buf - Pointer to buffer to write data from.
    150           * @param       len - Number of bytes to write.
    151           *
    152           * output parameters
    153           *
    154           * @param       None.
    155           *
    156           * @return      Returns the number of bytes written to transport.
    157           */
    158          uint16 NPI_WriteTransport( uint8 *buf, uint16 len )
    159          {
    160            return( HalUARTWrite( NPI_UART_PORT, buf, len ) );
    161          }
    162          
    163          
    164          /*******************************************************************************
    165           * @fn          NPI_RxBufLen
    166           *
    167           * @brief       This routine returns the number of bytes in the receive buffer.
    168           *
    169           * input parameters
    170           *
    171           * @param       None.
    172           *
    173           * output parameters
    174           *
    175           * @param       None.
    176           *
    177           * @return      Returns the number of bytes in the receive buffer.
    178           */
    179          uint16 NPI_RxBufLen( void )
    180          {
    181            return( Hal_UART_RxBufLen( NPI_UART_PORT ) );
    182          }
    183          
    184          
    185          /*******************************************************************************
    186           * @fn          NPI_GetMaxRxBufSize
    187           *
    188           * @brief       This routine returns the max size receive buffer.
    189           *
    190           * input parameters
    191           *
    192           * @param       None.
    193           *
    194           * output parameters
    195           *
    196           * @param       None.
    197           *
    198           * @return      Returns the max size of the receive buffer.
    199           */
    200          uint16 NPI_GetMaxRxBufSize( void )
    201          {
    202            return( NPI_UART_RX_BUF_SIZE );
    203          }
    204          
    205          
    206          /*******************************************************************************
    207           * @fn          NPI_GetMaxTxBufSize
    208           *
    209           * @brief       This routine returns the max size transmit buffer.
    210           *
    211           * input parameters
    212           *
    213           * @param       None.
    214           *
    215           * output parameters
    216           *
    217           * @param       None.
    218           *
    219           * @return      Returns the max size of the transmit buffer.
    220           */
    221          uint16 NPI_GetMaxTxBufSize( void )
    222          {
    223            return( NPI_UART_TX_BUF_SIZE );
    224          }
    225          
    226          
    227          /*******************************************************************************
    228           ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      0  NPI_GetMaxRxBufSize
       0      0      0  NPI_GetMaxTxBufSize
       2      0     29  NPI_InitTransport
                          2 0 29 -> HalUARTOpen
       2      0      0  NPI_ReadTransport
                          2 0  0 -> HalUARTRead
       2      0      0  NPI_RxBufLen
                          2 0  0 -> Hal_UART_RxBufLen
       2      0      0  NPI_WriteTransport
                          2 0  0 -> HalUARTWrite


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??NPI_GetMaxRxBufSize?relay
       6  ??NPI_GetMaxTxBufSize?relay
       6  ??NPI_InitTransport?relay
       6  ??NPI_ReadTransport?relay
       6  ??NPI_RxBufLen?relay
       6  ??NPI_WriteTransport?relay
       7  ?Subroutine0
       7  ?Subroutine1
       0  NPI_GetMaxRxBufSize
       2  NPI_GetMaxTxBufSize
     113  NPI_InitTransport
      11  NPI_ReadTransport
      11  NPI_RxBufLen
       9  NPI_WriteTransport

 
 160 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
 
 196 bytes of CODE memory

Errors: none
Warnings: 1
