###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             18/Mar/2014  16:35:34 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\target\CC2541EB\hal_i2c.c                        #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\config\build #
#                          Components.cfg (-DBROADCASTER_CFG=0x01             #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\buildConfig #
#                          .cfg (-DHOST_CONFIG=PERIPHERAL_CFG                 #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\target\CC2541EB\hal_i2c.c -D INT_HEAP_LEN=3074   #
#                          -D HALNODEBUG -D OSAL_CBTIMER_NUM_TASKS=1 -D       #
#                          xHAL_AES_DMA=TRUE -D HAL_DMA=TRUE -D POWER_SAVING  #
#                          -D xPLUS_BROADCASTER -D HAL_LCD=TRUE -D            #
#                          HAL_LED=TRUE -D HAL_UART=TRUE -D HAL_ADC=TRUE      #
#                          -lcN E:\TexasInstruments\BLE-CC254x-1.4.0\Projects #
#                          \ble\SimpleBLEPeripheral\CC2541DB\CC2541\List\ -o  #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\ -I   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\include\ -I     #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\hal\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\hal\target\CC2541EB\ -I        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\osal\include\ -I E:\TexasInstruments\BLE-CC254x- #
#                          1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\.. #
#                          \..\..\..\Components\services\saddr\ -I            #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\ble\controller\phy\ -I         #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\controller\include\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\. #
#                          .\..\Components\ble\host\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\common\cc2540\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\npi\n #
#                          pi_np\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profi #
#                          les\Roles\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\P #
#                          rofiles\SimpleProfile\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\Profiles\DevInf #
#                          o\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Project #
#                          s\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profiles\ #
#                          Batt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Proj #
#                          ects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profil #
#                          es\HIDDev\ -Ohz                                    #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\hal_i2c.l #
#                          st                                                 #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\hal_i2c.r5 #
#                          1                                                  #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Components\hal\target\CC2541EB\hal_i2c.c
      1          /**************************************************************************************************
      2           Filename:       hal_i2c.c
      3           Revised:        $Date: 2012-09-21 06:30:38 -0700 (Fri, 21 Sep 2012) $
      4           Revision:       $Revision: 31581 $
      5          
      6           Description:    This module defines the HAL I2C API for the CC2541ST. It
      7           implements the I2C master.
      8          
      9          
     10           Copyright 2012 Texas Instruments Incorporated. All rights reserved.
     11          
     12           IMPORTANT: Your use of this Software is limited to those specific rights
     13           granted under the terms of a software license agreement between the user
     14           who downloaded the software, his/her employer (which must be your employer)
     15           and Texas Instruments Incorporated (the "License").  You may not use this
     16           Software unless you agree to abide by the terms of the License. The License
     17           limits your use, and you acknowledge, that the Software may not be modified,
     18           copied or distributed unless embedded on a Texas Instruments microcontroller
     19           or used solely and exclusively in conjunction with a Texas Instruments radio
     20           frequency transceiver, which is integrated into your product.  Other than for
     21           the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22           works of, modify, distribute, perform, display or sell this Software and/or
     23           its documentation for any purpose.
     24          
     25           YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26           PROVIDED �AS IS� WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27           INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28           NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29           TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30           NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31           LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32           INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33           OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34           OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35           (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37           Should you have any questions regarding your right to use this Software,
     38           contact Texas Instruments Incorporated at www.TI.com.
     39           **************************************************************************************************/
     40          
     41          /* ------------------------------------------------------------------------------------------------
     42           *                                          Includes
     43           * ------------------------------------------------------------------------------------------------
     44           */
     45          #include "hal_assert.h"
     46          #include "hal_board_cfg.h"
     47          #include "hal_i2c.h"
     48          #include "hal_lcd.h"
     49          
     50          
     51          /* ------------------------------------------------------------------------------------------------
     52           *                                          Constants
     53           * ------------------------------------------------------------------------------------------------
     54           */
     55          #define I2C_ENS1            BV(6)
     56          #define I2C_STA             BV(5)
     57          #define I2C_STO             BV(4)
     58          #define I2C_SI              BV(3)
     59          #define I2C_AA              BV(2)
     60          #define I2C_MST_RD_BIT      BV(0)  // Master RD/WRn bit to be OR'ed with Slave address.
     61          #define I2C_CLOCK_MASK      0x83
     62          
     63          #define I2C_PXIFG           P2IFG
     64          #define I2C_IF              P2IF
     65          #define I2C_IE              BV(1)
     66          
     67          /* ------------------------------------------------------------------------------------------------
     68           *                                           Typedefs
     69           * ------------------------------------------------------------------------------------------------
     70           */
     71          
     72          typedef enum {
     73          	// HAL_I2C_MASTER mode statuses.
     74          	mstStarted = 0x08,
     75          	mstRepStart = 0x10,
     76          	mstAddrAckW = 0x18,
     77          	mstAddrNackW = 0x20,
     78          	mstDataAckW = 0x28,
     79          	mstDataNackW = 0x30,
     80          	mstLostArb = 0x38,
     81          	mstAddrAckR = 0x40,
     82          	mstAddrNackR = 0x48,
     83          	mstDataAckR = 0x50,
     84          	mstDataNackR = 0x58,
     85          } i2cStatus_t;
     86          
     87          /* ------------------------------------------------------------------------------------------------
     88           *                                           Macros
     89           * ------------------------------------------------------------------------------------------------
     90           */
     91          
     92          #define I2C_WRAPPER_DISABLE() st( I2CWC    =     0x00;              )
     93          #define I2C_CLOCK_RATE(x)     st( I2CCFG  &=    ~I2C_CLOCK_MASK;    \
     94                                            I2CCFG  |=     x;                 )
     95          #define I2C_SET_NACK()        st( I2CCFG &= ~I2C_AA; )
     96          #define I2C_SET_ACK()         st( I2CCFG |=  I2C_AA; )
     97          
     98          // Enable I2C bus
     99          #define I2C_ENABLE()          st( I2CCFG |= (I2C_ENS1); )
    100          #define I2C_DISABLE()         st( I2CCFG &= ~(I2C_ENS1); )
    101          
    102          // Must clear SI before setting STA and then STA must be manually cleared.
    103          #define I2C_STRT() st (             \
    104            I2CCFG &= ~I2C_SI;                \
    105            I2CCFG |= I2C_STA;                \
    106            while ((I2CCFG & I2C_SI) == 0);   \
    107            I2CCFG &= ~I2C_STA; \
    108          )
    109          
    110          // Must set STO before clearing SI.
    111          #define I2C_STOP() st (             \
    112            I2CCFG |= I2C_STO;                \
    113            I2CCFG &= ~I2C_SI;                \
    114            while ((I2CCFG & I2C_STO) != 0);  \
    115          )
    116          
    117          // Stop clock-stretching and then read when it arrives.
    118          #define I2C_READ(_X_) st (          \
    119            I2CCFG &= ~I2C_SI;                \
    120            while ((I2CCFG & I2C_SI) == 0);   \
    121            (_X_) = I2CDATA;                  \
    122          )
    123          
    124          // First write new data and then stop clock-stretching.
    125          #define I2C_WRITE(_X_) st (         \
    126            I2CDATA = (_X_);                  \
    127            I2CCFG &= ~I2C_SI;                \
    128            while ((I2CCFG & I2C_SI) == 0);   \
    129          )
    130          
    131          /* ------------------------------------------------------------------------------------------------
    132           *                                       Local Variables
    133           * ------------------------------------------------------------------------------------------------
    134           */
    135          static uint8 i2cAddr; // Target Slave address pre-shifted up by one leaving RD/WRn LSB as zero.
    136          
    137          /**************************************************************************************************
    138           * @fn          i2cMstStrt
    139           *
    140           * @brief       Attempt to send an I2C bus START and Slave Address as an I2C bus Master.
    141           *
    142           * input parameters
    143           *
    144           * @param       RD_WRn - The LSB of the Slave Address as Read/~Write.
    145           *
    146           * @return      The I2C status of the START request or of the Slave Address Ack.
    147           */
    148          static uint8 i2cMstStrt(uint8 RD_WRn) {
    149          	I2C_STRT();
    150          
    151          	if (I2CSTAT == mstStarted) /* A start condition has been transmitted */
    152          	{
    153          		I2C_WRITE(i2cAddr | RD_WRn);
    154          	}
    155          
    156          	return I2CSTAT;
    157          }
    158          
    159          /**************************************************************************************************
    160           * @fn          HalI2CInit
    161           *
    162           * @brief       Initialize the I2C bus as a Master.
    163           *
    164           * input parameters
    165           *
    166           * @param       address - I2C slave address.
    167           * @param       clockRate - I2C clock rate.
    168           *
    169           * output parameters
    170           *
    171           * None.
    172           *
    173           * @return      None.
    174           */
    175          void HalI2CInit(uint8 address, i2cClock_t clockRate) {
    176          	i2cAddr = address << 1;
    177          	I2C_WRAPPER_DISABLE();
    178          	I2CADDR = 0; // no multi master support at this time
    179          	I2C_CLOCK_RATE(clockRate);
    180          	I2C_ENABLE();
    181          }
    182          
    183          /**************************************************************************************************
    184           * @fn          HalI2CRead
    185           *
    186           * @brief       Read from the I2C bus as a Master.
    187           *
    188           * input parameters
    189           *
    190           * @param       len - Number of bytes to read.
    191           * @param       pBuf - Pointer to the data buffer to put read bytes.
    192           *
    193           * output parameters
    194           *
    195           * None.
    196           *
    197           * @return      The number of bytes successfully read.
    198           */
    199          uint8 HalI2CRead(uint8 len, uint8 *pBuf) {
    200          	uint8 cnt = 0;
    201          
    202          	if (i2cMstStrt(I2C_MST_RD_BIT) != mstAddrAckR) {
    203          		len = 0;
    204          	}
    205          
    206          	// All bytes are ACK'd except for the last one which is NACK'd. If only
    207          	// 1 byte is being read, a single NACK will be sent. Thus, we only want
    208          	// to enable ACK if more than 1 byte is going to be read.
    209          	if (len > 1) {
    210          		I2C_SET_ACK();
    211          	}
    212          
    213          	while (len > 0) {
    214          		// slave devices require NACK to be sent after reading last byte
    215          		if (len == 1) {
    216          			I2C_SET_NACK();
    217          		}
    218          
    219          		// read a byte from the I2C interface
    220          		I2C_READ(*pBuf++);
    221          		cnt++;
    222          		len--;
    223          
    224          		if (I2CSTAT != mstDataAckR) {
    225          			if (I2CSTAT != mstDataNackR) {
    226          				// something went wrong, so don't count last byte
    227          				cnt--;
    228          			}
    229          			break;
    230          		}
    231          	}
    232          	I2C_STOP();
    233          
    234          	return cnt;
    235          }
    236          
    237          /**************************************************************************************************
    238           * @fn          HalI2CWrite
    239           *
    240           * @brief       Write to the I2C bus as a Master.
    241           *
    242           * input parameters
    243           *
    244           * @param       len - Number of bytes to write.
    245           * @param       pBuf - Pointer to the data buffer to write.
    246           *
    247           * output parameters
    248           *
    249           * None.
    250           *
    251           * @return      The number of bytes successfully written.
    252           */
    253          uint8 HalI2CWrite(uint8 len, uint8 *pBuf) {
    254            
    255          	if (i2cMstStrt(0) != mstAddrAckW) {
    256          		len = 0;
    257          	}
    258                
    259          	for (uint8 cnt = 0; cnt < len; cnt++) {
    260          	// HalLcdWriteString(pBuf, HAL_LCD_LINE_5); 
    261                    I2C_WRITE(*pBuf++);
    262                     
    263          		if (I2CSTAT != mstDataAckW) {
    264          			if (I2CSTAT == mstDataNackW) {
    265          				len = cnt + 1;
    266                                 //HalLcdWriteString("ok", HAL_LCD_LINE_5);
    267          			} 
    268                                  else {
    269          				len = cnt;
    270          			}
    271          			break;
    272          		}
    273          	}
    274          
    275          	I2C_STOP();
    276          
    277          	return len;
    278          }
    279          
    280          /**************************************************************************************************
    281           * @fn          HalI2CDisable
    282           *
    283           * @brief       Places the I2C bus in inactive mode
    284           *
    285           * input parameters
    286           *
    287           * None.
    288           *
    289           * output parameters
    290           *
    291           * None.
    292           *
    293           * @return      None.
    294           */
    295          void HalI2CDisable(void) {
    296          	I2C_DISABLE();
    297          }
    298          
    299          /*********************************************************************
    300           *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0      0  HalI2CDisable
       2      0      0  HalI2CInit
       1      0     10  HalI2CRead
                          0 0 10 -> i2cMstStrt
       0      0      9  HalI2CWrite
                          0 0  9 -> i2cMstStrt
       2      0     10  i2cMstStrt


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??HalI2CDisable?relay
       6  ??HalI2CInit?relay
       6  ??HalI2CRead?relay
       6  ??HalI2CWrite?relay
       7  ??Subroutine2_0
       5  ??Subroutine3_0
       6  ??i2cMstStrt?relay
       1  ?Subroutine0
       3  ?Subroutine1
      13  HalI2CDisable
      33  HalI2CInit
     119  HalI2CRead
     103  HalI2CWrite
       1  i2cAddr
      52  i2cMstStrt

 
 336 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
   1 byte  in segment XDATA_Z
 
 366 bytes of CODE  memory
   1 byte  of XDATA memory

Errors: none
Warnings: 1
