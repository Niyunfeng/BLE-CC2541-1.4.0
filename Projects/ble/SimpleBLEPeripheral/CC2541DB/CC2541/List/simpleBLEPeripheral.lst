###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             27/Mar/2014  17:43:50 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\Source\simpleBLEPeripheral.c   #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\config\build #
#                          Components.cfg (-DBROADCASTER_CFG=0x01             #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\buildConfig #
#                          .cfg (-DHOST_CONFIG=PERIPHERAL_CFG                 #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\Source\simpleBLEPeripheral.c   #
#                          -D INT_HEAP_LEN=3074 -D HALNODEBUG -D              #
#                          OSAL_CBTIMER_NUM_TASKS=1 -D xHAL_AES_DMA=TRUE -D   #
#                          HAL_DMA=TRUE -D POWER_SAVING -D xPLUS_BROADCASTER  #
#                          -D HAL_LCD=TRUE -D HAL_LED=TRUE -D HAL_UART=FALSE  #
#                          -D HAL_ADC=TRUE -D HAL_SLEEP_DEBUG_LED -lcN        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\ -o       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\ -I   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\include\ -I     #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\hal\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\hal\target\CC2541EB\ -I        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\osal\include\ -I E:\TexasInstruments\BLE-CC254x- #
#                          1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\.. #
#                          \..\..\..\Components\services\saddr\ -I            #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\ble\controller\phy\ -I         #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\controller\include\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\. #
#                          .\..\Components\ble\host\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\common\cc2540\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\npi\n #
#                          pi_np\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profi #
#                          les\Roles\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\P #
#                          rofiles\SimpleProfile\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\Profiles\DevInf #
#                          o\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Project #
#                          s\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profiles\ #
#                          Batt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Proj #
#                          ects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profil #
#                          es\HIDDev\ -Ohz                                    #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\simpleBLE #
#                          Peripheral.lst                                     #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\simpleBLEP #
#                          eripheral.r51                                      #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\SimpleBLEPeripheral\Source\simpleBLEPeripheral.c
      1          /**************************************************************************************************
      2           Filename:       simpleBLEPeripheral.c
      3           Revised:        $Date: 2010-08-06 08:56:11 -0700 (Fri, 06 Aug 2010) $
      4           Revision:       $Revision: 23333 $
      5          
      6           Description:    This file contains the Simple BLE Peripheral sample application
      7           for use with the CC2540 Bluetooth Low Energy Protocol Stack.
      8          
      9           Copyright 2010 - 2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11           IMPORTANT: Your use of this Software is limited to those specific rights
     12           granted under the terms of a software license agreement between the user
     13           who downloaded the software, his/her employer (which must be your employer)
     14           and Texas Instruments Incorporated (the "License").  You may not use this
     15           Software unless you agree to abide by the terms of the License. The License
     16           limits your use, and you acknowledge, that the Software may not be modified,
     17           copied or distributed unless embedded on a Texas Instruments microcontroller
     18           or used solely and exclusively in conjunction with a Texas Instruments radio
     19           frequency transceiver, which is integrated into your product.  Other than for
     20           the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21           works of, modify, distribute, perform, display or sell this Software and/or
     22           its documentation for any purpose.
     23          
     24           YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25           PROVIDED ï¿½AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26           INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27           NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28           TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29           NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30           LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31           INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32           OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33           OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34           (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36           Should you have any questions regarding your right to use this Software,
     37           contact Texas Instruments Incorporated at www.TI.com.
     38           **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          //#include "hal_drivers.h"
     44          #include "bcomdef.h"
     45          #include "OSAL.h"
     46          #include "OSAL_PwrMgr.h"
     47          #include "osal_snv.h"
     48          
     49          #include "OnBoard.h"
     50          #include "hal_adc.h"
     51          #include "hal_led.h"
     52          #include "hal_key.h"
     53          #include "hal_lcd.h"
     54          #include "SimpleBLESerialUart.h"
     55          
     56          #include "gatt.h"
     57          
     58          #include "hci.h"
     59          
     60          #include "gapgattserver.h"
     61          #include "gattservapp.h"
     62          #include "devinfoservice.h"
     63          #include "simpleGATTprofile.h"
     64          
     65          #if defined ( PLUS_BROADCASTER )
     66          #include "peripheralBroadcaster.h"
     67          #else
     68          #include "peripheral.h"
     69          #endif
     70          
     71          #include "gapbondmgr.h"
     72          
     73          #include "simpleBLEPeripheral.h"
     74          
     75          #if defined FEATURE_OAD
     76          #include "oad.h"
     77          #include "oad_target.h"
     78          #endif
     79          
     80          #include "hal_i2c.h"
     81          #include "hal_eeprom.h"
     82          #include "hal_at24c32.h"
     83          #include "hal_ds1307.h"
     84          #include "SimpleEepromUtils.h"
     85          #include "SimpleRTCInterrupt.h"
     86          #include "SimpleBLESPIFlash.h"
     87          #include "battservice.h"
     88          #include "SimpleTemperature.h"
     89          #include "SimpleDS18B20.h"
     90          #include "Simplepasscode.h"
     91          /*********************************************************************
     92           * MACROS
     93           */
     94          
     95          /*********************************************************************
     96           * CONSTANTS
     97           */
     98          #define SBP_START_ADVERT_EVT_PERIOD               60000
     99          // How often to perform periodic event
    100          #define SBP_PERIODIC_EVT_PERIOD                   5000
    101          
    102          #define TEMP_CHECK_PERIOD                         5000
    103          
    104          // How often to check battery voltage (in ms)
    105          #define BATTERY_CHECK_PERIOD                     10000////////////////////////////////////batt
    106          
    107          // What is the advertising interval when device is discoverable (units of 625us, 160=100ms)
    108          #define DEFAULT_ADVERTISING_INTERVAL          160//16000
    109          /*//èå´20MS-10.24Sä¹é´ é¤å»å¹¿æ­å»¶æ¶æ¶é´0-10msï¼ä¸ºå¶å¯è®¾ç½®çèå´ã
    110          //è¥å¹¿æ­äºä»¶æ¯å¯æ«ææ åäºä»¶æéè¿æ¥æ åäºä»¶ å¶å¼ä¸å¾å°äº100MSï¼è¥å¹¿æ­äºä»¶æ¯å¯è¿æ¥æ åäºä»¶ï¼å¶å¼å¯ä»¥ä¸º20MSæèæ´å¤§   
    111          //ä¸ææºéä¿¡è¿ç¨ä¸­ç¨çæ¯,é»è®¤è®¾ç½®  GAP_ADTYPE_ADV_INDå³å¯è¿æ¥æ åäºä»¶  æµåèæ¶å¯ä»¥éå½è°æ´å¶å¼ */
    112          // Whether to enable automatic parameter update request when a connection is formed
    113          #define DEFAULT_ENABLE_UPDATE_REQUEST        TRUE 
    114          
    115          // Limited discoverable mode advertises for 30.72s, and then stops
    116          // General discoverable mode advertises indefinitely
    117          
    118          #if defined ( CC2540_MINIDK )
    119          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_LIMITED
    120          #else
    121          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_GENERAL
    122          #endif  // defined ( CC2540_MINIDK )
    123          // Minimum connection interval (units of 1.25ms, 80=100ms) if automatic parameter update request is enabled
    124          #define DEFAULT_DESIRED_MIN_CONN_INTERVAL  80 
    125          
    126          // Maximum connection interval (units of 1.25ms, 800=1000ms) if automatic parameter update request is enabled
    127          #define DEFAULT_DESIRED_MAX_CONN_INTERVAL  800
    128          
    129          // Slave latency to use if automatic parameter update request is enabled
    130          #define DEFAULT_DESIRED_SLAVE_LATENCY         0//10  åæ°æ´æ°æå¼ ä¸ææºéä¿¡æ¶ è¦å°äº4
    131          
    132          // Supervision timeout value (units of 10ms, 1000=10s) if automatic parameter update request is enabled
    133          #define DEFAULT_DESIRED_CONN_TIMEOUT        500//ä¸ææºéä¿¡æ¶ è¦å°äºç­äº6S
    134          
    135          // Company Identifier: Texas Instruments Inc. (13)
    136          #define TI_COMPANY_ID                         0x000D
    137          
    138          #define INVALID_CONNHANDLE                    0xFFFF
    139          
    140          // Length of bd addr as a string
    141          #define B_ADDR_STR_LEN                        15
    142          
    143          #if defined ( PLUS_BROADCASTER )
    144          #define ADV_IN_CONN_WAIT                    500 // delay 500 ms
    145          #endif
    146          
    147          // GAP connection handle
    148          static uint16 gapConnHandle;
    149          
    150          extern uint8 SBP_UART_STUDY_CMD;
    151          extern uint8 SBP_UART_STUDY_CMD_LEN;
    152          
    153          /*************************************************************
    154           *  recv data define
    155           */
    156          //XDATA uint8 a[3000]={0};
    157          extern UartState u_state;
    158          #define TRANSFER_DATA_SIGN 0xFE
    159          #define TRANSFER_DATA_SIGN_RE 0xFF
    160          //#define UART_DATA_START_INDEX 2
    161          //#define one_time_data_len 125
    162          // uint8 code recv_value1[2540] = { 0 };
    163          static uint8  recv_value[128] = { 0 };
    164          static uint8 TRANSFER_DATA_STATE_IN = FALSE;
    165          //static char newValueBuf[20] = { 0 };
    166          static uint8 data_len = 0, cur_data_len = 0, data_len_index = 0;
    167          
    168          /*********************************************************************
    169           * SPI FLASH
    170           */
    171          uint8 buf[20];
    172          uint8 bufrx[20];
    173          
    174          /*********************************************************************
    175           * temperature
    176           */
    177          uint8 temperature[20];
    178          uint8 temp_18b20[10];
    179          uint8 temp_flag=0;
    180          uint8 temp_18b20_flag=0;
    181          /*************************************************************
    182           *  LIST
    183           */
    184          
    185           typedef struct
    186          {           
    187            
    188            uint8 listlen;                   
    189            uint8 value1[2]; 
    190            uint8 value2[2];                   
    191            uint8 value3[2]; 
    192            uint8 value4[2]; 
    193            uint8 value5[2]; 
    194            uint8 value6[2];  
    195          }list;
    196          
    197          list current_list={1,{0},{0},{0},{0},{0},{0}};
    198          
    199          /*********************************************************************
    200           * EVENT
    201           */
    202          uint16 peripheral_event=0;
    203          uint8 time_databuf_read[20]={0};
    204          uint8 time_datalen_read=0;
    205          
    206          /*********************************************************************
    207           * GLOBAL VARIABLES
    208           */
    209          
    210          /*********************************************************************
    211           * EXTERNAL VARIABLES
    212           */
    213          
    214          /*********************************************************************
    215           * EXTERNAL FUNCTIONS
    216           */
    217          
    218          /*********************************************************************
    219           * LOCAL VARIABLES
    220           */
    221          static uint8 simpleBLEPeripheral_TaskID; // Task ID for internal task/event processing
    222          
    223          static gaprole_States_t gapProfileState = GAPROLE_INIT;
    224          
    225          // GAP - SCAN RSP data (max size = 31 bytes)
    226          static uint8 scanRspData[] = {
    227          // complete name
    228          		0x14,// length of this data
    229          		GAP_ADTYPE_LOCAL_NAME_COMPLETE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    230          		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    231          
    232          		// connection interval range
    233          		0x05,// length of this data
    234          		GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE, LO_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), // 100ms
    235          		HI_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), LO_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL), // 1s
    236          		HI_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL),
    237          
    238          		// Tx power level
    239          		0x02,// length of this data
    240          		GAP_ADTYPE_POWER_LEVEL, 0 // 0dBm
    241          		};
    242          
    243          // GAP - Advertisement data (max size = 31 bytes, though this is
    244          // best kept short to conserve power while advertisting)
    245          static uint8 advertData[] = {
    246          // Flags; this sets the device to use limited discoverable
    247          // mode (advertises for 30 seconds at a time) instead of general
    248          // discoverable mode (advertises indefinitely)
    249          		0x02,// length of this data
    250          		GAP_ADTYPE_FLAGS, DEFAULT_DISCOVERABLE_MODE | GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED,
    251          
    252          		// service UUID, to notify central devices what services are included
    253          		// in this peripheral
    254          		0x03,// length of this data
    255          		GAP_ADTYPE_16BIT_MORE, // some of the UUID's, but not all
    256          		LO_UINT16(SIMPLEPROFILE_SERV_UUID), HI_UINT16(SIMPLEPROFILE_SERV_UUID),
    257          
    258          };
    259          
    260          /*********************************************************************
    261           * LOCAL FUNCTIONS
    262           */
    263          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg);
    264          static void peripheralStateNotificationCB(gaprole_States_t newState);
    265          static void performPeriodicTask(void);
    266          static void simpleProfileChangeCB(uint8 paramID);
    267          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys);
    268          //static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs);
    269          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status);
    270          static char *bdAddr2Str(uint8 *pAddr);
    271          static char *hex2Str(uint8 *hexcode);
    272          //static void gettemp(void);
    273          //static void updateDeviceName(char *name, uint8 len);
    274          //static uint32 atoi(uint8 s[]);
    275          //static void Uartsend_irdata(void);
    276          //static void Receive_Save_Uartsend_irdata(void);
    277          
    278          /*********************************************************************
    279           * PROFILE CALLBACKS
    280           */
    281          
    282          // GAP Role Callbacks
    283          static gapRolesCBs_t simpleBLEPeripheral_PeripheralCBs = { peripheralStateNotificationCB, // Profile State Change Callbacks
    284          		NULL // When a valid RSSI is read from controller (not used by application)
    285          		};
    286          
    287          // GAP Bond Manager Callbacks
    288          static gapBondCBs_t simpleBLEPeripheral_BondMgrCBs = { NULL, // Passcode callback (not used by application)
    289          		simpleBLEPeripheralPairStateCB // Pairing / Bonding state Callback (not used by application)
    290          		};
    291          
    292          // Simple GATT Profile Callbacks
    293          static simpleProfileCBs_t simpleBLEPeripheral_SimpleProfileCBs = { simpleProfileChangeCB // Charactersitic value change callback
    294          		};
    295          
    296          /*********************************************************************
    297           * @fn      pairStateCB
    298           * @brief   Pairing state callback.
    299           * @return  none
    300           */
    301          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status) {
    302          	if (state == GAPBOND_PAIRING_STATE_STARTED) {
    303          		HalLcdWriteString("Pairing started", HAL_LCD_LINE_7);
    304          	} else if (state == GAPBOND_PAIRING_STATE_COMPLETE) {
    305          		if (status == SUCCESS) {
    306          			HalLcdWriteString("Pairing success", HAL_LCD_LINE_7);
    307          		} else {
    308          			HalLcdWriteStringValue("Pairing fail", status, 10, HAL_LCD_LINE_7);
    309          			uint8 a = GAPRole_TerminateConnection();
    310          			HalLcdWriteStringValue("Pairing fail--a", a, 10, HAL_LCD_LINE_7);
    311          		}
    312          	} else if (state == GAPBOND_PAIRING_STATE_BONDED) {
    313          		if (status == SUCCESS) {
    314          			HalLcdWriteString("Bonding success", HAL_LCD_LINE_1);
    315          		}
    316          	}
    317          
    318          	//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_ZEKEZANG_EVT, 5000);
    319          }
    320          
    321          /*********************************************************************
    322           * @fn      simpleBLECentralPasscodeCB
    323           * @brief   Passcode callback.
    324           * @return  none
    325          
    326           static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs) {
    327           HalLcdWriteStringValue("uiInputs:", uiInputs, 10, HAL_LCD_LINE_5);
    328           HalLcdWriteStringValue("uiOutputs", uiOutputs, 10, HAL_LCD_LINE_6);
    329           }
    330           */
    331          
    332          /*********************************************************************
    333           * @fn      readWriteFlash
    334           * @brief   readWriteFlash
    335           * @return  none
    336          
    337           static uint32 passs = 0;
    338           static void readWriteFlash() {
    339           uint8 * aa;
    340           aa = osal_msg_allocate(15);
    341           osal_memset(aa, 0, 15);
    342           osal_memcpy(aa, "as", 2);
    343           uint16 p = 1234;
    344           if (osal_snv_write(0xE0, sizeof(uint16), &p) == SUCCESS) {
    345           HalLcdWriteString("write ok", HAL_LCD_LINE_2);
    346           }
    347           osal_msg_deallocate(aa);
    348           uint8 bb[15] = { 0x0 };
    349           uint16 bb = 0;
    350           if (osal_snv_read(0xE0, 15, &bb) == SUCCESS) {
    351           HalLcdWriteString("read ok", HAL_LCD_LINE_2);
    352           passs = bb;
    353           }
    354           }
    355           */
    356          
    357          
    358          /*********************************************************************
    359           * PUBLIC FUNCTIONS
    360           */
    361          
    362          /*********************************************************************
    363           * @fn      SimpleBLEPeripheral_Init
    364           *
    365           * @brief   Initialization function for the Simple BLE Peripheral App Task.
    366           *          This is called during initialization and should contain
    367           *          any application specific initialization (ie. hardware
    368           *          initialization/setup, table initialization, power up
    369           *          notificaiton ... ).
    370           *
    371           * @param   task_id - the ID assigned by OSAL.  This ID should be
    372           *                    used to send messages and set timers.
    373           *
    374           * @return  none
    375           */
    376          void SimpleBLEPeripheral_Init(uint8 task_id) {
    377          
    378            simpleBLEPeripheral_TaskID = task_id;
    379          	SbpHalUART_Init(task_id);
    380                  
    381          	// Setup the GAP Peripheral Role Profile
    382          	{
    383          
    384          #if defined( CC2540_MINIDK )
    385          		// For the CC2540DK-MINI keyfob, device doesn't start advertising until button is pressed
    386          		uint8 initial_advertising_enable = FALSE;
    387          #else
    388          		// For other hardware platforms, device starts advertising upon initialization
    389          		uint8 initial_advertising_enable = TRUE;
    390                         
    391          #endif
    392          
    393          		// By setting this to zero, the device will go into the waiting state after
    394          		// being discoverable for 30.72 second, and will not being advertising again
    395          		// until the enabler is set back to TRUE
    396          		uint16 gapRole_AdvertOffTime = 0;
    397          
    398          		uint8 enable_update_request = DEFAULT_ENABLE_UPDATE_REQUEST;
    399          		uint16 desired_min_interval = DEFAULT_DESIRED_MIN_CONN_INTERVAL;
    400          		uint16 desired_max_interval = DEFAULT_DESIRED_MAX_CONN_INTERVAL;
    401          		uint16 desired_slave_latency = DEFAULT_DESIRED_SLAVE_LATENCY;
    402          		uint16 desired_conn_timeout = DEFAULT_DESIRED_CONN_TIMEOUT;
    403          
    404          		// Set the GAP Role Parameters
    405          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    406                          
    407                          HalLcdWriteString("restart adver ", HAL_LCD_LINE_7);
    408          		GAPRole_SetParameter(GAPROLE_ADVERT_OFF_TIME, sizeof(uint16), &gapRole_AdvertOffTime);
    409          
    410          		GAPRole_SetParameter(GAPROLE_SCAN_RSP_DATA, sizeof(scanRspData), scanRspData);
    411          		GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(advertData), advertData);
    412          
    413          		GAPRole_SetParameter(GAPROLE_PARAM_UPDATE_ENABLE, sizeof(uint8), &enable_update_request);
    414          		GAPRole_SetParameter(GAPROLE_MIN_CONN_INTERVAL, sizeof(uint16), &desired_min_interval);
    415          		GAPRole_SetParameter(GAPROLE_MAX_CONN_INTERVAL, sizeof(uint16), &desired_max_interval);
    416          		GAPRole_SetParameter(GAPROLE_SLAVE_LATENCY, sizeof(uint16), &desired_slave_latency);
    417          		GAPRole_SetParameter(GAPROLE_TIMEOUT_MULTIPLIER, sizeof(uint16), &desired_conn_timeout);
    418          	}
    419          
    420          	//readWriteFlash();
    421          
    422          
    423          	// Set advertising interval
    424          	{
    425          		uint16 advInt = DEFAULT_ADVERTISING_INTERVAL;
    426          
    427          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MIN, advInt);
    428          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MAX, advInt);
    429          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MIN, advInt);
    430          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MAX, advInt);
    431          	}
    432                  set_passkey();
    433          
    434          
    435          	// Initialize GATT attributes
    436          	GGS_AddService(GATT_ALL_SERVICES); // GAP
    437          	GATTServApp_AddService(GATT_ALL_SERVICES); // GATT attributes
    438          	DevInfo_AddService(); // Device Information Service
    439          	SimpleProfile_AddService(GATT_ALL_SERVICES); // Simple GATT Profile
    440                  Batt_AddService();     // Battery Service
    441                  
    442                  
    443                  
    444                  
    445          #if defined FEATURE_OAD
    446          			VOID OADTarget_AddService(); // OAD Profile
    447          #endif
    448          
    449          	// Setup the SimpleProfile Characteristic Values
    450          	{
    451          	
    452          		uint8 charValue4 = 4;
    453                          uint8 charValue1[SIMPLEPROFILE_CHAR1_LEN] = { 0 };
    454                          uint8 charValue2[SIMPLEPROFILE_CHAR2_LEN] = { 0 };
    455                          uint8 charValue3[SIMPLEPROFILE_CHAR3_LEN] = { 0 };
    456                          uint8 charValue5[SIMPLEPROFILE_CHAR5_LEN] = { 0 };
    457                          uint8 charValue6[SIMPLEPROFILE_CHAR6_LEN] = { 0 };
    458                          uint8 charValue7[SIMPLEPROFILE_CHAR7_LEN] = { 0 };
    459          		
    460          		
    461          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &charValue4);
    462          		
    463                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR1, SIMPLEPROFILE_CHAR1_LEN, charValue1);
    464                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR2, SIMPLEPROFILE_CHAR2_LEN, charValue2);
    465                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR3, SIMPLEPROFILE_CHAR3_LEN, charValue3);
    466                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR5, SIMPLEPROFILE_CHAR5_LEN, charValue5);
    467                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR6, SIMPLEPROFILE_CHAR6_LEN, charValue6);
    468                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, charValue7);
    469                       
    470          	}
    471          
    472          	HalLcdWriteString("BLE slave aico", HAL_LCD_LINE_1);////////////////////////////////////////////////////////////////////////////
    473          
    474          	// Register callback with SimpleGATTprofile
    475          	VOID SimpleProfile_RegisterAppCBs(&simpleBLEPeripheral_SimpleProfileCBs);
    476          
    477          	//who open who byebye
    478          	//HCI_EXT_ClkDivOnHaltCmd(HCI_EXT_ENABLE_CLK_DIVIDE_ON_HALT); no no no...
    479          
    480          	// Register for all key events - This app will handle all key events
    481          	RegisterForKeys(simpleBLEPeripheral_TaskID);
    482          
    483          #if defined ( DC_DC_P0_7 )
    484          	// Enable stack to toggle bypass control on TPS62730 (DC/DC converter)
    485          	HCI_EXT_MapPmIoPortCmd( HCI_EXT_PM_IO_PORT_P0, HCI_EXT_PM_IO_PORT_PIN7 );
    486          #endif // defined ( DC_DC_P0_7 )
    487          	// Setup a delayed profile startup
    488          	osal_set_event(simpleBLEPeripheral_TaskID, SBP_START_DEVICE_EVT);
    489                  //osal_set_event(simpleBLEPeripheral_TaskID, HAL_PWRMGR_CONSERVE_EVENT);
    490                  
    491                  
    492                   // initialize the ADC for battery reads
    493                  HalAdcInit();
    494          
    495          	/***********************************test something **********************************/
    496          	//HalLcdWriteString(" start", HAL_LCD_LINE_1);
    497          	
    498                      XNV_SPI_INIT();
    499                  //è®¾ç½®P1.0ç«¯å£æ¹åä¸ºè¾åº
    500                  P0DIR |= BV(4);
    501                  
    502                  //è®¾ç½®P1.0ç«¯å£ä¸ºGPIOåè½
    503                  P0SEL &= ~BV(4);
    504                  
    505                  HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF );
    506                  HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF );
    507                  HalLedSet(HAL_LED_3, HAL_LED_MODE_OFF );
    508                  HalLedSet(HAL_LED_4, HAL_LED_MODE_OFF );
    509               
    510          
    511          
    512          	/***********************************test something **********************************/
    513          }
    514          
    515          /*********************************************************************
    516           * @fn      SimpleBLEPeripheral_ProcessEvent
    517           *
    518           * @brief   Simple BLE Peripheral Application Task event processor.  This function
    519           *          is called to process all events for the task.  Events
    520           *          include timers, messages and any other user defined events.
    521           *
    522           * @param   task_id  - The OSAL assigned task ID.
    523           * @param   events - events to process.  This is a bit map and can
    524           *                   contain more than one event.
    525           *
    526           * @return  events not processed
    527           */
    528          uint16 SimpleBLEPeripheral_ProcessEvent(uint8 task_id, uint16 events) {
    529          
    530          	VOID task_id; // OSAL required parameter that isn't used in this function
    531                  uint8 i;
    532          	if (events & SYS_EVENT_MSG) {
    533          		uint8 *pMsg;
    534          
    535          		if ((pMsg = osal_msg_receive(simpleBLEPeripheral_TaskID)) != NULL) {
    536          			simpleBLEPeripheral_ProcessOSALMsg((osal_event_hdr_t *) pMsg);
    537          
    538          			// Release the OSAL message
    539          			VOID osal_msg_deallocate(pMsg);
    540          		}
    541          
    542          		// return unprocessed events
    543          		return (events ^ SYS_EVENT_MSG);
    544          	}
    545          
    546          	if (events & SBP_START_DEVICE_EVT) {
    547          		// Start the Device
    548          		GAPRole_StartDevice(&simpleBLEPeripheral_PeripheralCBs);
    549          
    550          		// Start Bond Manager
    551          		GAPBondMgr_Register(&simpleBLEPeripheral_BondMgrCBs);
    552          
    553          		// Set timer for first periodic event
    554          		osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_START_ADVERT_EVT, SBP_START_ADVERT_EVT_PERIOD);
    555                          
    556                          // Set timer for first battery read event
    557                          //osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, BATTERY_CHECK_PERIOD );
    558                          
    559          
    560                          //osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_TEMP_EVT, TEMP_CHECK_PERIOD );
    561                    
    562          		return (events ^ SBP_START_DEVICE_EVT);
    563          	}
    564                  if (events & SBP_START_ADVERT_EVT) {
    565                      
    566                        uint8 initial_advertising_enable = FALSE;
    567          	      GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    568                        
    569                        HalLcdWriteString("start advertising ok", HAL_LCD_LINE_6);
    570                        return (events ^ SBP_START_ADVERT_EVT);
    571                        
    572                  }
    573          
    574          //	if (events & SBP_PERIODIC_EVT) {
    575          
    576                         // Restart timer
    577          //		if (SBP_PERIODIC_EVT_PERIOD) {
    578          //			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, SBP_PERIODIC_EVT_PERIOD);
    579          //		}
    580          //
    581          //		// Perform periodic application task
    582          //		performPeriodicTask();
    583          //               
    584          //		return (events ^ SBP_PERIODIC_EVT);
    585          //	}
    586          
    587          //	if (events & SBP_ZEKEZANG_EVT) {
    588          //		uint8 initial_advertising_enable = FALSE;
    589          //		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    590          //		return (events ^ SBP_ZEKEZANG_EVT);
    591          //	}
    592          
    593          //	if (events & SBP_SEND_IRDATA_EVT) {
    594          //		HalLcdWriteString("send plan compl", HAL_LCD_LINE_4);
    595          //		return (events ^ SBP_SEND_IRDATA_EVT);
    596          //	}
    597          //
    598          //	if (events & SBP_ADV_IN_CONNECTION_EVT) {
    599          //		uint8 turnOnAdv = TRUE;
    600          //		// Turn on advertising while in a connection
    601          //		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &turnOnAdv);
    602          //
    603          //		return (events ^ SBP_ADV_IN_CONNECTION_EVT);
    604          //	}
    605                  
    606          //        if (events & SBP_TEMP_EVT) {
    607          //             
    608          //	       return (events ^ SBP_TEMP_EVT);
    609          //	}
    610                  
    611                  if (events & SBP_SEND_IRDATA_EVT1) {
    612          		
    613                          HalSPIRead(current_list.value1[0]*256,&time_datalen_read,1);
    614          		    //å»¶æ¶
    615                          for(i=20; i>0; i--)
    616                            delay_nus(50);
    617                          HalSPIRead(current_list.value1[0]*256+1,time_databuf_read,time_datalen_read-4);
    618                          
    619          		HalLcdWriteString(hex2Str(time_databuf_read), HAL_LCD_LINE_4);
    620          
    621                          current_list.listlen--;
    622                          SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, &current_list.listlen);
    623                          HalLcdWriteStringValue("list_len:", current_list.listlen, 10, HAL_LCD_LINE_2);
    624                          HalLcdWriteString("event1 ok", HAL_LCD_LINE_5);
    625          
    626                          peripheral_event^=SBP_SEND_IRDATA_EVT1;  
    627          		return (events ^ SBP_SEND_IRDATA_EVT1);
    628          	}
    629          	if (events & SBP_SEND_IRDATA_EVT2) {
    630          		
    631                         HalSPIRead(current_list.value2[0]*256,&time_datalen_read,1);
    632          		    //å»¶æ¶
    633                         for(i=20; i>0; i--)
    634                            delay_nus(50);
    635                          HalSPIRead(current_list.value2[0]*256+1,time_databuf_read,time_datalen_read-4);
    636                          
    637          		HalLcdWriteString(hex2Str(time_databuf_read), HAL_LCD_LINE_4);
    638          
    639                          current_list.listlen--;
    640                          SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, &current_list.listlen);
    641                          HalLcdWriteStringValue("list_len:", current_list.listlen, 10, HAL_LCD_LINE_2);
    642                          HalLcdWriteString("event2 ok", HAL_LCD_LINE_5);
    643          
    644                          peripheral_event^=SBP_SEND_IRDATA_EVT2;
    645                          //peripheral_event=events ^ SBP_SEND_IRDATA_EVT2;
    646          		return (events ^ SBP_SEND_IRDATA_EVT2);
    647          	}
    648          	if (events & SBP_SEND_IRDATA_EVT3) {
    649          		
    650                         HalSPIRead(current_list.value3[0]*256,&time_datalen_read,1);
    651          		    //å»¶æ¶
    652                         for(i=20; i>0; i--)
    653                            delay_nus(50);
    654                          HalSPIRead(current_list.value3[0]*256+1,time_databuf_read,time_datalen_read-4);
    655                          
    656          		HalLcdWriteString(hex2Str(time_databuf_read), HAL_LCD_LINE_4);
    657          
    658                          current_list.listlen--;
    659                          SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, &current_list.listlen);
    660                          HalLcdWriteStringValue("list_len:", current_list.listlen, 10, HAL_LCD_LINE_2);
    661                          HalLcdWriteString("event3 ok", HAL_LCD_LINE_5);
    662          
    663                          peripheral_event^=SBP_SEND_IRDATA_EVT3;
    664                          //peripheral_event=events ^ SBP_SEND_IRDATA_EVT3;
    665          		return (events ^ SBP_SEND_IRDATA_EVT3);
    666          	}
    667                  if (events & SBP_SEND_IRDATA_EVT4) {
    668          		
    669                         HalSPIRead(current_list.value4[0]*256,&time_datalen_read,1);
    670          		    //å»¶æ¶
    671                          for(i=20; i>0; i--)
    672                            delay_nus(50);
    673                          HalSPIRead(current_list.value4[0]*256+1,time_databuf_read,time_datalen_read-4);
    674                          
    675          		HalLcdWriteString(hex2Str(time_databuf_read), HAL_LCD_LINE_4);
    676          
    677                          current_list.listlen--;
    678                          SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, &current_list.listlen);
    679                          HalLcdWriteStringValue("list_len:", current_list.listlen, 10, HAL_LCD_LINE_2);
    680                          HalLcdWriteString("event4 ok", HAL_LCD_LINE_5);
    681          
    682                          peripheral_event^=SBP_SEND_IRDATA_EVT3;
    683                          //peripheral_event=events ^ SBP_SEND_IRDATA_EVT4;
    684          		return (events ^ SBP_SEND_IRDATA_EVT4);
    685          	}
    686                  if (events & SBP_SEND_IRDATA_EVT5) {
    687          		
    688                          HalSPIRead(current_list.value5[0]*256,&time_datalen_read,1);
    689          		    //å»¶æ¶
    690                          for(i=20; i>0; i--)
    691                            delay_nus(50);
    692                          HalSPIRead(current_list.value5[0]*256+1,time_databuf_read,time_datalen_read-4);
    693                          
    694          		HalLcdWriteString(hex2Str(time_databuf_read), HAL_LCD_LINE_4);
    695          
    696                          current_list.listlen--;
    697                          SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, &current_list.listlen);
    698                          HalLcdWriteStringValue("list_len:", current_list.listlen, 10, HAL_LCD_LINE_2);
    699                          HalLcdWriteString("event5 ok", HAL_LCD_LINE_5);
    700                          peripheral_event^=SBP_SEND_IRDATA_EVT3;
    701                          //peripheral_event=events ^ SBP_SEND_IRDATA_EVT5;
    702          		return (events ^ SBP_SEND_IRDATA_EVT5);
    703          	}
    704          //        if (events & SBP_SEND_IRDATA_EVT6) {
    705          //		
    706          //                HalSPIRead(current_list.value6[0]*256,&time_datalen_read,1);
    707          //		    //å»¶æ¶
    708          //                for(i=20; i>0; i--)
    709          //                  delay_nus(50);
    710          //                HalSPIRead(current_list.value6[0]*256+1,time_databuf_read,time_datalen_read-4);
    711          //                
    712          //		HalLcdWriteString(hex2Str(time_databuf_read), HAL_LCD_LINE_4);
    713          //
    714          //                current_list.listlen--;
    715          //                SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, &current_list.listlen);
    716          //                HalLcdWriteStringValue("list_len:", current_list.listlen, 10, HAL_LCD_LINE_2);
    717          //                 HalLcdWriteString("event6 ok", HAL_LCD_LINE_5);
    718          //               // peripheral_event^=SBP_SEND_IRDATA_EVT5;
    719          //                peripheral_event=events ^ SBP_SEND_IRDATA_EVT6;
    720          //		return (events ^ SBP_SEND_IRDATA_EVT6);
    721          //	}
    722          //        
    723                  
    724                  
    725          
    726          	return 0;
    727          }
    728          
    729          /*********************************************************************
    730           * @fn      simpleBLEPeripheral_ProcessOSALMsg
    731           *
    732           * @brief   Process an incoming task message.
    733           *
    734           * @param   pMsg - message to process
    735           *
    736           * @return  none
    737           */
    738          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg) {
    739          	switch (pMsg->event) {
    740          	case KEY_CHANGE:
    741          		simpleBLEPeripheral_HandleKeys(((keyChange_t *) pMsg)->state, ((keyChange_t *) pMsg)->keys);
    742          		break;
    743          	default:
    744          		// do nothing
    745          		break;
    746          	}
    747          }
    748          
    749          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys) {
    750              uint8 i;
    751          	if (keys & HAL_KEY_UP) {
    752                      
    753                      uint8 initial_advertising_enable = FALSE;
    754          	    GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    755                      
    756          		//u_state = IR_DATA_STUDY_CMD_START_BEGIN_STATE;
    757          		//SbpHalUARTWrite(&SBP_UART_STUDY_CMD, SBP_UART_STUDY_CMD_LEN);
    758          	}
    759          
    760          	if (keys & HAL_KEY_LEFT) {
    761          //		HalLcdWriteString("change to de_paddkey_name", HAL_LCD_LINE_3);
    762          //                set_de_passkey();
    763                      uint8 initial_advertising_enable = TRUE;
    764          	    GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    765                      
    766          	}
    767                   
    768                     if(keys ==(HAL_KEY_CENTER|HAL_KEY_SHORT))
    769                    {
    770                       HalLcdWriteString("test", HAL_LCD_LINE_6);
    771                        //å¼å§ç¹äº®LED
    772                          P0_4=0;
    773                         // while(1);
    774                          for(i=20; i>0; i--)
    775                            delay_nus(2000);
    776                          P0_4=1;
    777                               
    778                    }
    779                  if(keys ==(HAL_KEY_CENTER|HAL_KEY_LONG))
    780                    {
    781                       HalLcdWriteString("reset all", HAL_LCD_LINE_7);
    782                       set_de_passkey();
    783                       HalSPIErase();
    784                       list current_list={1,{0},{0},{0},{0},{0},{0}};
    785                        
    786                    }
    787          
    788                  
    789          	if (keys & HAL_KEY_RIGHT) {
    790          		//HalLcdWriteStringValue("data_len:", data_len, 10, HAL_LCD_LINE_2);
    791          	}
    792          
    793          }
    794          
    795          /*********************************************************************
    796           * @fn      peripheralStateNotificationCB
    797           *
    798           * @brief   Notification from the profile of a state change.
    799           *
    800           * @param   newState - new state
    801           *
    802           * @return  none
    803           */
    804          static void peripheralStateNotificationCB(gaprole_States_t newState) {
    805          
    806          	//HalLcdWriteStringValue("newState", newState, 10, HAL_LCD_LINE_4);
    807          
    808          	switch (newState) {
    809          	case GAPROLE_STARTED: {
    810          		uint8 ownAddress[B_ADDR_LEN];
    811          		uint8 systemId[DEVINFO_SYSTEM_ID_LEN];
    812          
    813          		GAPRole_GetParameter(GAPROLE_BD_ADDR, ownAddress);
    814          
    815          		// use 6 bytes of device address for 8 bytes of system ID value
    816          		systemId[0] = ownAddress[0];
    817          		systemId[1] = ownAddress[1];
    818          		systemId[2] = ownAddress[2];
    819          
    820          		// set middle bytes to zero
    821          		systemId[4] = 0x00;
    822          		systemId[3] = 0x00;
    823          
    824          		// shift three bytes up
    825          		systemId[7] = ownAddress[5];
    826          		systemId[6] = ownAddress[4];
    827          		systemId[5] = ownAddress[3];
    828          
    829          		DevInfo_SetParameter(DEVINFO_SYSTEM_ID, DEVINFO_SYSTEM_ID_LEN, systemId);
    830          
    831          		// Display device address
    832          		bdAddr2Str(ownAddress);
    833          		HalLcdWriteString(bdAddr2Str(ownAddress), HAL_LCD_LINE_3);
    834          		HalLcdWriteString("Initialized", HAL_LCD_LINE_3);
    835          	}
    836          		break;
    837          
    838          	case GAPROLE_ADVERTISING: {
    839          		HalLcdWriteString("Advertising", HAL_LCD_LINE_3);
    840          	}
    841          		break;
    842          
    843          	case GAPROLE_CONNECTED: {
    844          		HalLcdWriteString("Connected", HAL_LCD_LINE_3);
    845          		//simpleProfile_StateNotify( uint16 connHandle, attHandleValueNoti_t *pNoti )
    846          		GAPRole_GetParameter(GAPROLE_CONNHANDLE, &gapConnHandle);
    847          	}
    848          		break;
    849          
    850          	case GAPROLE_WAITING: {
    851          		HalLcdWriteString("Disconnected", HAL_LCD_LINE_3);
    852          	}
    853          		break;
    854          
    855          	case GAPROLE_WAITING_AFTER_TIMEOUT: {
    856          		HalLcdWriteString("Timed Out", HAL_LCD_LINE_3);
    857          	}
    858          		break;
    859          
    860          	case GAPROLE_ERROR: {
    861          		HalLcdWriteString("Error", HAL_LCD_LINE_3);
    862          	}
    863          		break;
    864          
    865          	default: {
    866          		HalLcdWriteString("", HAL_LCD_LINE_3);
    867          	}
    868          		break;
    869          
    870          	}
    871          
    872          	gapProfileState = newState;
    873          
    874          #if !defined( CC2540_MINIDK )
    875          	VOID gapProfileState; // added to prevent compiler warning with
    876          						  // "CC2540 Slave" configurations
    877          #endif
    878          
    879          }
    880          
    881          /*********************************************************************
    882           * @fn      performPeriodicTask
    883           *
    884           * @brief   Perform a periodic application task. This function gets
    885           *          called every five seconds as a result of the SBP_PERIODIC_EVT
    886           *          OSAL event. In this example, the value of the third
    887           *          characteristic in the SimpleGATTProfile service is retrieved
    888           *          from the profile, and then copied into the value of the
    889           *          the fourth characteristic.
    890           *
    891           * @param   none
    892           *
    893           * @return  none
    894           */
    895          static void performPeriodicTask(void) {
    896          	uint8 valueToCopy;
    897          	uint8 stat;
    898          
    899          	// Call to retrieve the value of the third characteristic in the profile
    900          	stat = SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR2, &valueToCopy);
    901          
    902          	if (stat == SUCCESS) {
    903          		/*
    904          		 * Call to set that value of the fourth characteristic in the profile. Note
    905          		 * that if notifications of the fourth characteristic have been enabled by
    906          		 * a GATT client device, then a notification will be sent every time this
    907          		 * function is called.
    908          		 */
    909                         // HalLcdWriteString("ok", HAL_LCD_LINE_5);
    910          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &valueToCopy);
    911          	}
    912          }
    913          
    914          /*********************************************************************
    915           * @fn      simpleProfileChangeCB
    916           * @brief   Callback from SimpleBLEProfile indicating a value change
    917           * @param   paramID - parameter ID of the value that was changed.
    918           *
    919           * @return  none
    920           */
    921          static void simpleProfileChangeCB(uint8 paramID) {
    922          	 //osal_memset(buf, 0, 20);
    923            uint8 valuechar1[20]={0},valuechar2[20]={0},valuechar3[20]={0},valuechar5[20]={0},valuechar6[20]={0},valuechar7[20]={0},valuechar8[20]={0};
    924          	 uint8 databuf_read[20]={0};
    925          	 uint8 datalen_read=0,i;
    926                   uint8  irdata_return[20]={0};
    927          	switch (paramID) {
    928          	case SIMPLEPROFILE_CHAR1://ç¨äºå¯ç ç¨æ·åä¿®æ¹
    929                       SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR1,valuechar1);
    930                       set_code_name(valuechar1);
    931          		break;
    932                          
    933                  case SIMPLEPROFILE_CHAR2://ç¨äºæ¥æ¶ é¥æ§å¨ çº¢å¤ä»£ç åº
    934                       SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR2, valuechar2);
    935                     //  HalLcdWriteString(valuechar2, HAL_LCD_LINE_5);
    936          	
    937                      if ((valuechar2[0] == TRANSFER_DATA_SIGN) && (valuechar2[1] == TRANSFER_DATA_SIGN_RE)) 
    938          	     {
    939          			TRANSFER_DATA_STATE_IN = FALSE;
    940                                 
    941          	      }
    942                      
    943                      
    944          	   if ((valuechar2[3] != 0) && (!TRANSFER_DATA_STATE_IN)) 
    945          	    {
    946          			
    947                                  data_len = valuechar2[3];
    948          			TRANSFER_DATA_STATE_IN = TRUE;
    949          			data_len_index = 0;
    950          			osal_memset(recv_value, 0, data_len);
    951                         
    952          	    }
    953          	
    954          	  cur_data_len = osal_strlen((char*)valuechar2);//æé®é¢ æ¯0çè¯ é¿åº¦ä¸å¯¹
    955                   //  cur_data_len = sizeof(valuechar2);
    956                     HalLcdWriteStringValue("cur_data_len:",cur_data_len, 10, HAL_LCD_LINE_1); 
    957                     
    958          	   if (TRANSFER_DATA_STATE_IN) 
    959          	    {
    960          		osal_memcpy((recv_value + data_len_index), valuechar2, cur_data_len);
    961                          
    962          		data_len_index += cur_data_len;
    963                          
    964          	     }
    965                     //HalLcdWriteStringValue("data_len:", data_len, 10, HAL_LCD_LINE_6);
    966                     //HalLcdWriteStringValue("recv_value_len:", osal_strlen((char *)recv_value), 10, HAL_LCD_LINE_7); 
    967                     //HalLcdWriteStringValue("data_len_index:", data_len_index, 10, HAL_LCD_LINE_8);
    968                 
    969                     if (data_len_index == data_len) 
    970          	   {
    971          	
    972          		HalSPIWrite(valuechar2[2]*256,recv_value+3,data_len-3);//å­å¨ çº¢å¤æ°æ®é¿åº¦ï¼é¿åº¦åæ¬ 0XFE+0XFF+ç¼å·+é¿åº¦+çº¢å¤æ°æ® ï¼+çº¢å¤æ°æ®
    973          		TRANSFER_DATA_STATE_IN = FALSE;
    974          		//HalLcdWriteStringValue("data_len:", osal_strlen((char *)recv_value), 10, HAL_LCD_LINE_6); 
    975                         // HalLcdWriteStringValue("listlen:", current_list.listlen, 10, HAL_LCD_LINE_8);
    976          		data_len = 0;
    977          		cur_data_len = 0;
    978          		data_len_index = 0;
    979          		osal_memset(recv_value, 0, data_len);
    980                          irdata_return[0]=0x11;          
    981                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR5, SIMPLEPROFILE_CHAR5_LEN, irdata_return);
    982                          
    983                     }
    984          
    985                           break;
    986                           
    987          	case SIMPLEPROFILE_CHAR3://æ¥æ¶ ç¼ç å½ä»¤  è¯»åçº¢å¤ç å¹¶è½¬å  å¶å®æ¯æ²¡ææ¶é´æ³ç çº¢å¤å½ä»¤
    988          		SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR3, valuechar3);
    989                         
    990          		HalSPIRead(valuechar3[0]*256,&datalen_read,1);//è¯»å çº¢å¤æ°æ®é¿åº¦  è¯»çº¢å¤æ°æ®ãIICåéæ¶è¦ç¨å°
    991          		    //å»¶æ¶1S
    992                         for(i=20; i>0; i--)
    993                            delay_nus(50);
    994                          HalSPIRead(valuechar3[0]*256+1,databuf_read,datalen_read-4);//è¯»å çº¢å¤æ°æ® 	
    995          		HalLcdWriteString(hex2Str(databuf_read), HAL_LCD_LINE_6);
    996                          
    997                           //å¼å§ç¹äº®LED
    998                          P0_4=0;
    999                         // while(1);
   1000                          for(i=20; i>0; i--)
   1001                            delay_nus(1200);
   1002                          P0_4=1;
   1003                          
   1004          		break;
   1005                  case SIMPLEPROFILE_CHAR4:
   1006                     //  SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR4, newValueBuf);
   1007                    
   1008          		break;
   1009                   case SIMPLEPROFILE_CHAR5://æ¥æ¶å® ä¸æ¡çº¢å¤ä»£ç å  çåé¦å¼
   1010                     
   1011                          SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR5, valuechar5);
   1012                          HalLcdWriteString(hex2Str(valuechar5), HAL_LCD_LINE_7);
   1013                      
   1014          		break;
   1015                   
   1016                  case SIMPLEPROFILE_CHAR6://æ¥æ¶å¸¦ææ¶é´æ³çæä»¤   ç¼ç å½ä»¤+æ§è¡æ¶é´æ³
   1017                    
   1018                        SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR6, valuechar6);
   1019                
   1020                        if(!(peripheral_event&SBP_SEND_IRDATA_EVT1))
   1021          		{	
   1022          			
   1023                                  current_list.value1[0]=valuechar6[0];
   1024                                  current_list.value1[1]=valuechar6[1];
   1025          			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT1, current_list.value1[1]*1000);
   1026                                  peripheral_event=peripheral_event|SBP_SEND_IRDATA_EVT1;
   1027                                  current_list.listlen++;
   1028                                  HalLcdWriteString("event_1", HAL_LCD_LINE_8);
   1029          			 
   1030          			
   1031          		}
   1032          		else if(!(peripheral_event&SBP_SEND_IRDATA_EVT2))
   1033          		{	
   1034          			
   1035                                  current_list.value2[0]=valuechar6[0];
   1036                                  current_list.value2[1]=valuechar6[1];
   1037          			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT2, current_list.value2[1]*1000);
   1038                                  peripheral_event=peripheral_event|SBP_SEND_IRDATA_EVT2;
   1039                                  current_list.listlen++;
   1040                                  HalLcdWriteString("event_2", HAL_LCD_LINE_8);
   1041          			
   1042          		}
   1043          		else if(!(peripheral_event&SBP_SEND_IRDATA_EVT3))
   1044          		{
   1045          			current_list.value3[0]=valuechar6[0];
   1046                                  current_list.value3[1]=valuechar6[1];
   1047                                  osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT3, current_list.value3[1]*1000);
   1048                                  peripheral_event=peripheral_event|SBP_SEND_IRDATA_EVT3;
   1049          			current_list.listlen++;
   1050                                  HalLcdWriteString("event_3", HAL_LCD_LINE_8);
   1051          		}
   1052                          else if(!(peripheral_event&SBP_SEND_IRDATA_EVT4))
   1053                            {
   1054                                    current_list.value4[0]=valuechar6[0];
   1055                                    current_list.value4[1]=valuechar6[1];
   1056                                    osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT4, current_list.value4[1]*1000);
   1057                                    peripheral_event=peripheral_event|SBP_SEND_IRDATA_EVT4;
   1058                                    current_list.listlen++;
   1059                                    HalLcdWriteString("event_4", HAL_LCD_LINE_8);
   1060                            }
   1061                          else if(!(peripheral_event&SBP_SEND_IRDATA_EVT5))
   1062                            {
   1063                                    current_list.value5[0]=valuechar6[0];
   1064                                    current_list.value5[1]=valuechar6[1];
   1065                                    osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT5, current_list.value5[1]*1000);
   1066                                    peripheral_event=peripheral_event|SBP_SEND_IRDATA_EVT5;
   1067                                    current_list.listlen++;
   1068                                    HalLcdWriteString("event_5", HAL_LCD_LINE_8);
   1069                            }
   1070          //                else if(!(peripheral_event&SBP_SEND_IRDATA_EVT6))
   1071          //                  {
   1072          //                          current_list.value6[0]=valuechar6[0];
   1073          //                          current_list.value6[1]=valuechar6[1];
   1074          //                          osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT6, current_list.value6[1]*1000);
   1075          //                          peripheral_event=peripheral_event|SBP_SEND_IRDATA_EVT6;
   1076          //                          current_list.listlen++;
   1077          //                          HalLcdWriteString("event_6", HAL_LCD_LINE_8);
   1078          //                  }
   1079                        
   1080                       
   1081                           
   1082          		SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, &current_list.listlen);
   1083                     
   1084                          HalLcdWriteStringValue("list_len:", current_list.listlen, 10, HAL_LCD_LINE_2);
   1085                     
   1086          
   1087                        
   1088                    
   1089          		break;
   1090                    case SIMPLEPROFILE_CHAR7:
   1091                      SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR7, valuechar7);
   1092          //             if(valuechar7[0]==0xA2)
   1093          //               {
   1094          //                  
   1095          //                  Batt_MeasLevel();
   1096          //                 
   1097          //               }
   1098          //          
   1099          		break;
   1100                   case SIMPLEPROFILE_CHAR8:
   1101                      SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR8, valuechar8);
   1102           
   1103                       if(valuechar8[0]==0xA1)
   1104                         {
   1105                            // initTempSensor();
   1106                             valuechar8[0]= getTemperature(); 
   1107                             SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR8, SIMPLEPROFILE_CHAR8_LEN, valuechar8);
   1108                             HalLcdWriteString(hex2Str(valuechar8), HAL_LCD_LINE_7);
   1109                         }
   1110          
   1111          	    break;  
   1112                        
   1113          	default:
   1114          		// should not reach here!
   1115          		break;
   1116          	}
   1117          }
   1118          /*********************************************************************
   1119           * @fn      Receive_Save_Uartsend_irdata(void)
   1120           * @brief  if
   1121           * @param  
   1122           * @return  none
   1123           */
   1124          //  static void Receive_Save_Uartsend_irdata(void)
   1125          // {
   1126          //               
   1127          //		
   1128          //	
   1129          //
   1130          //} 
   1131          /*********************************************************************
   1132           * @fn      Uartsend_irdata
   1133           * @brief  
   1134           * @param  
   1135           * @return  none
   1136           */
   1137          // static void Uartsend_irdata()
   1138          // {
   1139          //	        //HalLcdWriteString("ok", HAL_LCD_LINE_5); 
   1140          //		recv_value[UART_DATA_START_INDEX] = 0xE3;
   1141          //                SbpHalUARTWrite(recv_value + UART_DATA_START_INDEX, data_len-4);
   1142          // }
   1143           
   1144          
   1145          /*********************************************************************
   1146           * @fn      bdAddr2Str
   1147           *
   1148           * @brief   Convert Bluetooth address to string. Only needed when
   1149           *          LCD display is used.
   1150           *
   1151           * @return  none
   1152           */
   1153          char *bdAddr2Str(uint8 *pAddr) {
   1154          	uint8 i;
   1155          	char hex[] = "0123456789ABCDEF";
   1156          	static char str[B_ADDR_STR_LEN];
   1157          	char *pStr = str;
   1158          
   1159          	*pStr++ = '0';
   1160          	*pStr++ = 'x';
   1161          
   1162          	// Start from end of addr
   1163          	pAddr += B_ADDR_LEN;
   1164          
   1165          	for (i = B_ADDR_LEN; i > 0; i--) {
   1166          		*pStr++ = hex[*--pAddr >> 4];
   1167          		*pStr++ = hex[*pAddr & 0x0F];
   1168          	}
   1169          
   1170          	*pStr = 0;
   1171          
   1172          	return str;
   1173          }
   1174          char *hex2Str(uint8 *hexcode) {
   1175          	uint8 i;
   1176          	uint8 hexlen;
   1177          	char hex[] = "0123456789ABCDEF";
   1178          	hexlen=osal_strlen((char*)hexcode);
   1179          	static char str[20];
   1180          	char *pStr = str;
   1181          
   1182          	*pStr++ = '0';
   1183          	*pStr++ = 'x';
   1184          
   1185          	// Start from end of addr
   1186          	//pAddr += B_ADDR_LEN;
   1187                  for(i=0;i<hexlen;i++)
   1188          	{
   1189          	  *pStr++ = hex[*hexcode>>4];
   1190                    *pStr++ = hex[*hexcode&0x0F];
   1191                    *hexcode++;
   1192          	 
   1193          	}
   1194          
   1195          	*pStr = 0;
   1196          
   1197          	return str;
   1198          }
   1199          
   1200          /*********************************************************************
   1201           *********************************************************************/
   1202          //static int ascii2hex(char c) {
   1203          //	int ret = -1;
   1204          //	if ((c >= '0') && (c <= '9')) {
   1205          //		ret = c - '0';
   1206          //	} else if ((c >= 'A') && (c <= 'Z')) {
   1207          //		ret = c - 'A' + 65;
   1208          //	} else if ((c >= 'a') && (c <= 'z')) {
   1209          //		ret = c - 'a' + 97;
   1210          //	}
   1211          //	return ret;
   1212          //}
   1213          //static void updateDeviceName(char *name, uint8 len) {
   1214          //	uint8 k = 0;
   1215          //	for (k = 0; k < len; k++) {
   1216          //		scanRspData[k + 2] = ascii2hex(*(name + k));
   1217          //	}
   1218          //}
   1219          
   1220          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0    142  SimpleBLEPeripheral_Init
                          0 0 142 -> Batt_AddService
                          0 0 142 -> DevInfo_AddService
                          0 0 142 -> GAPRole_SetParameter
                          0 0 142 -> GAP_SetParamValue
                          0 0 142 -> GATTServApp_AddService
                          0 0 142 -> GGS_AddService
                          0 0 142 -> HalAdcInit
                          0 0 142 -> HalLcdWriteString
                          0 0 142 -> HalLedSet
                          0 0 142 -> RegisterForKeys
                          0 0 142 -> SbpHalUART_Init
                          0 0 142 -> SimpleProfile_AddService
                          0 0 142 -> SimpleProfile_RegisterAppCBs
                          0 0 142 -> SimpleProfile_SetParameter
                          0 0 142 -> osal_set_event
                          0 0 142 -> set_passkey
       0      0     19  SimpleBLEPeripheral_ProcessEvent
                          0 0  15 -> GAPBondMgr_Register
                          0 0  15 -> GAPRole_SetParameter
                          0 0  15 -> GAPRole_StartDevice
                          0 0  15 -> HalLcdWriteString
                          0 0  16 -> HalLcdWriteStringValue
                          0 0  19 -> HalSPIRead
                          0 0  15 -> SimpleProfile_SetParameter
                          0 0  15 -> delay_nus
                          0 0  15 -> hex2Str
                          0 0  15 -> osal_msg_deallocate
                          0 0  15 -> osal_msg_receive
                          0 0  19 -> osal_start_timerEx
                          0 0  15 -> simpleBLEPeripheral_ProcessOSALMsg
       2      0     49  bdAddr2Str
       2      0    219  hex2Str
                          0 0  26 -> osal_strlen
       1      0     23  peripheralStateNotificationCB
                          0 0  23 -> DevInfo_SetParameter
                          0 0  23 -> GAPRole_GetParameter
                          0 0  23 -> HalLcdWriteString
                          0 0  23 -> bdAddr2Str
       0      0     12  simpleBLEPeripheralPairStateCB
                          0 0  12 -> GAPRole_TerminateConnection
                          0 0  11 -> HalLcdWriteString
                          0 0  12 -> HalLcdWriteStringValue
       0      0     25  simpleBLEPeripheral_ProcessOSALMsg
                          0 0  10 -> GAPRole_SetParameter
                          0 0  10 -> HalLcdWriteString
                          0 0  10 -> HalSPIErase
                          0 0  10 -> delay_nus
                          0 0  10 -> set_de_passkey
       2      0    197  simpleProfileChangeCB
                          0 0 193 -> HalLcdWriteString
                          0 0 194 -> HalLcdWriteStringValue
                          0 0 197 -> HalSPIRead
                          0 0 197 -> HalSPIWrite
                          0 0 193 -> SimpleProfile_GetParameter
                          0 0 193 -> SimpleProfile_SetParameter
                          0 0 193 -> delay_nus
                          0 0 193 -> getTemperature
                          0 0 193 -> hex2Str
                          0 0 195 -> osal_memcpy
                          0 0 193 -> osal_memset
                          0 0 197 -> osal_start_timerEx
                          0 0 193 -> osal_strlen
                          0 0 193 -> set_code_name


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
      17  ?<Constant "0123456789ABCDEF">
      17  ?<Constant "0123456789ABCDEF">_1
      12  ?<Constant "Advertising">
      15  ?<Constant "BLE slave aico">
      16  ?<Constant "Bonding success">
      10  ?<Constant "Connected">
      13  ?<Constant "Disconnected">
       6  ?<Constant "Error">
      12  ?<Constant "Initialized">
      13  ?<Constant "Pairing fail">
      16  ?<Constant "Pairing fail--a">
      16  ?<Constant "Pairing started">
      16  ?<Constant "Pairing success">
      10  ?<Constant "Timed Out">
      14  ?<Constant "cur_data_len:">
      10  ?<Constant "event1 ok">
      10  ?<Constant "event2 ok">
      10  ?<Constant "event3 ok">
      10  ?<Constant "event4 ok">
      10  ?<Constant "event5 ok">
       8  ?<Constant "event_1">
       8  ?<Constant "event_2">
       8  ?<Constant "event_3">
       8  ?<Constant "event_4">
       8  ?<Constant "event_5">
      10  ?<Constant "list_len:">
      10  ?<Constant "reset all">
      15  ?<Constant "restart adver ">
      21  ?<Constant "start advertising ok">
       5  ?<Constant "test">
      20  ?<Constant {0}>
      20  ?<Constant {0}>_1
      20  ?<Constant {0}>_10
      20  ?<Constant {0}>_11
      20  ?<Constant {0}>_12
      20  ?<Constant {0}>_13
      20  ?<Constant {0}>_14
      20  ?<Constant {0}>_2
      20  ?<Constant {0}>_3
      20  ?<Constant {0}>_4
      20  ?<Constant {0}>_5
      20  ?<Constant {0}>_6
      20  ?<Constant {0}>_7
      20  ?<Constant {0}>_8
      20  ?<Constant {0}>_9
       7  ?<Initializer for advertData>
      13  ?<Initializer for current_list>
      30  ?<Initializer for scanRspData>
       4  ?<Initializer for simpleBLEPeripheral_BondMgrC
       4  ?<Initializer for simpleBLEPeripheral_Peripher
       2  ?<Initializer for simpleBLEPeripheral_SimplePr
       6  ??SimpleBLEPeripheral_Init?relay
       6  ??SimpleBLEPeripheral_ProcessEvent?relay
       8  ??Subroutine16_0
       6  ??bdAddr2Str?relay
       6  ??hex2Str?relay
       6  ??peripheralStateNotificationCB?relay
       6  ??simpleBLEPeripheralPairStateCB?relay
       6  ??simpleBLEPeripheral_ProcessOSALMsg?relay
       6  ??simpleProfileChangeCB?relay
       2  ?Subroutine0
      31  ?Subroutine1
       7  ?Subroutine10
      10  ?Subroutine11
      13  ?Subroutine12
      13  ?Subroutine13
       6  ?Subroutine14
      16  ?Subroutine15
      15  ?Subroutine2
      10  ?Subroutine3
      17  ?Subroutine4
      14  ?Subroutine5
      11  ?Subroutine6
      16  ?Subroutine7
      14  ?Subroutine8
       8  ?Subroutine9
       1  P0DIR
       1  P0SEL
       1  P1DIR
       1  P1SEL
       1  P2SEL
       1  PERCFG
     705  SimpleBLEPeripheral_Init
     883  SimpleBLEPeripheral_ProcessEvent
       1  TRANSFER_DATA_STATE_IN
       1  U1BAUD
       1  U1GCR
       1  _A_P0
       1  _A_P1
       1  _A_U1CSR
       4  __Constant_ea60
       4  __Constant_ffffffff
       7  advertData
      99  bdAddr2Str
      20  buf
      20  bufrx
       1  cur_data_len
      13  current_list
       1  data_len
       1  data_len_index
       2  gapConnHandle
       1  gapProfileState
     109  hex2Str
     306  peripheralStateNotificationCB
       2  peripheral_event
     128  recv_value
      30  scanRspData
     115  simpleBLEPeripheralPairStateCB
       4  simpleBLEPeripheral_BondMgrCBs
       4  simpleBLEPeripheral_PeripheralCBs
     116  simpleBLEPeripheral_ProcessOSALMsg
       2  simpleBLEPeripheral_SimpleProfileCBs
       1  simpleBLEPeripheral_TaskID
    1239  simpleProfileChangeCB
      15  str
      20  str
      10  temp_18b20
       1  temp_18b20_flag
       1  temp_flag
      20  temperature
      20  time_databuf_read
       1  time_datalen_read

 
 3 783 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
    11 bytes in segment SFR_AN
    60 bytes in segment XDATA_I
    60 bytes in segment XDATA_ID
   663 bytes in segment XDATA_ROM_C
   266 bytes in segment XDATA_Z
 
 3 891 bytes of CODE  memory
   655 bytes of CONST memory (+  8 bytes shared)
     0 bytes of DATA  memory (+ 11 bytes shared)
   326 bytes of XDATA memory

Errors: none
Warnings: 3
