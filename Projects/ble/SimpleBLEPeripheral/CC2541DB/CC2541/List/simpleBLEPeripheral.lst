###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             26/Mar/2014  11:39:55 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\Source\simpleBLEPeripheral.c   #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\config\build #
#                          Components.cfg (-DBROADCASTER_CFG=0x01             #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\buildConfig #
#                          .cfg (-DHOST_CONFIG=PERIPHERAL_CFG                 #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\Source\simpleBLEPeripheral.c   #
#                          -D INT_HEAP_LEN=3074 -D HALNODEBUG -D              #
#                          OSAL_CBTIMER_NUM_TASKS=1 -D xHAL_AES_DMA=TRUE -D   #
#                          HAL_DMA=TRUE -D POWER_SAVING -D xPLUS_BROADCASTER  #
#                          -D HAL_LCD=TRUE -D HAL_LED=TRUE -D HAL_UART=TRUE   #
#                          -D HAL_ADC=TRUE -lcN E:\TexasInstruments\BLE-CC254 #
#                          x-1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\ #
#                          CC2541\List\ -o E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheral\CC2541DB\CC254 #
#                          1\Obj\ -e --debug --core=plain --dptr=16,1         #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\ -I   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\include\ -I     #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\hal\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\hal\target\CC2541EB\ -I        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\osal\include\ -I E:\TexasInstruments\BLE-CC254x- #
#                          1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\.. #
#                          \..\..\..\Components\services\saddr\ -I            #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\ble\controller\phy\ -I         #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\controller\include\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\. #
#                          .\..\Components\ble\host\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\common\cc2540\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\npi\n #
#                          pi_np\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profi #
#                          les\Roles\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\P #
#                          rofiles\SimpleProfile\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\Profiles\DevInf #
#                          o\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Project #
#                          s\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profiles\ #
#                          Batt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Proj #
#                          ects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profil #
#                          es\HIDDev\ -Ohz                                    #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\simpleBLE #
#                          Peripheral.lst                                     #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\simpleBLEP #
#                          eripheral.r51                                      #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\SimpleBLEPeripheral\Source\simpleBLEPeripheral.c
      1          /**************************************************************************************************
      2           Filename:       simpleBLEPeripheral.c
      3           Revised:        $Date: 2010-08-06 08:56:11 -0700 (Fri, 06 Aug 2010) $
      4           Revision:       $Revision: 23333 $
      5          
      6           Description:    This file contains the Simple BLE Peripheral sample application
      7           for use with the CC2540 Bluetooth Low Energy Protocol Stack.
      8          
      9           Copyright 2010 - 2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11           IMPORTANT: Your use of this Software is limited to those specific rights
     12           granted under the terms of a software license agreement between the user
     13           who downloaded the software, his/her employer (which must be your employer)
     14           and Texas Instruments Incorporated (the "License").  You may not use this
     15           Software unless you agree to abide by the terms of the License. The License
     16           limits your use, and you acknowledge, that the Software may not be modified,
     17           copied or distributed unless embedded on a Texas Instruments microcontroller
     18           or used solely and exclusively in conjunction with a Texas Instruments radio
     19           frequency transceiver, which is integrated into your product.  Other than for
     20           the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21           works of, modify, distribute, perform, display or sell this Software and/or
     22           its documentation for any purpose.
     23          
     24           YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25           PROVIDED ï¿½AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26           INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27           NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28           TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29           NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30           LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31           INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32           OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33           OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34           (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36           Should you have any questions regarding your right to use this Software,
     37           contact Texas Instruments Incorporated at www.TI.com.
     38           **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bcomdef.h"
     45          #include "OSAL.h"
     46          #include "OSAL_PwrMgr.h"
     47          #include "osal_snv.h"
     48          
     49          #include "OnBoard.h"
     50          #include "hal_adc.h"
     51          #include "hal_led.h"
     52          #include "hal_key.h"
     53          #include "hal_lcd.h"
     54          #include "SimpleBLESerialUart.h"
     55          
     56          #include "gatt.h"
     57          
     58          #include "hci.h"
     59          
     60          #include "gapgattserver.h"
     61          #include "gattservapp.h"
     62          #include "devinfoservice.h"
     63          #include "simpleGATTprofile.h"
     64          
     65          #if defined ( PLUS_BROADCASTER )
     66          #include "peripheralBroadcaster.h"
     67          #else
     68          #include "peripheral.h"
     69          #endif
     70          
     71          #include "gapbondmgr.h"
     72          
     73          #include "simpleBLEPeripheral.h"
     74          
     75          #if defined FEATURE_OAD
     76          #include "oad.h"
     77          #include "oad_target.h"
     78          #endif
     79          
     80          #include "hal_i2c.h"
     81          #include "hal_eeprom.h"
     82          #include "hal_at24c32.h"
     83          #include "hal_ds1307.h"
     84          #include "SimpleEepromUtils.h"
     85          #include "SimpleRTCInterrupt.h"
     86          #include "SimpleBLESPIFlash.h"
     87          #include "battservice.h"
     88          #include "SimpleTemperature.h"
     89          #include "SimpleDS18B20.h"
     90          #include "Simplepasscode.h"
     91          /*********************************************************************
     92           * MACROS
     93           */
     94          
     95          /*********************************************************************
     96           * CONSTANTS
     97           */
     98          
     99          // How often to perform periodic event
    100          #define SBP_PERIODIC_EVT_PERIOD                   5000
    101          
    102          #define TEMP_CHECK_PERIOD                         5000
    103          
    104          // How often to check battery voltage (in ms)
    105          #define BATTERY_CHECK_PERIOD                     10000////////////////////////////////////batt
    106          
    107          // What is the advertising interval when device is discoverable (units of 625us, 160=100ms)
    108          #define DEFAULT_ADVERTISING_INTERVAL          160//16000
    109          /*//èå´20MS-10.24Sä¹é´ é¤å»å¹¿æ­å»¶æ¶æ¶é´0-10msï¼ä¸ºå¶å¯è®¾ç½®çèå´ã
    110          //è¥å¹¿æ­äºä»¶æ¯å¯æ«ææ åäºä»¶æéè¿æ¥æ åäºä»¶ å¶å¼ä¸å¾å°äº100MSï¼è¥å¹¿æ­äºä»¶æ¯å¯è¿æ¥æ åäºä»¶ï¼å¶å¼å¯ä»¥ä¸º20MSæèæ´å¤§   
    111          //ä¸ææºéä¿¡è¿ç¨ä¸­ç¨çæ¯,é»è®¤è®¾ç½®  GAP_ADTYPE_ADV_INDå³å¯è¿æ¥æ åäºä»¶  æµåèæ¶å¯ä»¥éå½è°æ´å¶å¼ */
    112          // Whether to enable automatic parameter update request when a connection is formed
    113          #define DEFAULT_ENABLE_UPDATE_REQUEST        TRUE 
    114          
    115          // Limited discoverable mode advertises for 30.72s, and then stops
    116          // General discoverable mode advertises indefinitely
    117          
    118          #if defined ( CC2540_MINIDK )
    119          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_LIMITED
    120          #else
    121          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_GENERAL
    122          #endif  // defined ( CC2540_MINIDK )
    123          // Minimum connection interval (units of 1.25ms, 80=100ms) if automatic parameter update request is enabled
    124          #define DEFAULT_DESIRED_MIN_CONN_INTERVAL     80
    125          
    126          // Maximum connection interval (units of 1.25ms, 800=1000ms) if automatic parameter update request is enabled
    127          #define DEFAULT_DESIRED_MAX_CONN_INTERVAL    180
    128          
    129          // Slave latency to use if automatic parameter update request is enabled
    130          #define DEFAULT_DESIRED_SLAVE_LATENCY         0//10  åæ°æ´æ°æå¼ ä¸ææºéä¿¡æ¶ è¦å°äº4
    131          
    132          // Supervision timeout value (units of 10ms, 1000=10s) if automatic parameter update request is enabled
    133          #define DEFAULT_DESIRED_CONN_TIMEOUT        500//ä¸ææºéä¿¡æ¶ è¦å°äºç­äº6S
    134          
    135          // Company Identifier: Texas Instruments Inc. (13)
    136          #define TI_COMPANY_ID                         0x000D
    137          
    138          #define INVALID_CONNHANDLE                    0xFFFF
    139          
    140          // Length of bd addr as a string
    141          #define B_ADDR_STR_LEN                        15
    142          
    143          #if defined ( PLUS_BROADCASTER )
    144          #define ADV_IN_CONN_WAIT                    500 // delay 500 ms
    145          #endif
    146          
    147          // GAP connection handle
    148          static uint16 gapConnHandle;
    149          
    150          extern uint8 SBP_UART_STUDY_CMD;
    151          extern uint8 SBP_UART_STUDY_CMD_LEN;
    152          
    153          /*************************************************************
    154           *  recv data define
    155           */
    156          //XDATA uint8 a[3000]={0};
    157          extern UartState u_state;
    158          #define TRANSFER_DATA_SIGN 0xFE
    159          #define TRANSFER_DATA_SIGN_RE 0xFF
    160          //#define UART_DATA_START_INDEX 2
    161          //#define one_time_data_len 125
    162          // uint8 code recv_value1[2540] = { 0 };
    163          static uint8  recv_value[128] = { 0 };
    164          static uint8 TRANSFER_DATA_STATE_IN = FALSE;
    165          //static char newValueBuf[20] = { 0 };
    166          static uint8 data_len = 0, cur_data_len = 0, data_len_index = 0;
    167          
    168          /*********************************************************************
    169           * SPI FLASH
    170           */
    171          uint8 buf[20];
    172          uint8 bufrx[20];
    173          
    174          /*********************************************************************
    175           * temperature
    176           */
    177          uint8 temperature[20];
    178          uint8 temp_18b20[10];
    179          uint8 temp_flag=0;
    180          uint8 temp_18b20_flag=0;
    181          /*************************************************************
    182           *  LIST
    183           */
    184          
    185           typedef struct
    186          {           
    187            
    188            uint8 listlen;                   
    189            uint8 value1[2]; 
    190            uint8 value2[2];                   
    191            uint8 value3[2]; 
    192            uint8 value4[2]; 
    193            uint8 value5[2]; 
    194            uint8 value6[2];  
    195          }list;
    196          
    197          list current_list={1,{0},{0},{0},{0},{0},{0}};
    198          
    199          /*********************************************************************
    200           * EVENT
    201           */
    202          uint16 peripheral_event=0;
    203          uint8 time_databuf_read[20]={0};
    204          uint8 time_datalen_read=0;
    205          
    206          /*********************************************************************
    207           * GLOBAL VARIABLES
    208           */
    209          
    210          /*********************************************************************
    211           * EXTERNAL VARIABLES
    212           */
    213          
    214          /*********************************************************************
    215           * EXTERNAL FUNCTIONS
    216           */
    217          
    218          /*********************************************************************
    219           * LOCAL VARIABLES
    220           */
    221          static uint8 simpleBLEPeripheral_TaskID; // Task ID for internal task/event processing
    222          
    223          static gaprole_States_t gapProfileState = GAPROLE_INIT;
    224          
    225          // GAP - SCAN RSP data (max size = 31 bytes)
    226          static uint8 scanRspData[] = {
    227          // complete name
    228          		0x14,// length of this data
    229          		GAP_ADTYPE_LOCAL_NAME_COMPLETE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    230          		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    231          
    232          		// connection interval range
    233          		0x05,// length of this data
    234          		GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE, LO_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), // 100ms
    235          		HI_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), LO_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL), // 1s
    236          		HI_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL),
    237          
    238          		// Tx power level
    239          		0x02,// length of this data
    240          		GAP_ADTYPE_POWER_LEVEL, 0 // 0dBm
    241          		};
    242          
    243          // GAP - Advertisement data (max size = 31 bytes, though this is
    244          // best kept short to conserve power while advertisting)
    245          static uint8 advertData[] = {
    246          // Flags; this sets the device to use limited discoverable
    247          // mode (advertises for 30 seconds at a time) instead of general
    248          // discoverable mode (advertises indefinitely)
    249          		0x02,// length of this data
    250          		GAP_ADTYPE_FLAGS, DEFAULT_DISCOVERABLE_MODE | GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED,
    251          
    252          		// service UUID, to notify central devices what services are included
    253          		// in this peripheral
    254          		0x03,// length of this data
    255          		GAP_ADTYPE_16BIT_MORE, // some of the UUID's, but not all
    256          		LO_UINT16(SIMPLEPROFILE_SERV_UUID), HI_UINT16(SIMPLEPROFILE_SERV_UUID),
    257          
    258          };
    259          
    260          /*********************************************************************
    261           * LOCAL FUNCTIONS
    262           */
    263          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg);
    264          static void peripheralStateNotificationCB(gaprole_States_t newState);
    265          static void performPeriodicTask(void);
    266          static void simpleProfileChangeCB(uint8 paramID);
    267          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys);
    268          //static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs);
    269          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status);
    270          static char *bdAddr2Str(uint8 *pAddr);
    271          static char *hex2Str(uint8 *hexcode);
    272          //static void gettemp(void);
    273          //static void updateDeviceName(char *name, uint8 len);
    274          //static uint32 atoi(uint8 s[]);
    275          //static void Uartsend_irdata(void);
    276          //static void Receive_Save_Uartsend_irdata(void);
    277          
    278          /*********************************************************************
    279           * PROFILE CALLBACKS
    280           */
    281          
    282          // GAP Role Callbacks
    283          static gapRolesCBs_t simpleBLEPeripheral_PeripheralCBs = { peripheralStateNotificationCB, // Profile State Change Callbacks
    284          		NULL // When a valid RSSI is read from controller (not used by application)
    285          		};
    286          
    287          // GAP Bond Manager Callbacks
    288          static gapBondCBs_t simpleBLEPeripheral_BondMgrCBs = { NULL, // Passcode callback (not used by application)
    289          		simpleBLEPeripheralPairStateCB // Pairing / Bonding state Callback (not used by application)
    290          		};
    291          
    292          // Simple GATT Profile Callbacks
    293          static simpleProfileCBs_t simpleBLEPeripheral_SimpleProfileCBs = { simpleProfileChangeCB // Charactersitic value change callback
    294          		};
    295          
    296          /*********************************************************************
    297           * @fn      pairStateCB
    298           * @brief   Pairing state callback.
    299           * @return  none
    300           */
    301          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status) {
    302          	if (state == GAPBOND_PAIRING_STATE_STARTED) {
    303          		HalLcdWriteString("Pairing started", HAL_LCD_LINE_7);
    304          	} else if (state == GAPBOND_PAIRING_STATE_COMPLETE) {
    305          		if (status == SUCCESS) {
    306          			HalLcdWriteString("Pairing success", HAL_LCD_LINE_7);
    307          		} else {
    308          			HalLcdWriteStringValue("Pairing fail", status, 10, HAL_LCD_LINE_7);
    309          			uint8 a = GAPRole_TerminateConnection();
    310          			HalLcdWriteStringValue("Pairing fail--a", a, 10, HAL_LCD_LINE_7);
    311          		}
    312          	} else if (state == GAPBOND_PAIRING_STATE_BONDED) {
    313          		if (status == SUCCESS) {
    314          			HalLcdWriteString("Bonding success", HAL_LCD_LINE_1);
    315          		}
    316          	}
    317          
    318          	//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_ZEKEZANG_EVT, 5000);
    319          }
    320          
    321          /*********************************************************************
    322           * @fn      simpleBLECentralPasscodeCB
    323           * @brief   Passcode callback.
    324           * @return  none
    325          
    326           static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs) {
    327           HalLcdWriteStringValue("uiInputs:", uiInputs, 10, HAL_LCD_LINE_5);
    328           HalLcdWriteStringValue("uiOutputs", uiOutputs, 10, HAL_LCD_LINE_6);
    329           }
    330           */
    331          
    332          /*********************************************************************
    333           * @fn      readWriteFlash
    334           * @brief   readWriteFlash
    335           * @return  none
    336          
    337           static uint32 passs = 0;
    338           static void readWriteFlash() {
    339           uint8 * aa;
    340           aa = osal_msg_allocate(15);
    341           osal_memset(aa, 0, 15);
    342           osal_memcpy(aa, "as", 2);
    343           uint16 p = 1234;
    344           if (osal_snv_write(0xE0, sizeof(uint16), &p) == SUCCESS) {
    345           HalLcdWriteString("write ok", HAL_LCD_LINE_2);
    346           }
    347           osal_msg_deallocate(aa);
    348           uint8 bb[15] = { 0x0 };
    349           uint16 bb = 0;
    350           if (osal_snv_read(0xE0, 15, &bb) == SUCCESS) {
    351           HalLcdWriteString("read ok", HAL_LCD_LINE_2);
    352           passs = bb;
    353           }
    354           }
    355           */
    356          
    357          
    358          /*********************************************************************
    359           * PUBLIC FUNCTIONS
    360           */
    361          
    362          /*********************************************************************
    363           * @fn      SimpleBLEPeripheral_Init
    364           *
    365           * @brief   Initialization function for the Simple BLE Peripheral App Task.
    366           *          This is called during initialization and should contain
    367           *          any application specific initialization (ie. hardware
    368           *          initialization/setup, table initialization, power up
    369           *          notificaiton ... ).
    370           *
    371           * @param   task_id - the ID assigned by OSAL.  This ID should be
    372           *                    used to send messages and set timers.
    373           *
    374           * @return  none
    375           */
    376          void SimpleBLEPeripheral_Init(uint8 task_id) {
    377          
    378            simpleBLEPeripheral_TaskID = task_id;
    379          	SbpHalUART_Init(task_id);
    380                  
    381          	// Setup the GAP Peripheral Role Profile
    382          	{
    383          
    384          #if defined( CC2540_MINIDK )
    385          		// For the CC2540DK-MINI keyfob, device doesn't start advertising until button is pressed
    386          		uint8 initial_advertising_enable = FALSE;
    387          #else
    388          		// For other hardware platforms, device starts advertising upon initialization
    389          		uint8 initial_advertising_enable = TRUE;
    390          #endif
    391          
    392          		// By setting this to zero, the device will go into the waiting state after
    393          		// being discoverable for 30.72 second, and will not being advertising again
    394          		// until the enabler is set back to TRUE
    395          		uint16 gapRole_AdvertOffTime = 0;
    396          
    397          		uint8 enable_update_request = DEFAULT_ENABLE_UPDATE_REQUEST;
    398          		uint16 desired_min_interval = DEFAULT_DESIRED_MIN_CONN_INTERVAL;
    399          		uint16 desired_max_interval = DEFAULT_DESIRED_MAX_CONN_INTERVAL;
    400          		uint16 desired_slave_latency = DEFAULT_DESIRED_SLAVE_LATENCY;
    401          		uint16 desired_conn_timeout = DEFAULT_DESIRED_CONN_TIMEOUT;
    402          
    403          		// Set the GAP Role Parameters
    404          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    405          		GAPRole_SetParameter(GAPROLE_ADVERT_OFF_TIME, sizeof(uint16), &gapRole_AdvertOffTime);
    406          
    407          		GAPRole_SetParameter(GAPROLE_SCAN_RSP_DATA, sizeof(scanRspData), scanRspData);
    408          		GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(advertData), advertData);
    409          
    410          		GAPRole_SetParameter(GAPROLE_PARAM_UPDATE_ENABLE, sizeof(uint8), &enable_update_request);
    411          		GAPRole_SetParameter(GAPROLE_MIN_CONN_INTERVAL, sizeof(uint16), &desired_min_interval);
    412          		GAPRole_SetParameter(GAPROLE_MAX_CONN_INTERVAL, sizeof(uint16), &desired_max_interval);
    413          		GAPRole_SetParameter(GAPROLE_SLAVE_LATENCY, sizeof(uint16), &desired_slave_latency);
    414          		GAPRole_SetParameter(GAPROLE_TIMEOUT_MULTIPLIER, sizeof(uint16), &desired_conn_timeout);
    415          	}
    416          
    417          	//readWriteFlash();
    418          
    419          
    420          	// Set advertising interval
    421          	{
    422          		uint16 advInt = DEFAULT_ADVERTISING_INTERVAL;
    423          
    424          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MIN, advInt);
    425          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MAX, advInt);
    426          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MIN, advInt);
    427          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MAX, advInt);
    428          	}
    429                  set_passkey();
    430          
    431          
    432          	// Initialize GATT attributes
    433          	GGS_AddService(GATT_ALL_SERVICES); // GAP
    434          	GATTServApp_AddService(GATT_ALL_SERVICES); // GATT attributes
    435          	DevInfo_AddService(); // Device Information Service
    436          	SimpleProfile_AddService(GATT_ALL_SERVICES); // Simple GATT Profile
    437                  Batt_AddService();     // Battery Service
    438                  
    439                  
    440                  
    441                  
    442          #if defined FEATURE_OAD
    443          			VOID OADTarget_AddService(); // OAD Profile
    444          #endif
    445          
    446          	// Setup the SimpleProfile Characteristic Values
    447          	{
    448          	
    449          		uint8 charValue4 = 4;
    450                          uint8 charValue1[SIMPLEPROFILE_CHAR1_LEN] = { 0 };
    451                          uint8 charValue2[SIMPLEPROFILE_CHAR2_LEN] = { 0 };
    452                          uint8 charValue3[SIMPLEPROFILE_CHAR3_LEN] = { 0 };
    453                          uint8 charValue5[SIMPLEPROFILE_CHAR5_LEN] = { 0 };
    454                          uint8 charValue6[SIMPLEPROFILE_CHAR6_LEN] = { 0 };
    455                          uint8 charValue7[SIMPLEPROFILE_CHAR7_LEN] = { 0 };
    456          		
    457          		
    458          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &charValue4);
    459          		
    460                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR1, SIMPLEPROFILE_CHAR1_LEN, charValue1);
    461                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR2, SIMPLEPROFILE_CHAR2_LEN, charValue2);
    462                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR3, SIMPLEPROFILE_CHAR3_LEN, charValue3);
    463                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR5, SIMPLEPROFILE_CHAR5_LEN, charValue5);
    464                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR6, SIMPLEPROFILE_CHAR6_LEN, charValue6);
    465                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, charValue7);
    466                       
    467          	}
    468          
    469          	HalLcdWriteString("BLE slave aico", HAL_LCD_LINE_1);////////////////////////////////////////////////////////////////////////////
    470          
    471          	// Register callback with SimpleGATTprofile
    472          	VOID SimpleProfile_RegisterAppCBs(&simpleBLEPeripheral_SimpleProfileCBs);
    473          
    474          	//who open who byebye
    475          	//HCI_EXT_ClkDivOnHaltCmd(HCI_EXT_ENABLE_CLK_DIVIDE_ON_HALT); no no no...
    476          
    477          	// Register for all key events - This app will handle all key events
    478          	RegisterForKeys(simpleBLEPeripheral_TaskID);
    479          
    480          #if defined ( DC_DC_P0_7 )
    481          	// Enable stack to toggle bypass control on TPS62730 (DC/DC converter)
    482          	HCI_EXT_MapPmIoPortCmd( HCI_EXT_PM_IO_PORT_P0, HCI_EXT_PM_IO_PORT_PIN7 );
    483          #endif // defined ( DC_DC_P0_7 )
    484          	// Setup a delayed profile startup
    485          	osal_set_event(simpleBLEPeripheral_TaskID, SBP_START_DEVICE_EVT);
    486                  
    487                  
    488                   // initialize the ADC for battery reads
    489                  HalAdcInit();
    490          
    491          	/***********************************test something zekezang**********************************/
    492          	//HalLcdWriteString(" start", HAL_LCD_LINE_1);
    493          	
    494                      XNV_SPI_INIT();
    495                  //è®¾ç½®P1.0ç«¯å£æ¹åä¸ºè¾åº
    496                  P0DIR |= BV(4);
    497                  
    498                  //è®¾ç½®P1.0ç«¯å£ä¸ºGPIOåè½
    499                  P0SEL &= ~BV(4);
    500                  
    501                  HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF );
    502                  HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF );
    503                  HalLedSet(HAL_LED_3, HAL_LED_MODE_OFF );
    504                  HalLedSet(HAL_LED_4, HAL_LED_MODE_OFF );
    505               
    506          
    507          
    508          	/***********************************test something zekezang**********************************/
    509          }
    510          
    511          /*********************************************************************
    512           * @fn      SimpleBLEPeripheral_ProcessEvent
    513           *
    514           * @brief   Simple BLE Peripheral Application Task event processor.  This function
    515           *          is called to process all events for the task.  Events
    516           *          include timers, messages and any other user defined events.
    517           *
    518           * @param   task_id  - The OSAL assigned task ID.
    519           * @param   events - events to process.  This is a bit map and can
    520           *                   contain more than one event.
    521           *
    522           * @return  events not processed
    523           */
    524          uint16 SimpleBLEPeripheral_ProcessEvent(uint8 task_id, uint16 events) {
    525          
    526          	VOID task_id; // OSAL required parameter that isn't used in this function
    527                  uint8 i;
    528          	if (events & SYS_EVENT_MSG) {
    529          		uint8 *pMsg;
    530          
    531          		if ((pMsg = osal_msg_receive(simpleBLEPeripheral_TaskID)) != NULL) {
    532          			simpleBLEPeripheral_ProcessOSALMsg((osal_event_hdr_t *) pMsg);
    533          
    534          			// Release the OSAL message
    535          			VOID osal_msg_deallocate(pMsg);
    536          		}
    537          
    538          		// return unprocessed events
    539          		return (events ^ SYS_EVENT_MSG);
    540          	}
    541          
    542          	if (events & SBP_START_DEVICE_EVT) {
    543          		// Start the Device
    544          		GAPRole_StartDevice(&simpleBLEPeripheral_PeripheralCBs);
    545          
    546          		// Start Bond Manager
    547          		GAPBondMgr_Register(&simpleBLEPeripheral_BondMgrCBs);
    548          
    549          		// Set timer for first periodic event
    550          		//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, SBP_PERIODIC_EVT_PERIOD);
    551                          
    552                          // Set timer for first battery read event
    553                          //osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, BATTERY_CHECK_PERIOD );
    554                          
    555          
    556                          //osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_TEMP_EVT, TEMP_CHECK_PERIOD );
    557                    
    558          		return (events ^ SBP_START_DEVICE_EVT);
    559          	}
    560          
    561          //	if (events & SBP_PERIODIC_EVT) {
    562          
    563                         // Restart timer
    564          //		if (SBP_PERIODIC_EVT_PERIOD) {
    565          //			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, SBP_PERIODIC_EVT_PERIOD);
    566          //		}
    567          //
    568          //		// Perform periodic application task
    569          //		performPeriodicTask();
    570          //               
    571          //		return (events ^ SBP_PERIODIC_EVT);
    572          //	}
    573          
    574          //	if (events & SBP_ZEKEZANG_EVT) {
    575          //		uint8 initial_advertising_enable = FALSE;
    576          //		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    577          //		return (events ^ SBP_ZEKEZANG_EVT);
    578          //	}
    579          
    580          //	if (events & SBP_SEND_IRDATA_EVT) {
    581          //		HalLcdWriteString("send plan compl", HAL_LCD_LINE_4);
    582          //		return (events ^ SBP_SEND_IRDATA_EVT);
    583          //	}
    584          //
    585          //	if (events & SBP_ADV_IN_CONNECTION_EVT) {
    586          //		uint8 turnOnAdv = TRUE;
    587          //		// Turn on advertising while in a connection
    588          //		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &turnOnAdv);
    589          //
    590          //		return (events ^ SBP_ADV_IN_CONNECTION_EVT);
    591          //	}
    592                  
    593          //        if (events & SBP_TEMP_EVT) {
    594          //             
    595          //	       return (events ^ SBP_TEMP_EVT);
    596          //	}
    597                  
    598                  if (events & SBP_SEND_IRDATA_EVT1) {
    599          		
    600                          HalSPIRead(current_list.value1[0]*256,&time_datalen_read,1);
    601          		    //å»¶æ¶
    602                          for(i=20; i>0; i--)
    603                            delay_nus(50);
    604                          HalSPIRead(current_list.value1[0]*256+1,time_databuf_read,time_datalen_read-4);
    605                          
    606          		HalLcdWriteString(hex2Str(time_databuf_read), HAL_LCD_LINE_4);
    607          
    608                          current_list.listlen--;
    609                          SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, &current_list.listlen);
    610                          HalLcdWriteStringValue("list_len:", current_list.listlen, 10, HAL_LCD_LINE_2);
    611                          HalLcdWriteString("event1 ok", HAL_LCD_LINE_5);
    612          
    613                          peripheral_event^=SBP_SEND_IRDATA_EVT1;  
    614          		return (events ^ SBP_SEND_IRDATA_EVT1);
    615          	}
    616          	if (events & SBP_SEND_IRDATA_EVT2) {
    617          		
    618                         HalSPIRead(current_list.value2[0]*256,&time_datalen_read,1);
    619          		    //å»¶æ¶
    620                         for(i=20; i>0; i--)
    621                            delay_nus(50);
    622                          HalSPIRead(current_list.value2[0]*256+1,time_databuf_read,time_datalen_read-4);
    623                          
    624          		HalLcdWriteString(hex2Str(time_databuf_read), HAL_LCD_LINE_4);
    625          
    626                          current_list.listlen--;
    627                          SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, &current_list.listlen);
    628                          HalLcdWriteStringValue("list_len:", current_list.listlen, 10, HAL_LCD_LINE_2);
    629                          HalLcdWriteString("event2 ok", HAL_LCD_LINE_5);
    630          
    631                          peripheral_event^=SBP_SEND_IRDATA_EVT2;
    632                          //peripheral_event=events ^ SBP_SEND_IRDATA_EVT2;
    633          		return (events ^ SBP_SEND_IRDATA_EVT2);
    634          	}
    635          	if (events & SBP_SEND_IRDATA_EVT3) {
    636          		
    637                         HalSPIRead(current_list.value3[0]*256,&time_datalen_read,1);
    638          		    //å»¶æ¶
    639                         for(i=20; i>0; i--)
    640                            delay_nus(50);
    641                          HalSPIRead(current_list.value3[0]*256+1,time_databuf_read,time_datalen_read-4);
    642                          
    643          		HalLcdWriteString(hex2Str(time_databuf_read), HAL_LCD_LINE_4);
    644          
    645                          current_list.listlen--;
    646                          SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, &current_list.listlen);
    647                          HalLcdWriteStringValue("list_len:", current_list.listlen, 10, HAL_LCD_LINE_2);
    648                          HalLcdWriteString("event3 ok", HAL_LCD_LINE_5);
    649          
    650                          peripheral_event^=SBP_SEND_IRDATA_EVT3;
    651                          //peripheral_event=events ^ SBP_SEND_IRDATA_EVT3;
    652          		return (events ^ SBP_SEND_IRDATA_EVT3);
    653          	}
    654                  if (events & SBP_SEND_IRDATA_EVT4) {
    655          		
    656                         HalSPIRead(current_list.value4[0]*256,&time_datalen_read,1);
    657          		    //å»¶æ¶
    658                          for(i=20; i>0; i--)
    659                            delay_nus(50);
    660                          HalSPIRead(current_list.value4[0]*256+1,time_databuf_read,time_datalen_read-4);
    661                          
    662          		HalLcdWriteString(hex2Str(time_databuf_read), HAL_LCD_LINE_4);
    663          
    664                          current_list.listlen--;
    665                          SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, &current_list.listlen);
    666                          HalLcdWriteStringValue("list_len:", current_list.listlen, 10, HAL_LCD_LINE_2);
    667                          HalLcdWriteString("event4 ok", HAL_LCD_LINE_5);
    668          
    669                          peripheral_event^=SBP_SEND_IRDATA_EVT3;
    670                          //peripheral_event=events ^ SBP_SEND_IRDATA_EVT4;
    671          		return (events ^ SBP_SEND_IRDATA_EVT4);
    672          	}
    673                  if (events & SBP_SEND_IRDATA_EVT5) {
    674          		
    675                          HalSPIRead(current_list.value5[0]*256,&time_datalen_read,1);
    676          		    //å»¶æ¶
    677                          for(i=20; i>0; i--)
    678                            delay_nus(50);
    679                          HalSPIRead(current_list.value5[0]*256+1,time_databuf_read,time_datalen_read-4);
    680                          
    681          		HalLcdWriteString(hex2Str(time_databuf_read), HAL_LCD_LINE_4);
    682          
    683                          current_list.listlen--;
    684                          SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, &current_list.listlen);
    685                          HalLcdWriteStringValue("list_len:", current_list.listlen, 10, HAL_LCD_LINE_2);
    686                          HalLcdWriteString("event5 ok", HAL_LCD_LINE_5);
    687                          peripheral_event^=SBP_SEND_IRDATA_EVT3;
    688                          //peripheral_event=events ^ SBP_SEND_IRDATA_EVT5;
    689          		return (events ^ SBP_SEND_IRDATA_EVT5);
    690          	}
    691          //        if (events & SBP_SEND_IRDATA_EVT6) {
    692          //		
    693          //                HalSPIRead(current_list.value6[0]*256,&time_datalen_read,1);
    694          //		    //å»¶æ¶
    695          //                for(i=20; i>0; i--)
    696          //                  delay_nus(50);
    697          //                HalSPIRead(current_list.value6[0]*256+1,time_databuf_read,time_datalen_read-4);
    698          //                
    699          //		HalLcdWriteString(hex2Str(time_databuf_read), HAL_LCD_LINE_4);
    700          //
    701          //                current_list.listlen--;
    702          //                SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, &current_list.listlen);
    703          //                HalLcdWriteStringValue("list_len:", current_list.listlen, 10, HAL_LCD_LINE_2);
    704          //                 HalLcdWriteString("event6 ok", HAL_LCD_LINE_5);
    705          //               // peripheral_event^=SBP_SEND_IRDATA_EVT5;
    706          //                peripheral_event=events ^ SBP_SEND_IRDATA_EVT6;
    707          //		return (events ^ SBP_SEND_IRDATA_EVT6);
    708          //	}
    709          //        
    710                  
    711                  
    712          
    713          	return 0;
    714          }
    715          
    716          /*********************************************************************
    717           * @fn      simpleBLEPeripheral_ProcessOSALMsg
    718           *
    719           * @brief   Process an incoming task message.
    720           *
    721           * @param   pMsg - message to process
    722           *
    723           * @return  none
    724           */
    725          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg) {
    726          	switch (pMsg->event) {
    727          	case KEY_CHANGE:
    728          		simpleBLEPeripheral_HandleKeys(((keyChange_t *) pMsg)->state, ((keyChange_t *) pMsg)->keys);
    729          		break;
    730          	default:
    731          		// do nothing
    732          		break;
    733          	}
    734          }
    735          
    736          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys) {
    737              uint8 i;
    738          	if (keys & HAL_KEY_UP) {
    739          		//u_state = IR_DATA_STUDY_CMD_START_BEGIN_STATE;
    740          		//SbpHalUARTWrite(&SBP_UART_STUDY_CMD, SBP_UART_STUDY_CMD_LEN);
    741          	}
    742          
    743          	if (keys & HAL_KEY_LEFT) {
    744          //		HalLcdWriteString("change to de_paddkey_name", HAL_LCD_LINE_3);
    745          //                set_de_passkey();
    746          	}
    747                   
    748                     if(keys ==(HAL_KEY_CENTER|HAL_KEY_SHORT))
    749                    {
    750                       HalLcdWriteString("test", HAL_LCD_LINE_6);
    751                        //å¼å§ç¹äº®LED
    752                          P0_4=0;
    753                         // while(1);
    754                          for(i=20; i>0; i--)
    755                            delay_nus(2000);
    756                          P0_4=1;
    757                               
    758                    }
    759                  if(keys ==(HAL_KEY_CENTER|HAL_KEY_LONG))
    760                    {
    761                       HalLcdWriteString("reset all", HAL_LCD_LINE_7);
    762                       set_de_passkey();
    763                       HalSPIErase();
    764                       list current_list={1,{0},{0},{0},{0},{0},{0}};
    765                        
    766                    }
    767          
    768                  
    769          	if (keys & HAL_KEY_RIGHT) {
    770          		//HalLcdWriteStringValue("data_len:", data_len, 10, HAL_LCD_LINE_2);
    771          	}
    772          
    773          }
    774          
    775          /*********************************************************************
    776           * @fn      peripheralStateNotificationCB
    777           *
    778           * @brief   Notification from the profile of a state change.
    779           *
    780           * @param   newState - new state
    781           *
    782           * @return  none
    783           */
    784          static void peripheralStateNotificationCB(gaprole_States_t newState) {
    785          
    786          	//HalLcdWriteStringValue("newState", newState, 10, HAL_LCD_LINE_4);
    787          
    788          	switch (newState) {
    789          	case GAPROLE_STARTED: {
    790          		uint8 ownAddress[B_ADDR_LEN];
    791          		uint8 systemId[DEVINFO_SYSTEM_ID_LEN];
    792          
    793          		GAPRole_GetParameter(GAPROLE_BD_ADDR, ownAddress);
    794          
    795          		// use 6 bytes of device address for 8 bytes of system ID value
    796          		systemId[0] = ownAddress[0];
    797          		systemId[1] = ownAddress[1];
    798          		systemId[2] = ownAddress[2];
    799          
    800          		// set middle bytes to zero
    801          		systemId[4] = 0x00;
    802          		systemId[3] = 0x00;
    803          
    804          		// shift three bytes up
    805          		systemId[7] = ownAddress[5];
    806          		systemId[6] = ownAddress[4];
    807          		systemId[5] = ownAddress[3];
    808          
    809          		DevInfo_SetParameter(DEVINFO_SYSTEM_ID, DEVINFO_SYSTEM_ID_LEN, systemId);
    810          
    811          		// Display device address
    812          		bdAddr2Str(ownAddress);
    813          		HalLcdWriteString(bdAddr2Str(ownAddress), HAL_LCD_LINE_3);
    814          		HalLcdWriteString("Initialized", HAL_LCD_LINE_3);
    815          	}
    816          		break;
    817          
    818          	case GAPROLE_ADVERTISING: {
    819          		HalLcdWriteString("Advertising", HAL_LCD_LINE_3);
    820          	}
    821          		break;
    822          
    823          	case GAPROLE_CONNECTED: {
    824          		HalLcdWriteString("Connected", HAL_LCD_LINE_3);
    825          		//simpleProfile_StateNotify( uint16 connHandle, attHandleValueNoti_t *pNoti )
    826          		GAPRole_GetParameter(GAPROLE_CONNHANDLE, &gapConnHandle);
    827          	}
    828          		break;
    829          
    830          	case GAPROLE_WAITING: {
    831          		HalLcdWriteString("Disconnected", HAL_LCD_LINE_3);
    832          	}
    833          		break;
    834          
    835          	case GAPROLE_WAITING_AFTER_TIMEOUT: {
    836          		HalLcdWriteString("Timed Out", HAL_LCD_LINE_3);
    837          	}
    838          		break;
    839          
    840          	case GAPROLE_ERROR: {
    841          		HalLcdWriteString("Error", HAL_LCD_LINE_3);
    842          	}
    843          		break;
    844          
    845          	default: {
    846          		HalLcdWriteString("", HAL_LCD_LINE_3);
    847          	}
    848          		break;
    849          
    850          	}
    851          
    852          	gapProfileState = newState;
    853          
    854          #if !defined( CC2540_MINIDK )
    855          	VOID gapProfileState; // added to prevent compiler warning with
    856          						  // "CC2540 Slave" configurations
    857          #endif
    858          
    859          }
    860          
    861          /*********************************************************************
    862           * @fn      performPeriodicTask
    863           *
    864           * @brief   Perform a periodic application task. This function gets
    865           *          called every five seconds as a result of the SBP_PERIODIC_EVT
    866           *          OSAL event. In this example, the value of the third
    867           *          characteristic in the SimpleGATTProfile service is retrieved
    868           *          from the profile, and then copied into the value of the
    869           *          the fourth characteristic.
    870           *
    871           * @param   none
    872           *
    873           * @return  none
    874           */
    875          static void performPeriodicTask(void) {
    876          	uint8 valueToCopy;
    877          	uint8 stat;
    878          
    879          	// Call to retrieve the value of the third characteristic in the profile
    880          	stat = SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR2, &valueToCopy);
    881          
    882          	if (stat == SUCCESS) {
    883          		/*
    884          		 * Call to set that value of the fourth characteristic in the profile. Note
    885          		 * that if notifications of the fourth characteristic have been enabled by
    886          		 * a GATT client device, then a notification will be sent every time this
    887          		 * function is called.
    888          		 */
    889                         // HalLcdWriteString("ok", HAL_LCD_LINE_5);
    890          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &valueToCopy);
    891          	}
    892          }
    893          
    894          /*********************************************************************
    895           * @fn      simpleProfileChangeCB
    896           * @brief   Callback from SimpleBLEProfile indicating a value change
    897           * @param   paramID - parameter ID of the value that was changed.
    898           *
    899           * @return  none
    900           */
    901          static void simpleProfileChangeCB(uint8 paramID) {
    902          	 //osal_memset(buf, 0, 20);
    903            uint8 valuechar1[20]={0},valuechar2[20]={0},valuechar3[20]={0},valuechar5[20]={0},valuechar6[20]={0},valuechar7[20]={0},valuechar8[20]={0};
    904          	 uint8 databuf_read[20]={0};
    905          	 uint8 datalen_read=0,i;
    906                   uint8  irdata_return[20]={0};
    907          	switch (paramID) {
    908          	case SIMPLEPROFILE_CHAR1://ç¨äºå¯ç ç¨æ·åä¿®æ¹
    909                       SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR1,valuechar1);
    910                       set_code_name(valuechar1);
    911          		break;
    912                          
    913                  case SIMPLEPROFILE_CHAR2://ç¨äºæ¥æ¶ é¥æ§å¨ çº¢å¤ä»£ç åº
    914                       SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR2, valuechar2);
    915                     //  HalLcdWriteString(valuechar2, HAL_LCD_LINE_5);
    916          	
    917                      if ((valuechar2[0] == TRANSFER_DATA_SIGN) && (valuechar2[1] == TRANSFER_DATA_SIGN_RE)) 
    918          	     {
    919          			TRANSFER_DATA_STATE_IN = FALSE;
    920                                 
    921          	      }
    922                      
    923                      
    924          	   if ((valuechar2[3] != 0) && (!TRANSFER_DATA_STATE_IN)) 
    925          	    {
    926          			
    927                                  data_len = valuechar2[3];
    928          			TRANSFER_DATA_STATE_IN = TRUE;
    929          			data_len_index = 0;
    930          			osal_memset(recv_value, 0, data_len);
    931                         
    932          	    }
    933          	
    934          	  cur_data_len = osal_strlen((char*)valuechar2);//æé®é¢ æ¯0çè¯ é¿åº¦ä¸å¯¹
    935                   //  cur_data_len = sizeof(valuechar2);
    936                     HalLcdWriteStringValue("cur_data_len:",cur_data_len, 10, HAL_LCD_LINE_1); 
    937                     
    938          	   if (TRANSFER_DATA_STATE_IN) 
    939          	    {
    940          		osal_memcpy((recv_value + data_len_index), valuechar2, cur_data_len);
    941                          
    942          		data_len_index += cur_data_len;
    943                          
    944          	     }
    945                     //HalLcdWriteStringValue("data_len:", data_len, 10, HAL_LCD_LINE_6);
    946                     //HalLcdWriteStringValue("recv_value_len:", osal_strlen((char *)recv_value), 10, HAL_LCD_LINE_7); 
    947                     //HalLcdWriteStringValue("data_len_index:", data_len_index, 10, HAL_LCD_LINE_8);
    948                 
    949                     if (data_len_index == data_len) 
    950          	   {
    951          	
    952          		HalSPIWrite(valuechar2[2]*256,recv_value+3,data_len-3);//å­å¨ çº¢å¤æ°æ®é¿åº¦ï¼é¿åº¦åæ¬ 0XFE+0XFF+ç¼å·+é¿åº¦+çº¢å¤æ°æ® ï¼+çº¢å¤æ°æ®
    953          		TRANSFER_DATA_STATE_IN = FALSE;
    954          		//HalLcdWriteStringValue("data_len:", osal_strlen((char *)recv_value), 10, HAL_LCD_LINE_6); 
    955                         // HalLcdWriteStringValue("listlen:", current_list.listlen, 10, HAL_LCD_LINE_8);
    956          		data_len = 0;
    957          		cur_data_len = 0;
    958          		data_len_index = 0;
    959          		osal_memset(recv_value, 0, data_len);
    960                          irdata_return[0]=0x11;          
    961                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR5, SIMPLEPROFILE_CHAR5_LEN, irdata_return);
    962                          
    963                     }
    964          
    965                           break;
    966                           
    967          	case SIMPLEPROFILE_CHAR3://æ¥æ¶ ç¼ç å½ä»¤  è¯»åçº¢å¤ç å¹¶è½¬å  å¶å®æ¯æ²¡ææ¶é´æ³ç çº¢å¤å½ä»¤
    968          		SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR3, valuechar3);
    969                         
    970          		HalSPIRead(valuechar3[0]*256,&datalen_read,1);//è¯»å çº¢å¤æ°æ®é¿åº¦  è¯»çº¢å¤æ°æ®ãIICåéæ¶è¦ç¨å°
    971          		    //å»¶æ¶1S
    972                         for(i=20; i>0; i--)
    973                            delay_nus(50);
    974                          HalSPIRead(valuechar3[0]*256+1,databuf_read,datalen_read-4);//è¯»å çº¢å¤æ°æ® 	
    975          		HalLcdWriteString(hex2Str(databuf_read), HAL_LCD_LINE_6);
    976                          
    977                           //å¼å§ç¹äº®LED
    978                          P0_4=0;
    979                         // while(1);
    980                          for(i=20; i>0; i--)
    981                            delay_nus(1200);
    982                          P0_4=1;
    983                          
    984          		break;
    985                  case SIMPLEPROFILE_CHAR4:
    986                     //  SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR4, newValueBuf);
    987                    
    988          		break;
    989                   case SIMPLEPROFILE_CHAR5://æ¥æ¶å® ä¸æ¡çº¢å¤ä»£ç å  çåé¦å¼
    990                     
    991                          SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR5, valuechar5);
    992                          HalLcdWriteString(hex2Str(valuechar5), HAL_LCD_LINE_7);
    993                      
    994          		break;
    995                   
    996                  case SIMPLEPROFILE_CHAR6://æ¥æ¶å¸¦ææ¶é´æ³çæä»¤   ç¼ç å½ä»¤+æ§è¡æ¶é´æ³
    997                    
    998                        SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR6, valuechar6);
    999                
   1000                        if(!(peripheral_event&SBP_SEND_IRDATA_EVT1))
   1001          		{	
   1002          			
   1003                                  current_list.value1[0]=valuechar6[0];
   1004                                  current_list.value1[1]=valuechar6[1];
   1005          			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT1, current_list.value1[1]*1000);
   1006                                  peripheral_event=peripheral_event|SBP_SEND_IRDATA_EVT1;
   1007                                  current_list.listlen++;
   1008                                  HalLcdWriteString("event_1", HAL_LCD_LINE_8);
   1009          			 
   1010          			
   1011          		}
   1012          		else if(!(peripheral_event&SBP_SEND_IRDATA_EVT2))
   1013          		{	
   1014          			
   1015                                  current_list.value2[0]=valuechar6[0];
   1016                                  current_list.value2[1]=valuechar6[1];
   1017          			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT2, current_list.value2[1]*1000);
   1018                                  peripheral_event=peripheral_event|SBP_SEND_IRDATA_EVT2;
   1019                                  current_list.listlen++;
   1020                                  HalLcdWriteString("event_2", HAL_LCD_LINE_8);
   1021          			
   1022          		}
   1023          		else if(!(peripheral_event&SBP_SEND_IRDATA_EVT3))
   1024          		{
   1025          			current_list.value3[0]=valuechar6[0];
   1026                                  current_list.value3[1]=valuechar6[1];
   1027                                  osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT3, current_list.value3[1]*1000);
   1028                                  peripheral_event=peripheral_event|SBP_SEND_IRDATA_EVT3;
   1029          			current_list.listlen++;
   1030                                  HalLcdWriteString("event_3", HAL_LCD_LINE_8);
   1031          		}
   1032                          else if(!(peripheral_event&SBP_SEND_IRDATA_EVT4))
   1033                            {
   1034                                    current_list.value4[0]=valuechar6[0];
   1035                                    current_list.value4[1]=valuechar6[1];
   1036                                    osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT4, current_list.value4[1]*1000);
   1037                                    peripheral_event=peripheral_event|SBP_SEND_IRDATA_EVT4;
   1038                                    current_list.listlen++;
   1039                                    HalLcdWriteString("event_4", HAL_LCD_LINE_8);
   1040                            }
   1041                          else if(!(peripheral_event&SBP_SEND_IRDATA_EVT5))
   1042                            {
   1043                                    current_list.value5[0]=valuechar6[0];
   1044                                    current_list.value5[1]=valuechar6[1];
   1045                                    osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT5, current_list.value5[1]*1000);
   1046                                    peripheral_event=peripheral_event|SBP_SEND_IRDATA_EVT5;
   1047                                    current_list.listlen++;
   1048                                    HalLcdWriteString("event_5", HAL_LCD_LINE_8);
   1049                            }
   1050          //                else if(!(peripheral_event&SBP_SEND_IRDATA_EVT6))
   1051          //                  {
   1052          //                          current_list.value6[0]=valuechar6[0];
   1053          //                          current_list.value6[1]=valuechar6[1];
   1054          //                          osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT6, current_list.value6[1]*1000);
   1055          //                          peripheral_event=peripheral_event|SBP_SEND_IRDATA_EVT6;
   1056          //                          current_list.listlen++;
   1057          //                          HalLcdWriteString("event_6", HAL_LCD_LINE_8);
   1058          //                  }
   1059                        
   1060                       
   1061                           
   1062          		SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, &current_list.listlen);
   1063                     
   1064                          HalLcdWriteStringValue("list_len:", current_list.listlen, 10, HAL_LCD_LINE_2);
   1065                     
   1066          
   1067                        
   1068                    
   1069          		break;
   1070                    case SIMPLEPROFILE_CHAR7:
   1071                      SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR7, valuechar7);
   1072          //             if(valuechar7[0]==0xA2)
   1073          //               {
   1074          //                  
   1075          //                  Batt_MeasLevel();
   1076          //                 
   1077          //               }
   1078          //          
   1079          		break;
   1080                   case SIMPLEPROFILE_CHAR8:
   1081                      SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR8, valuechar8);
   1082           
   1083                       if(valuechar8[0]==0xA1)
   1084                         {
   1085                            // initTempSensor();
   1086                             valuechar8[0]= getTemperature(); 
   1087                             SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR8, SIMPLEPROFILE_CHAR8_LEN, valuechar8);
   1088                             HalLcdWriteString(hex2Str(valuechar8), HAL_LCD_LINE_7);
   1089                         }
   1090          
   1091          	    break;  
   1092                        
   1093          	default:
   1094          		// should not reach here!
   1095          		break;
   1096          	}
   1097          }
   1098          /*********************************************************************
   1099           * @fn      Receive_Save_Uartsend_irdata(void)
   1100           * @brief  if
   1101           * @param  
   1102           * @return  none
   1103           */
   1104          //  static void Receive_Save_Uartsend_irdata(void)
   1105          // {
   1106          //               
   1107          //		
   1108          //	
   1109          //
   1110          //} 
   1111          /*********************************************************************
   1112           * @fn      Uartsend_irdata
   1113           * @brief  
   1114           * @param  
   1115           * @return  none
   1116           */
   1117          // static void Uartsend_irdata()
   1118          // {
   1119          //	        //HalLcdWriteString("ok", HAL_LCD_LINE_5); 
   1120          //		recv_value[UART_DATA_START_INDEX] = 0xE3;
   1121          //                SbpHalUARTWrite(recv_value + UART_DATA_START_INDEX, data_len-4);
   1122          // }
   1123           
   1124          
   1125          /*********************************************************************
   1126           * @fn      bdAddr2Str
   1127           *
   1128           * @brief   Convert Bluetooth address to string. Only needed when
   1129           *          LCD display is used.
   1130           *
   1131           * @return  none
   1132           */
   1133          char *bdAddr2Str(uint8 *pAddr) {
   1134          	uint8 i;
   1135          	char hex[] = "0123456789ABCDEF";
   1136          	static char str[B_ADDR_STR_LEN];
   1137          	char *pStr = str;
   1138          
   1139          	*pStr++ = '0';
   1140          	*pStr++ = 'x';
   1141          
   1142          	// Start from end of addr
   1143          	pAddr += B_ADDR_LEN;
   1144          
   1145          	for (i = B_ADDR_LEN; i > 0; i--) {
   1146          		*pStr++ = hex[*--pAddr >> 4];
   1147          		*pStr++ = hex[*pAddr & 0x0F];
   1148          	}
   1149          
   1150          	*pStr = 0;
   1151          
   1152          	return str;
   1153          }
   1154          char *hex2Str(uint8 *hexcode) {
   1155          	uint8 i;
   1156          	uint8 hexlen;
   1157          	char hex[] = "0123456789ABCDEF";
   1158          	hexlen=osal_strlen((char*)hexcode);
   1159          	static char str[20];
   1160          	char *pStr = str;
   1161          
   1162          	*pStr++ = '0';
   1163          	*pStr++ = 'x';
   1164          
   1165          	// Start from end of addr
   1166          	//pAddr += B_ADDR_LEN;
   1167                  for(i=0;i<hexlen;i++)
   1168          	{
   1169          	  *pStr++ = hex[*hexcode>>4];
   1170                    *pStr++ = hex[*hexcode&0x0F];
   1171                    *hexcode++;
   1172          	 
   1173          	}
   1174          
   1175          	*pStr = 0;
   1176          
   1177          	return str;
   1178          }
   1179          
   1180          /*********************************************************************
   1181           *********************************************************************/
   1182          //static int ascii2hex(char c) {
   1183          //	int ret = -1;
   1184          //	if ((c >= '0') && (c <= '9')) {
   1185          //		ret = c - '0';
   1186          //	} else if ((c >= 'A') && (c <= 'Z')) {
   1187          //		ret = c - 'A' + 65;
   1188          //	} else if ((c >= 'a') && (c <= 'z')) {
   1189          //		ret = c - 'a' + 97;
   1190          //	}
   1191          //	return ret;
   1192          //}
   1193          //static void updateDeviceName(char *name, uint8 len) {
   1194          //	uint8 k = 0;
   1195          //	for (k = 0; k < len; k++) {
   1196          //		scanRspData[k + 2] = ascii2hex(*(name + k));
   1197          //	}
   1198          //}
   1199          
   1200          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0    142  SimpleBLEPeripheral_Init
                          0 0 142 -> Batt_AddService
                          0 0 142 -> DevInfo_AddService
                          0 0 142 -> GAPRole_SetParameter
                          0 0 142 -> GAP_SetParamValue
                          0 0 142 -> GATTServApp_AddService
                          0 0 142 -> GGS_AddService
                          0 0 142 -> HalAdcInit
                          0 0 142 -> HalLcdWriteString
                          0 0 142 -> HalLedSet
                          0 0 142 -> RegisterForKeys
                          0 0 142 -> SbpHalUART_Init
                          0 0 142 -> SimpleProfile_AddService
                          0 0 142 -> SimpleProfile_RegisterAppCBs
                          0 0 142 -> SimpleProfile_SetParameter
                          0 0 142 -> osal_set_event
                          0 0 142 -> set_passkey
       0      0     18  SimpleBLEPeripheral_ProcessEvent
                          0 0  14 -> GAPBondMgr_Register
                          0 0  14 -> GAPRole_StartDevice
                          0 0  14 -> HalLcdWriteString
                          0 0  15 -> HalLcdWriteStringValue
                          0 0  14 -> HalSPIErase
                          0 0  18 -> HalSPIRead
                          0 0  14 -> SimpleProfile_SetParameter
                          0 0  14 -> delay_nus
                          0 0  14 -> hex2Str
                          0 0  14 -> osal_msg_deallocate
                          0 0  14 -> osal_msg_receive
                          0 0  14 -> set_de_passkey
       2      0     49  bdAddr2Str
       2      0    219  hex2Str
                          0 0  26 -> osal_strlen
       1      0     23  peripheralStateNotificationCB
                          0 0  23 -> DevInfo_SetParameter
                          0 0  23 -> GAPRole_GetParameter
                          0 0  23 -> HalLcdWriteString
                          0 0  23 -> bdAddr2Str
       0      0     12  simpleBLEPeripheralPairStateCB
                          0 0  12 -> GAPRole_TerminateConnection
                          0 0  11 -> HalLcdWriteString
                          0 0  12 -> HalLcdWriteStringValue
       2      0    197  simpleProfileChangeCB
                          0 0 193 -> HalLcdWriteString
                          0 0 194 -> HalLcdWriteStringValue
                          0 0 197 -> HalSPIRead
                          0 0 197 -> HalSPIWrite
                          0 0 193 -> SimpleProfile_GetParameter
                          0 0 193 -> SimpleProfile_SetParameter
                          0 0 193 -> delay_nus
                          0 0 193 -> getTemperature
                          0 0 193 -> hex2Str
                          0 0 195 -> osal_memcpy
                          0 0 193 -> osal_memset
                          0 0 197 -> osal_start_timerEx
                          0 0 193 -> osal_strlen
                          0 0 193 -> set_code_name


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
      17  ?<Constant "0123456789ABCDEF">
      17  ?<Constant "0123456789ABCDEF">_1
      12  ?<Constant "Advertising">
      15  ?<Constant "BLE slave aico">
      16  ?<Constant "Bonding success">
      10  ?<Constant "Connected">
      13  ?<Constant "Disconnected">
       6  ?<Constant "Error">
      12  ?<Constant "Initialized">
      13  ?<Constant "Pairing fail">
      16  ?<Constant "Pairing fail--a">
      16  ?<Constant "Pairing started">
      16  ?<Constant "Pairing success">
      10  ?<Constant "Timed Out">
      14  ?<Constant "cur_data_len:">
      10  ?<Constant "event1 ok">
      10  ?<Constant "event2 ok">
      10  ?<Constant "event3 ok">
      10  ?<Constant "event4 ok">
      10  ?<Constant "event5 ok">
       8  ?<Constant "event_1">
       8  ?<Constant "event_2">
       8  ?<Constant "event_3">
       8  ?<Constant "event_4">
       8  ?<Constant "event_5">
      10  ?<Constant "list_len:">
      10  ?<Constant "reset all">
       5  ?<Constant "test">
      20  ?<Constant {0}>
      20  ?<Constant {0}>_1
      20  ?<Constant {0}>_10
      20  ?<Constant {0}>_11
      20  ?<Constant {0}>_12
      20  ?<Constant {0}>_13
      20  ?<Constant {0}>_14
      20  ?<Constant {0}>_2
      20  ?<Constant {0}>_3
      20  ?<Constant {0}>_4
      20  ?<Constant {0}>_5
      20  ?<Constant {0}>_6
      20  ?<Constant {0}>_7
      20  ?<Constant {0}>_8
      20  ?<Constant {0}>_9
       7  ?<Initializer for advertData>
      13  ?<Initializer for current_list>
      30  ?<Initializer for scanRspData>
       4  ?<Initializer for simpleBLEPeripheral_BondMgrC
       4  ?<Initializer for simpleBLEPeripheral_Peripher
       2  ?<Initializer for simpleBLEPeripheral_SimplePr
       6  ??SimpleBLEPeripheral_Init?relay
       6  ??SimpleBLEPeripheral_ProcessEvent?relay
       8  ??Subroutine14_0
       6  ??bdAddr2Str?relay
       6  ??hex2Str?relay
       6  ??peripheralStateNotificationCB?relay
       6  ??simpleBLEPeripheralPairStateCB?relay
       6  ??simpleProfileChangeCB?relay
       2  ?Subroutine0
      31  ?Subroutine1
      10  ?Subroutine10
      13  ?Subroutine11
      13  ?Subroutine12
      16  ?Subroutine13
      15  ?Subroutine2
      10  ?Subroutine3
      14  ?Subroutine4
      11  ?Subroutine5
      16  ?Subroutine6
      14  ?Subroutine7
       8  ?Subroutine8
       7  ?Subroutine9
       1  P0DIR
       1  P0SEL
       1  P1DIR
       1  P1SEL
       1  P2SEL
       1  PERCFG
     695  SimpleBLEPeripheral_Init
     890  SimpleBLEPeripheral_ProcessEvent
       1  TRANSFER_DATA_STATE_IN
       1  U1BAUD
       1  U1GCR
       1  _A_P0
       1  _A_P1
       1  _A_U1CSR
       4  __Constant_ffffffff
       7  advertData
      99  bdAddr2Str
      20  buf
      20  bufrx
       1  cur_data_len
      13  current_list
       1  data_len
       1  data_len_index
       2  gapConnHandle
       1  gapProfileState
     109  hex2Str
     306  peripheralStateNotificationCB
       2  peripheral_event
     128  recv_value
      30  scanRspData
     115  simpleBLEPeripheralPairStateCB
       4  simpleBLEPeripheral_BondMgrCBs
       4  simpleBLEPeripheral_PeripheralCBs
       2  simpleBLEPeripheral_SimpleProfileCBs
       1  simpleBLEPeripheral_TaskID
    1243  simpleProfileChangeCB
      15  str
      20  str
      10  temp_18b20
       1  temp_18b20_flag
       1  temp_flag
      20  temperature
      20  time_databuf_read
       1  time_datalen_read

 
 3 645 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
    11 bytes in segment SFR_AN
    60 bytes in segment XDATA_I
    60 bytes in segment XDATA_ID
   623 bytes in segment XDATA_ROM_C
   266 bytes in segment XDATA_Z
 
 3 747 bytes of CODE  memory
   619 bytes of CONST memory (+  4 bytes shared)
     0 bytes of DATA  memory (+ 11 bytes shared)
   326 bytes of XDATA memory

Errors: none
Warnings: 3
