###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             18/Mar/2014  16:52:23 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\Source\simpleBLEPeripheral.c   #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\config\build #
#                          Components.cfg (-DBROADCASTER_CFG=0x01             #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\buildConfig #
#                          .cfg (-DHOST_CONFIG=PERIPHERAL_CFG                 #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\Source\simpleBLEPeripheral.c   #
#                          -D INT_HEAP_LEN=3074 -D HALNODEBUG -D              #
#                          OSAL_CBTIMER_NUM_TASKS=1 -D xHAL_AES_DMA=TRUE -D   #
#                          HAL_DMA=TRUE -D POWER_SAVING -D xPLUS_BROADCASTER  #
#                          -D HAL_LCD=TRUE -D HAL_LED=TRUE -D HAL_UART=TRUE   #
#                          -D HAL_ADC=TRUE -lcN E:\TexasInstruments\BLE-CC254 #
#                          x-1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\ #
#                          CC2541\List\ -o E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheral\CC2541DB\CC254 #
#                          1\Obj\ -e --debug --core=plain --dptr=16,1         #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\ -I   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\include\ -I     #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\hal\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\hal\target\CC2541EB\ -I        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\osal\include\ -I E:\TexasInstruments\BLE-CC254x- #
#                          1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\.. #
#                          \..\..\..\Components\services\saddr\ -I            #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\ble\controller\phy\ -I         #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\controller\include\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\. #
#                          .\..\Components\ble\host\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\common\cc2540\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\npi\n #
#                          pi_np\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profi #
#                          les\Roles\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\P #
#                          rofiles\SimpleProfile\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\Profiles\DevInf #
#                          o\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Project #
#                          s\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profiles\ #
#                          Batt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Proj #
#                          ects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profil #
#                          es\HIDDev\ -Ohz                                    #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\simpleBLE #
#                          Peripheral.lst                                     #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\simpleBLEP #
#                          eripheral.r51                                      #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\SimpleBLEPeripheral\Source\simpleBLEPeripheral.c
      1          /**************************************************************************************************
      2           Filename:       simpleBLEPeripheral.c
      3           Revised:        $Date: 2010-08-06 08:56:11 -0700 (Fri, 06 Aug 2010) $
      4           Revision:       $Revision: 23333 $
      5          
      6           Description:    This file contains the Simple BLE Peripheral sample application
      7           for use with the CC2540 Bluetooth Low Energy Protocol Stack.
      8          
      9           Copyright 2010 - 2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11           IMPORTANT: Your use of this Software is limited to those specific rights
     12           granted under the terms of a software license agreement between the user
     13           who downloaded the software, his/her employer (which must be your employer)
     14           and Texas Instruments Incorporated (the "License").  You may not use this
     15           Software unless you agree to abide by the terms of the License. The License
     16           limits your use, and you acknowledge, that the Software may not be modified,
     17           copied or distributed unless embedded on a Texas Instruments microcontroller
     18           or used solely and exclusively in conjunction with a Texas Instruments radio
     19           frequency transceiver, which is integrated into your product.  Other than for
     20           the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21           works of, modify, distribute, perform, display or sell this Software and/or
     22           its documentation for any purpose.
     23          
     24           YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25           PROVIDED ï¿½AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26           INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27           NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28           TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29           NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30           LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31           INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32           OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33           OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34           (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36           Should you have any questions regarding your right to use this Software,
     37           contact Texas Instruments Incorporated at www.TI.com.
     38           **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bcomdef.h"
     45          #include "OSAL.h"
     46          #include "OSAL_PwrMgr.h"
     47          #include "osal_snv.h"
     48          
     49          #include "OnBoard.h"
     50          #include "hal_adc.h"
     51          #include "hal_led.h"
     52          #include "hal_key.h"
     53          #include "hal_lcd.h"
     54          #include "SimpleBLESerialUart.h"
     55          
     56          #include "gatt.h"
     57          
     58          #include "hci.h"
     59          
     60          #include "gapgattserver.h"
     61          #include "gattservapp.h"
     62          #include "devinfoservice.h"
     63          #include "simpleGATTprofile.h"
     64          
     65          #if defined ( PLUS_BROADCASTER )
     66          #include "peripheralBroadcaster.h"
     67          #else
     68          #include "peripheral.h"
     69          #endif
     70          
     71          #include "gapbondmgr.h"
     72          
     73          #include "simpleBLEPeripheral.h"
     74          
     75          #if defined FEATURE_OAD
     76          #include "oad.h"
     77          #include "oad_target.h"
     78          #endif
     79          
     80          #include "hal_i2c.h"
     81          #include "hal_eeprom.h"
     82          #include "hal_at24c32.h"
     83          #include "hal_ds1307.h"
     84          #include "SimpleEepromUtils.h"
     85          #include "SimpleRTCInterrupt.h"
     86          #include "SimpleBLESPIFlash.h"
     87          #include "battservice.h"
     88          #include "SimpleTemperature.h"
     89          #include "SimpleDS18B20.h"
     90          #include "Simplepasscode.h"
     91          /*********************************************************************
     92           * MACROS
     93           */
     94          
     95          /*********************************************************************
     96           * CONSTANTS
     97           */
     98          
     99          // How often to perform periodic event
    100          #define SBP_PERIODIC_EVT_PERIOD                   5000
    101          
    102          #define TEMP_CHECK_PERIOD                         5000
    103          
    104          // How often to check battery voltage (in ms)
    105          #define BATTERY_CHECK_PERIOD                     10000////////////////////////////////////batt
    106          
    107          // What is the advertising interval when device is discoverable (units of 625us, 160=100ms)
    108          #define DEFAULT_ADVERTISING_INTERVAL          160//16000
    109          /*//èå´20MS-10.24Sä¹é´ é¤å»å¹¿æ­å»¶æ¶æ¶é´0-10msï¼ä¸ºå¶å¯è®¾ç½®çèå´ã
    110          //è¥å¹¿æ­äºä»¶æ¯å¯æ«ææ åäºä»¶æéè¿æ¥æ åäºä»¶ å¶å¼ä¸å¾å°äº100MSï¼è¥å¹¿æ­äºä»¶æ¯å¯è¿æ¥æ åäºä»¶ï¼å¶å¼å¯ä»¥ä¸º20MSæèæ´å¤§   
    111          //ä¸ææºéä¿¡è¿ç¨ä¸­ç¨çæ¯,é»è®¤è®¾ç½®  GAP_ADTYPE_ADV_INDå³å¯è¿æ¥æ åäºä»¶  æµåèæ¶å¯ä»¥éå½è°æ´å¶å¼ */
    112          // Whether to enable automatic parameter update request when a connection is formed
    113          #define DEFAULT_ENABLE_UPDATE_REQUEST        TRUE 
    114          
    115          // Limited discoverable mode advertises for 30.72s, and then stops
    116          // General discoverable mode advertises indefinitely
    117          
    118          #if defined ( CC2540_MINIDK )
    119          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_LIMITED
    120          #else
    121          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_GENERAL
    122          #endif  // defined ( CC2540_MINIDK )
    123          // Minimum connection interval (units of 1.25ms, 80=100ms) if automatic parameter update request is enabled
    124          #define DEFAULT_DESIRED_MIN_CONN_INTERVAL     80
    125          
    126          // Maximum connection interval (units of 1.25ms, 800=1000ms) if automatic parameter update request is enabled
    127          #define DEFAULT_DESIRED_MAX_CONN_INTERVAL    180
    128          
    129          // Slave latency to use if automatic parameter update request is enabled
    130          #define DEFAULT_DESIRED_SLAVE_LATENCY         0//10  åæ°æ´æ°æå¼ ä¸ææºéä¿¡æ¶ è¦å°äº4
    131          
    132          // Supervision timeout value (units of 10ms, 1000=10s) if automatic parameter update request is enabled
    133          #define DEFAULT_DESIRED_CONN_TIMEOUT        500//ä¸ææºéä¿¡æ¶ è¦å°äºç­äº6S
    134          
    135          // Company Identifier: Texas Instruments Inc. (13)
    136          #define TI_COMPANY_ID                         0x000D
    137          
    138          #define INVALID_CONNHANDLE                    0xFFFF
    139          
    140          // Length of bd addr as a string
    141          #define B_ADDR_STR_LEN                        15
    142          
    143          #if defined ( PLUS_BROADCASTER )
    144          #define ADV_IN_CONN_WAIT                    500 // delay 500 ms
    145          #endif
    146          
    147          // GAP connection handle
    148          static uint16 gapConnHandle;
    149          
    150          extern uint8 SBP_UART_STUDY_CMD;
    151          extern uint8 SBP_UART_STUDY_CMD_LEN;
    152          
    153          /*************************************************************
    154           *  recv data define
    155           */
    156          //XDATA uint8 a[3000]={0};
    157          extern UartState u_state;
    158          #define TRANSFER_DATA_SIGN 0xFE
    159          #define TRANSFER_DATA_SIGN_RE 0xFF
    160          #define UART_DATA_START_INDEX 2
    161          #define one_time_data_len 125
    162          // uint8 code recv_value1[2540] = { 0 };
    163          static uint8  recv_value[254] = { 0 };
    164          static uint8 TRANSFER_DATA_STATE_IN = FALSE;
    165          //static char newValueBuf[20] = { 0 };
    166          static uint8 data_len = 0, cur_data_len = 0, data_len_index = 0;
    167          
    168          /*********************************************************************
    169           * SPI FLASH
    170           */
    171          uint8 buf[20];
    172          uint8 bufrx[20];
    173          
    174          /*********************************************************************
    175           * temperature
    176           */
    177          uint8 temperature[20];
    178          uint8 temp_18b20[10];
    179          uint8 temp_flag=0;
    180          uint8 temp_18b20_flag=0;
    181          /*************************************************************
    182           *  LIST
    183           */
    184          
    185           typedef struct
    186          {           
    187            
    188            uint8 listlen;                   
    189            uint8 value1[100]; 
    190            uint8 value2[100];                   
    191            uint8 value3[100]; 
    192             //uint8 value4[100]; 
    193              //uint8 value5[100]; 
    194              // uint8 value6[100]; 
    195            uint8 value1_len; 
    196            uint8 value2_len;                   
    197            uint8 value3_len;
    198          }list;
    199          //list current_list={1,{0},{0},0,0}; 
    200           //list current_list={1,{0},{0},{0},{0},{0},0,0,0};
    201          list current_list={1,{0},{0},{0},0,0,0};
    202          
    203          
    204          
    205          /*********************************************************************
    206           * GLOBAL VARIABLES
    207           */
    208          
    209          /*********************************************************************
    210           * EXTERNAL VARIABLES
    211           */
    212          
    213          /*********************************************************************
    214           * EXTERNAL FUNCTIONS
    215           */
    216          
    217          /*********************************************************************
    218           * LOCAL VARIABLES
    219           */
    220          static uint8 simpleBLEPeripheral_TaskID; // Task ID for internal task/event processing
    221          
    222          static gaprole_States_t gapProfileState = GAPROLE_INIT;
    223          
    224          // GAP - SCAN RSP data (max size = 31 bytes)
    225          static uint8 scanRspData[] = {
    226          // complete name
    227          		0x14,// length of this data
    228          		GAP_ADTYPE_LOCAL_NAME_COMPLETE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    229          		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    230          
    231          		// connection interval range
    232          		0x05,// length of this data
    233          		GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE, LO_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), // 100ms
    234          		HI_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), LO_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL), // 1s
    235          		HI_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL),
    236          
    237          		// Tx power level
    238          		0x02,// length of this data
    239          		GAP_ADTYPE_POWER_LEVEL, 0 // 0dBm
    240          		};
    241          
    242          // GAP - Advertisement data (max size = 31 bytes, though this is
    243          // best kept short to conserve power while advertisting)
    244          static uint8 advertData[] = {
    245          // Flags; this sets the device to use limited discoverable
    246          // mode (advertises for 30 seconds at a time) instead of general
    247          // discoverable mode (advertises indefinitely)
    248          		0x02,// length of this data
    249          		GAP_ADTYPE_FLAGS, DEFAULT_DISCOVERABLE_MODE | GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED,
    250          
    251          		// service UUID, to notify central devices what services are included
    252          		// in this peripheral
    253          		0x03,// length of this data
    254          		GAP_ADTYPE_16BIT_MORE, // some of the UUID's, but not all
    255          		LO_UINT16(SIMPLEPROFILE_SERV_UUID), HI_UINT16(SIMPLEPROFILE_SERV_UUID),
    256          
    257          };
    258          
    259          /*********************************************************************
    260           * LOCAL FUNCTIONS
    261           */
    262          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg);
    263          static void peripheralStateNotificationCB(gaprole_States_t newState);
    264          static void performPeriodicTask(void);
    265          static void simpleProfileChangeCB(uint8 paramID);
    266          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys);
    267          //static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs);
    268          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status);
    269          static char *bdAddr2Str(uint8 *pAddr);
    270          static char *hex2Str(uint8 *hexcode);
    271          static void gettemp(void);
    272          //static void updateDeviceName(char *name, uint8 len);
    273          //static uint32 atoi(uint8 s[]);
    274          static void Uartsend_irdata(void);
    275          static void Receive_Save_Uartsend_irdata(void);
    276          
    277          /*********************************************************************
    278           * PROFILE CALLBACKS
    279           */
    280          
    281          // GAP Role Callbacks
    282          static gapRolesCBs_t simpleBLEPeripheral_PeripheralCBs = { peripheralStateNotificationCB, // Profile State Change Callbacks
    283          		NULL // When a valid RSSI is read from controller (not used by application)
    284          		};
    285          
    286          // GAP Bond Manager Callbacks
    287          static gapBondCBs_t simpleBLEPeripheral_BondMgrCBs = { NULL, // Passcode callback (not used by application)
    288          		simpleBLEPeripheralPairStateCB // Pairing / Bonding state Callback (not used by application)
    289          		};
    290          
    291          // Simple GATT Profile Callbacks
    292          static simpleProfileCBs_t simpleBLEPeripheral_SimpleProfileCBs = { simpleProfileChangeCB // Charactersitic value change callback
    293          		};
    294          
    295          /*********************************************************************
    296           * @fn      pairStateCB
    297           * @brief   Pairing state callback.
    298           * @return  none
    299           */
    300          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status) {
    301          	if (state == GAPBOND_PAIRING_STATE_STARTED) {
    302          		HalLcdWriteString("Pairing started", HAL_LCD_LINE_7);
    303          	} else if (state == GAPBOND_PAIRING_STATE_COMPLETE) {
    304          		if (status == SUCCESS) {
    305          			HalLcdWriteString("Pairing success", HAL_LCD_LINE_7);
    306          		} else {
    307          			HalLcdWriteStringValue("Pairing fail", status, 10, HAL_LCD_LINE_7);
    308          			uint8 a = GAPRole_TerminateConnection();
    309          			HalLcdWriteStringValue("Pairing fail--a", a, 10, HAL_LCD_LINE_7);
    310          		}
    311          	} else if (state == GAPBOND_PAIRING_STATE_BONDED) {
    312          		if (status == SUCCESS) {
    313          			HalLcdWriteString("Bonding success", HAL_LCD_LINE_1);
    314          		}
    315          	}
    316          
    317          	//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_ZEKEZANG_EVT, 5000);
    318          }
    319          
    320          /*********************************************************************
    321           * @fn      simpleBLECentralPasscodeCB
    322           * @brief   Passcode callback.
    323           * @return  none
    324          
    325           static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs) {
    326           HalLcdWriteStringValue("uiInputs:", uiInputs, 10, HAL_LCD_LINE_5);
    327           HalLcdWriteStringValue("uiOutputs", uiOutputs, 10, HAL_LCD_LINE_6);
    328           }
    329           */
    330          
    331          /*********************************************************************
    332           * @fn      readWriteFlash
    333           * @brief   readWriteFlash
    334           * @return  none
    335          
    336           static uint32 passs = 0;
    337           static void readWriteFlash() {
    338           uint8 * aa;
    339           aa = osal_msg_allocate(15);
    340           osal_memset(aa, 0, 15);
    341           osal_memcpy(aa, "as", 2);
    342           uint16 p = 1234;
    343           if (osal_snv_write(0xE0, sizeof(uint16), &p) == SUCCESS) {
    344           HalLcdWriteString("write ok", HAL_LCD_LINE_2);
    345           }
    346           osal_msg_deallocate(aa);
    347           uint8 bb[15] = { 0x0 };
    348           uint16 bb = 0;
    349           if (osal_snv_read(0xE0, 15, &bb) == SUCCESS) {
    350           HalLcdWriteString("read ok", HAL_LCD_LINE_2);
    351           passs = bb;
    352           }
    353           }
    354           */
    355          
    356          static void gettemp(void)
    357          {
    358               // osal_snv_read(0xE0,6,&temperature);
    359                 // uint8 TempValue[6];  
    360                  uint8 AvgTemp=0,i=0,j;
    361                  uint8 sensor_data_value;  //ä¼ æå¨æ°æ®
    362          
    363                  initTempSensor();
    364                  AvgTemp = getTemperature();  
    365                  
    366                  temperature[temp_flag]=AvgTemp;
    367                  temp_flag++;
    368                 
    369                  DS18B20_SendConvert();
    370                  //å»¶æ¶1S
    371                  for(j=20; j>0; j--)
    372                    delay_nus(50);
    373                  sensor_data_value=DS18B20_GetTem();
    374                  temp_18b20[temp_18b20_flag]=sensor_data_value;
    375                  temp_18b20_flag++;
    376          
    377                  if(temp_flag==3)
    378                  {
    379          
    380                    for(i=0;i<temp_flag;i++)
    381                       HalLcdWriteStringValueValue("Temp,18b20:", temperature[i], 10, temp_18b20[i],10,i+1);
    382                  }
    383                  
    384                  
    385          }
    386          /*********************************************************************
    387           * PUBLIC FUNCTIONS
    388           */
    389          
    390          /*********************************************************************
    391           * @fn      SimpleBLEPeripheral_Init
    392           *
    393           * @brief   Initialization function for the Simple BLE Peripheral App Task.
    394           *          This is called during initialization and should contain
    395           *          any application specific initialization (ie. hardware
    396           *          initialization/setup, table initialization, power up
    397           *          notificaiton ... ).
    398           *
    399           * @param   task_id - the ID assigned by OSAL.  This ID should be
    400           *                    used to send messages and set timers.
    401           *
    402           * @return  none
    403           */
    404          void SimpleBLEPeripheral_Init(uint8 task_id) {
    405          
    406            simpleBLEPeripheral_TaskID = task_id;
    407          	SbpHalUART_Init(task_id);
    408                  
    409          	// Setup the GAP Peripheral Role Profile
    410          	{
    411          
    412          #if defined( CC2540_MINIDK )
    413          		// For the CC2540DK-MINI keyfob, device doesn't start advertising until button is pressed
    414          		uint8 initial_advertising_enable = FALSE;
    415          #else
    416          		// For other hardware platforms, device starts advertising upon initialization
    417          		uint8 initial_advertising_enable = TRUE;
    418          #endif
    419          
    420          		// By setting this to zero, the device will go into the waiting state after
    421          		// being discoverable for 30.72 second, and will not being advertising again
    422          		// until the enabler is set back to TRUE
    423          		uint16 gapRole_AdvertOffTime = 0;
    424          
    425          		uint8 enable_update_request = DEFAULT_ENABLE_UPDATE_REQUEST;
    426          		uint16 desired_min_interval = DEFAULT_DESIRED_MIN_CONN_INTERVAL;
    427          		uint16 desired_max_interval = DEFAULT_DESIRED_MAX_CONN_INTERVAL;
    428          		uint16 desired_slave_latency = DEFAULT_DESIRED_SLAVE_LATENCY;
    429          		uint16 desired_conn_timeout = DEFAULT_DESIRED_CONN_TIMEOUT;
    430          
    431          		// Set the GAP Role Parameters
    432          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    433          		GAPRole_SetParameter(GAPROLE_ADVERT_OFF_TIME, sizeof(uint16), &gapRole_AdvertOffTime);
    434          
    435          		GAPRole_SetParameter(GAPROLE_SCAN_RSP_DATA, sizeof(scanRspData), scanRspData);
    436          		GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(advertData), advertData);
    437          
    438          		GAPRole_SetParameter(GAPROLE_PARAM_UPDATE_ENABLE, sizeof(uint8), &enable_update_request);
    439          		GAPRole_SetParameter(GAPROLE_MIN_CONN_INTERVAL, sizeof(uint16), &desired_min_interval);
    440          		GAPRole_SetParameter(GAPROLE_MAX_CONN_INTERVAL, sizeof(uint16), &desired_max_interval);
    441          		GAPRole_SetParameter(GAPROLE_SLAVE_LATENCY, sizeof(uint16), &desired_slave_latency);
    442          		GAPRole_SetParameter(GAPROLE_TIMEOUT_MULTIPLIER, sizeof(uint16), &desired_conn_timeout);
    443          	}
    444          
    445          	//readWriteFlash();
    446          
    447          
    448          	// Set advertising interval
    449          	{
    450          		uint16 advInt = DEFAULT_ADVERTISING_INTERVAL;
    451          
    452          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MIN, advInt);
    453          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MAX, advInt);
    454          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MIN, advInt);
    455          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MAX, advInt);
    456          	}
    457                  //set_passkey();
    458          
    459          
    460          	// Initialize GATT attributes
    461          	GGS_AddService(GATT_ALL_SERVICES); // GAP
    462          	GATTServApp_AddService(GATT_ALL_SERVICES); // GATT attributes
    463          	DevInfo_AddService(); // Device Information Service
    464          	SimpleProfile_AddService(GATT_ALL_SERVICES); // Simple GATT Profile
    465                  Batt_AddService();     // Battery Service
    466                  
    467                  
    468                  
    469                  
    470          #if defined FEATURE_OAD
    471          			VOID OADTarget_AddService(); // OAD Profile
    472          #endif
    473          
    474          	// Setup the SimpleProfile Characteristic Values
    475          	{
    476          	
    477          		uint8 charValue4 = 4;
    478                          uint8 charValue1[SIMPLEPROFILE_CHAR1_LEN] = { 0 };
    479                          uint8 charValue2[SIMPLEPROFILE_CHAR2_LEN] = { 0 };
    480                          uint8 charValue3[SIMPLEPROFILE_CHAR3_LEN] = { 0 };
    481                          uint8 charValue5[SIMPLEPROFILE_CHAR5_LEN] = { 0 };
    482                          uint8 charValue6[SIMPLEPROFILE_CHAR6_LEN] = { 0 };
    483                          uint8 charValue7[SIMPLEPROFILE_CHAR7_LEN] = { 0 };
    484          		
    485          		
    486          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &charValue4);
    487          		
    488                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR1, SIMPLEPROFILE_CHAR1_LEN, charValue1);
    489                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR2, SIMPLEPROFILE_CHAR2_LEN, charValue2);
    490                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR3, SIMPLEPROFILE_CHAR3_LEN, charValue3);
    491                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR5, SIMPLEPROFILE_CHAR5_LEN, charValue5);
    492                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR6, SIMPLEPROFILE_CHAR6_LEN, charValue6);
    493                          SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR7, SIMPLEPROFILE_CHAR7_LEN, charValue7);
    494                       
    495          	}
    496          
    497          	HalLcdWriteString("BLE slave aico", HAL_LCD_LINE_1);
    498          
    499          	// Register callback with SimpleGATTprofile
    500          	VOID SimpleProfile_RegisterAppCBs(&simpleBLEPeripheral_SimpleProfileCBs);
    501          
    502          	//who open who byebye
    503          	//HCI_EXT_ClkDivOnHaltCmd(HCI_EXT_ENABLE_CLK_DIVIDE_ON_HALT); no no no...
    504          
    505          	// Register for all key events - This app will handle all key events
    506          	RegisterForKeys(simpleBLEPeripheral_TaskID);
    507          
    508          #if defined ( DC_DC_P0_7 )
    509          	// Enable stack to toggle bypass control on TPS62730 (DC/DC converter)
    510          	HCI_EXT_MapPmIoPortCmd( HCI_EXT_PM_IO_PORT_P0, HCI_EXT_PM_IO_PORT_PIN7 );
    511          #endif // defined ( DC_DC_P0_7 )
    512          	// Setup a delayed profile startup
    513          	osal_set_event(simpleBLEPeripheral_TaskID, SBP_START_DEVICE_EVT);
    514                  
    515                  
    516                   // initialize the ADC for battery reads
    517                  HalAdcInit();
    518          
    519          	/***********************************test something zekezang**********************************/
    520          	//HalLcdWriteString(" start", HAL_LCD_LINE_1);
    521          	
    522                      XNV_SPI_INIT();
    523                
    524          
    525          
    526          	/***********************************test something zekezang**********************************/
    527          }
    528          
    529          /*********************************************************************
    530           * @fn      SimpleBLEPeripheral_ProcessEvent
    531           *
    532           * @brief   Simple BLE Peripheral Application Task event processor.  This function
    533           *          is called to process all events for the task.  Events
    534           *          include timers, messages and any other user defined events.
    535           *
    536           * @param   task_id  - The OSAL assigned task ID.
    537           * @param   events - events to process.  This is a bit map and can
    538           *                   contain more than one event.
    539           *
    540           * @return  events not processed
    541           */
    542          uint16 SimpleBLEPeripheral_ProcessEvent(uint8 task_id, uint16 events) {
    543          
    544          	VOID task_id; // OSAL required parameter that isn't used in this function
    545                 // uint8 i;
    546          	if (events & SYS_EVENT_MSG) {
    547          		uint8 *pMsg;
    548          
    549          		if ((pMsg = osal_msg_receive(simpleBLEPeripheral_TaskID)) != NULL) {
    550          			simpleBLEPeripheral_ProcessOSALMsg((osal_event_hdr_t *) pMsg);
    551          
    552          			// Release the OSAL message
    553          			VOID osal_msg_deallocate(pMsg);
    554          		}
    555          
    556          		// return unprocessed events
    557          		return (events ^ SYS_EVENT_MSG);
    558          	}
    559          
    560          	if (events & SBP_START_DEVICE_EVT) {
    561          		// Start the Device
    562          		GAPRole_StartDevice(&simpleBLEPeripheral_PeripheralCBs);
    563          
    564          		// Start Bond Manager
    565          		GAPBondMgr_Register(&simpleBLEPeripheral_BondMgrCBs);
    566          
    567          		// Set timer for first periodic event
    568          		//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, SBP_PERIODIC_EVT_PERIOD);
    569                          
    570                          // Set timer for first battery read event
    571                          //osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, BATTERY_CHECK_PERIOD );
    572                          
    573          
    574                          //osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_TEMP_EVT, TEMP_CHECK_PERIOD );
    575                    
    576          		return (events ^ SBP_START_DEVICE_EVT);
    577          	}
    578          
    579          	if (events & SBP_PERIODIC_EVT) {
    580          		
    581                          //Restart timer
    582          //                if ( BATTERY_CHECK_PERIOD )
    583          //               {
    584          //                 osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, BATTERY_CHECK_PERIOD );
    585          //                }
    586          //                 
    587          //               HalLedSet(HAL_LED_1, HAL_LED_MODE_ON ); 
    588          //                 //å»¶æ¶1S
    589          //               for(i=20; i>0; i--)
    590          //                  delay_nus(50);
    591          //               HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF );
    592          //               // perform battery level check
    593          //               Batt_MeasLevel();
    594                         // Restart timer
    595          //		if (SBP_PERIODIC_EVT_PERIOD) {
    596          //			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, SBP_PERIODIC_EVT_PERIOD);
    597          //		}
    598          //
    599          //		// Perform periodic application task
    600          //		performPeriodicTask();
    601          //               
    602          		return (events ^ SBP_PERIODIC_EVT);
    603          	}
    604          
    605          //	if (events & SBP_ZEKEZANG_EVT) {
    606          //		uint8 initial_advertising_enable = FALSE;
    607          //		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    608          //		return (events ^ SBP_ZEKEZANG_EVT);
    609          //	}
    610          
    611          //	if (events & SBP_SEND_IRDATA_EVT) {
    612          //		HalLcdWriteString("send plan compl", HAL_LCD_LINE_4);
    613          //		return (events ^ SBP_SEND_IRDATA_EVT);
    614          //	}
    615          //
    616          //	if (events & SBP_ADV_IN_CONNECTION_EVT) {
    617          //		uint8 turnOnAdv = TRUE;
    618          //		// Turn on advertising while in a connection
    619          //		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &turnOnAdv);
    620          //
    621          //		return (events ^ SBP_ADV_IN_CONNECTION_EVT);
    622          //	}
    623                  
    624                  if (events & SBP_TEMP_EVT) {
    625                        // HalLcdWriteString("start get temp", HAL_LCD_LINE_5);
    626                        
    627          //              if ( SBP_TEMP_EVT)
    628          //               {
    629          //                  osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_TEMP_EVT, TEMP_CHECK_PERIOD ); 
    630          //               }
    631          //              
    632          //               HalLedSet(HAL_LED_2, HAL_LED_MODE_ON ); 
    633          //              
    634          //                 //å»¶æ¶1S
    635          //               for(i=20; i>0; i--)
    636          //                  delay_nus(500);
    637          //               HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF );
    638          //              //gettemp();
    639          //              
    640          //               //getTemperature();  
    641          //  
    642          //          HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF );
    643          	       return (events ^ SBP_TEMP_EVT);
    644          	}
    645                  
    646          
    647          	return 0;
    648          }
    649          
    650          /*********************************************************************
    651           * @fn      simpleBLEPeripheral_ProcessOSALMsg
    652           *
    653           * @brief   Process an incoming task message.
    654           *
    655           * @param   pMsg - message to process
    656           *
    657           * @return  none
    658           */
    659          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg) {
    660          	switch (pMsg->event) {
    661          	case KEY_CHANGE:
    662          		simpleBLEPeripheral_HandleKeys(((keyChange_t *) pMsg)->state, ((keyChange_t *) pMsg)->keys);
    663          		break;
    664          	default:
    665          		// do nothing
    666          		break;
    667          	}
    668          }
    669          
    670          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys) {
    671          	if (keys & HAL_KEY_UP) {
    672          		//u_state = IR_DATA_STUDY_CMD_START_BEGIN_STATE;
    673          		//SbpHalUARTWrite(&SBP_UART_STUDY_CMD, SBP_UART_STUDY_CMD_LEN);
    674          	}
    675          
    676          	if (keys & HAL_KEY_LEFT) {
    677          		HalLcdWriteString("change to de_paddkey_name", HAL_LCD_LINE_3);
    678                          set_de_passkey();
    679          	}
    680          
    681          	if (keys & HAL_KEY_DOWN) {
    682          		//HalLcdWriteString("send after 3s...", HAL_LCD_LINE_4);
    683          		//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT, 3000);
    684          	}
    685          
    686          	if (keys & HAL_KEY_RIGHT) {
    687          		//HalLcdWriteStringValue("data_len:", data_len, 10, HAL_LCD_LINE_2);
    688          	}
    689          
    690          }
    691          
    692          /*********************************************************************
    693           * @fn      peripheralStateNotificationCB
    694           *
    695           * @brief   Notification from the profile of a state change.
    696           *
    697           * @param   newState - new state
    698           *
    699           * @return  none
    700           */
    701          static void peripheralStateNotificationCB(gaprole_States_t newState) {
    702          
    703          	//HalLcdWriteStringValue("newState", newState, 10, HAL_LCD_LINE_4);
    704          
    705          	switch (newState) {
    706          	case GAPROLE_STARTED: {
    707          		uint8 ownAddress[B_ADDR_LEN];
    708          		uint8 systemId[DEVINFO_SYSTEM_ID_LEN];
    709          
    710          		GAPRole_GetParameter(GAPROLE_BD_ADDR, ownAddress);
    711          
    712          		// use 6 bytes of device address for 8 bytes of system ID value
    713          		systemId[0] = ownAddress[0];
    714          		systemId[1] = ownAddress[1];
    715          		systemId[2] = ownAddress[2];
    716          
    717          		// set middle bytes to zero
    718          		systemId[4] = 0x00;
    719          		systemId[3] = 0x00;
    720          
    721          		// shift three bytes up
    722          		systemId[7] = ownAddress[5];
    723          		systemId[6] = ownAddress[4];
    724          		systemId[5] = ownAddress[3];
    725          
    726          		DevInfo_SetParameter(DEVINFO_SYSTEM_ID, DEVINFO_SYSTEM_ID_LEN, systemId);
    727          
    728          		// Display device address
    729          		bdAddr2Str(ownAddress);
    730          		HalLcdWriteString(bdAddr2Str(ownAddress), HAL_LCD_LINE_3);
    731          		HalLcdWriteString("Initialized", HAL_LCD_LINE_3);
    732          	}
    733          		break;
    734          
    735          	case GAPROLE_ADVERTISING: {
    736          		HalLcdWriteString("Advertising", HAL_LCD_LINE_3);
    737          	}
    738          		break;
    739          
    740          	case GAPROLE_CONNECTED: {
    741          		HalLcdWriteString("Connected", HAL_LCD_LINE_3);
    742          		//simpleProfile_StateNotify( uint16 connHandle, attHandleValueNoti_t *pNoti )
    743          		GAPRole_GetParameter(GAPROLE_CONNHANDLE, &gapConnHandle);
    744          	}
    745          		break;
    746          
    747          	case GAPROLE_WAITING: {
    748          		HalLcdWriteString("Disconnected", HAL_LCD_LINE_3);
    749          	}
    750          		break;
    751          
    752          	case GAPROLE_WAITING_AFTER_TIMEOUT: {
    753          		HalLcdWriteString("Timed Out", HAL_LCD_LINE_3);
    754          	}
    755          		break;
    756          
    757          	case GAPROLE_ERROR: {
    758          		HalLcdWriteString("Error", HAL_LCD_LINE_3);
    759          	}
    760          		break;
    761          
    762          	default: {
    763          		HalLcdWriteString("", HAL_LCD_LINE_3);
    764          	}
    765          		break;
    766          
    767          	}
    768          
    769          	gapProfileState = newState;
    770          
    771          #if !defined( CC2540_MINIDK )
    772          	VOID gapProfileState; // added to prevent compiler warning with
    773          						  // "CC2540 Slave" configurations
    774          #endif
    775          
    776          }
    777          
    778          /*********************************************************************
    779           * @fn      performPeriodicTask
    780           *
    781           * @brief   Perform a periodic application task. This function gets
    782           *          called every five seconds as a result of the SBP_PERIODIC_EVT
    783           *          OSAL event. In this example, the value of the third
    784           *          characteristic in the SimpleGATTProfile service is retrieved
    785           *          from the profile, and then copied into the value of the
    786           *          the fourth characteristic.
    787           *
    788           * @param   none
    789           *
    790           * @return  none
    791           */
    792          static void performPeriodicTask(void) {
    793          	uint8 valueToCopy;
    794          	uint8 stat;
    795          
    796          	// Call to retrieve the value of the third characteristic in the profile
    797          	stat = SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR2, &valueToCopy);
    798          
    799          	if (stat == SUCCESS) {
    800          		/*
    801          		 * Call to set that value of the fourth characteristic in the profile. Note
    802          		 * that if notifications of the fourth characteristic have been enabled by
    803          		 * a GATT client device, then a notification will be sent every time this
    804          		 * function is called.
    805          		 */
    806                         // HalLcdWriteString("ok", HAL_LCD_LINE_5);
    807          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &valueToCopy);
    808          	}
    809          }
    810          
    811          /*********************************************************************
    812           * @fn      simpleProfileChangeCB
    813           * @brief   Callback from SimpleBLEProfile indicating a value change
    814           * @param   paramID - parameter ID of the value that was changed.
    815           *
    816           * @return  none
    817           */
    818          static void simpleProfileChangeCB(uint8 paramID) {
    819          	 //osal_memset(buf, 0, 20);
    820                   uint8 valuechar1[20]={0},valuechar2[20]={0},valuechar3[20]={0};
    821          	 uint8 databuf_read[20]={0};
    822          	 uint8 datalen_read=0,i;
    823          	switch (paramID) {
    824          	case SIMPLEPROFILE_CHAR1:
    825                       SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR1,valuechar1);
    826                       set_code_name(valuechar1);
    827          		break;
    828                          
    829                  case SIMPLEPROFILE_CHAR2:
    830                       SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR2, valuechar2);
    831                     //  HalLcdWriteString(valuechar2, HAL_LCD_LINE_5);
    832          	
    833                      if ((valuechar2[0] == TRANSFER_DATA_SIGN) && (valuechar2[1] == TRANSFER_DATA_SIGN_RE)) 
    834          	     {
    835          			TRANSFER_DATA_STATE_IN = FALSE;
    836                                 
    837          	      }
    838                      
    839                      
    840          	   if ((valuechar2[3] != 0) && (!TRANSFER_DATA_STATE_IN)) 
    841          	    {
    842          			
    843                                  data_len = valuechar2[3];
    844          			TRANSFER_DATA_STATE_IN = TRUE;
    845          			data_len_index = 0;
    846          			osal_memset(recv_value, 0, data_len);
    847                         
    848          	    }
    849          	
    850          	  cur_data_len = osal_strlen((char*)valuechar2);//æé®é¢ æ¯0çè¯ é¿åº¦ä¸å¯¹
    851                   //  cur_data_len = sizeof(valuechar2);
    852                     HalLcdWriteStringValue("cur_data_len:",cur_data_len, 10, HAL_LCD_LINE_5); 
    853                     
    854          	   if (TRANSFER_DATA_STATE_IN) 
    855          	    {
    856          		osal_memcpy((recv_value + data_len_index), valuechar2, cur_data_len);
    857                          
    858          		data_len_index += cur_data_len;
    859                          
    860          	     }
    861                     //HalLcdWriteStringValue("data_len:", data_len, 10, HAL_LCD_LINE_6);
    862                     //HalLcdWriteStringValue("recv_value_len:", osal_strlen((char *)recv_value), 10, HAL_LCD_LINE_7); 
    863                     //HalLcdWriteStringValue("data_len_index:", data_len_index, 10, HAL_LCD_LINE_8);
    864                     
    865                     
    866                     
    867                     if (data_len_index == data_len) 
    868          	   {
    869                      
    870          //                 if(timer_flag==1)
    871          //		    Uartsend_irdata();
    872          //		
    873          //		 else if(timer_flag==2) 
    874          //		
    875          //		    Receive_Save_Uartsend_irdata();
    876          			
    877          			
    878          		HalSPIWrite(valuechar2[2]*256,recv_value+3,data_len-3);
    879          		TRANSFER_DATA_STATE_IN = FALSE;
    880          		//HalLcdWriteStringValue("data_len:", osal_strlen((char *)recv_value), 10, HAL_LCD_LINE_6); 
    881                         // HalLcdWriteStringValue("listlen:", current_list.listlen, 10, HAL_LCD_LINE_8);
    882          		data_len = 0;
    883          		cur_data_len = 0;
    884          		data_len_index = 0;
    885          		osal_memset(recv_value, 0, data_len);
    886                     }
    887          
    888                           break;
    889                           
    890          	case SIMPLEPROFILE_CHAR3:
    891          		SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR3, valuechar3);
    892                         
    893          		HalSPIRead(valuechar3[0]*256,&datalen_read,1);
    894          		    //å»¶æ¶1S
    895                         for(i=20; i>0; i--)
    896                            delay_nus(50);
    897                          HalSPIRead(valuechar3[0]*256+1,databuf_read,datalen_read-4);	
    898          		HalLcdWriteString(hex2Str(databuf_read), HAL_LCD_LINE_6);
    899          	
    900          		break;
    901                  case SIMPLEPROFILE_CHAR4:
    902                     //  SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR4, newValueBuf);
    903                    
    904          		break;
    905                   case SIMPLEPROFILE_CHAR5:
    906                      // SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR5, newValueBuf);
    907                    
    908          		break;
    909                   
    910                  
    911          	default:
    912          		// should not reach here!
    913          		break;
    914          	}
    915          }
    916          /*********************************************************************
    917           * @fn      Receive_Save_Uartsend_irdata(void)
    918           * @brief  if
    919           * @param  
    920           * @return  none
    921           */
    922            static void Receive_Save_Uartsend_irdata(void)
    923           {
    924                         
    925          		/*if(current_list.listlen==1)
    926          		{	osal_memset(current_list.value1, 0, data_len);
    927          			osal_memcpy(current_list.value1, recv_value, data_len);
    928          			current_list.value1_len=data_len;
    929          			current_list.listlen++;
    930          			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT1, time);
    931          			
    932          			 
    933          			
    934          		}
    935          		else if(current_list.listlen==2)
    936          		{	osal_memset(current_list.value2, 0, data_len);
    937          			osal_memcpy(current_list.value2, recv_value, data_len);
    938          			current_list.value2_len=data_len;
    939          			current_list.listlen++;
    940          			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT2, time);
    941          			
    942          		}
    943          		else if(current_list.listlen==3)
    944          		{
    945          			osal_memset(current_list.value3, 0, data_len);
    946          			osal_memcpy(current_list.value3, recv_value, data_len);
    947          			current_list.value3_len=data_len;
    948          			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT3, time);
    949          			current_list.listlen++;
    950          		} 
    951          		SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR2, sizeof(uint8), &current_list.listlen);
    952          	*/
    953          
    954          } 
    955          /*********************************************************************
    956           * @fn      Uartsend_irdata
    957           * @brief  
    958           * @param  
    959           * @return  none
    960           */
    961           static void Uartsend_irdata()
    962           {
    963          	        //HalLcdWriteString("ok", HAL_LCD_LINE_5); 
    964          		recv_value[UART_DATA_START_INDEX] = 0xE3;
    965                          SbpHalUARTWrite(recv_value + UART_DATA_START_INDEX, data_len-4);
    966           }
    967           
    968          
    969          /*********************************************************************
    970           * @fn      bdAddr2Str
    971           *
    972           * @brief   Convert Bluetooth address to string. Only needed when
    973           *          LCD display is used.
    974           *
    975           * @return  none
    976           */
    977          char *bdAddr2Str(uint8 *pAddr) {
    978          	uint8 i;
    979          	char hex[] = "0123456789ABCDEF";
    980          	static char str[B_ADDR_STR_LEN];
    981          	char *pStr = str;
    982          
    983          	*pStr++ = '0';
    984          	*pStr++ = 'x';
    985          
    986          	// Start from end of addr
    987          	pAddr += B_ADDR_LEN;
    988          
    989          	for (i = B_ADDR_LEN; i > 0; i--) {
    990          		*pStr++ = hex[*--pAddr >> 4];
    991          		*pStr++ = hex[*pAddr & 0x0F];
    992          	}
    993          
    994          	*pStr = 0;
    995          
    996          	return str;
    997          }
    998          char *hex2Str(uint8 *hexcode) {
    999          	uint8 i;
   1000          	uint8 hexlen;
   1001          	char hex[] = "0123456789ABCDEF";
   1002          	hexlen=osal_strlen((char*)hexcode);
   1003          	static char str[20];
   1004          	char *pStr = str;
   1005          
   1006          	*pStr++ = '0';
   1007          	*pStr++ = 'x';
   1008          
   1009          	// Start from end of addr
   1010          	//pAddr += B_ADDR_LEN;
   1011                  for(i=0;i<hexlen;i++)
   1012          	{
   1013          	  *pStr++ = hex[*hexcode>>4];
   1014                    *pStr++ = hex[*hexcode&0x0F];
   1015                    *hexcode++;
   1016          	 
   1017          	}
   1018          
   1019          	*pStr = 0;
   1020          
   1021          	return str;
   1022          }
   1023          
   1024          /*********************************************************************
   1025           *********************************************************************/
   1026          //static int ascii2hex(char c) {
   1027          //	int ret = -1;
   1028          //	if ((c >= '0') && (c <= '9')) {
   1029          //		ret = c - '0';
   1030          //	} else if ((c >= 'A') && (c <= 'Z')) {
   1031          //		ret = c - 'A' + 65;
   1032          //	} else if ((c >= 'a') && (c <= 'z')) {
   1033          //		ret = c - 'a' + 97;
   1034          //	}
   1035          //	return ret;
   1036          //}
   1037          //static void updateDeviceName(char *name, uint8 len) {
   1038          //	uint8 k = 0;
   1039          //	for (k = 0; k < len; k++) {
   1040          //		scanRspData[k + 2] = ascii2hex(*(name + k));
   1041          //	}
   1042          //}
   1043          
   1044          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0    142  SimpleBLEPeripheral_Init
                          0 0 142 -> Batt_AddService
                          0 0 142 -> DevInfo_AddService
                          0 0 142 -> GAPRole_SetParameter
                          0 0 142 -> GAP_SetParamValue
                          0 0 142 -> GATTServApp_AddService
                          0 0 142 -> GGS_AddService
                          0 0 142 -> HalAdcInit
                          0 0 142 -> HalLcdWriteString
                          0 0 142 -> RegisterForKeys
                          0 0 142 -> SbpHalUART_Init
                          0 0 142 -> SimpleProfile_AddService
                          0 0 142 -> SimpleProfile_RegisterAppCBs
                          0 0 142 -> SimpleProfile_SetParameter
                          0 0 142 -> osal_set_event
       0      0     12  SimpleBLEPeripheral_ProcessEvent
                          0 0  12 -> GAPBondMgr_Register
                          0 0  12 -> GAPRole_StartDevice
                          0 0  12 -> HalLcdWriteString
                          0 0  12 -> osal_msg_deallocate
                          0 0  12 -> osal_msg_receive
                          0 0  12 -> set_de_passkey
       2      0     49  bdAddr2Str
       2      0    117  hex2Str
                          0 0  26 -> osal_strlen
       1      0     23  peripheralStateNotificationCB
                          0 0  23 -> DevInfo_SetParameter
                          0 0  23 -> GAPRole_GetParameter
                          0 0  23 -> HalLcdWriteString
                          0 0  23 -> bdAddr2Str
       0      0     12  simpleBLEPeripheralPairStateCB
                          0 0  12 -> GAPRole_TerminateConnection
                          0 0  11 -> HalLcdWriteString
                          0 0  12 -> HalLcdWriteStringValue
       2      0     95  simpleProfileChangeCB
                          0 0  91 -> HalLcdWriteString
                          0 0  92 -> HalLcdWriteStringValue
                          0 0  95 -> HalSPIRead
                          0 0  95 -> HalSPIWrite
                          0 0  91 -> SimpleProfile_GetParameter
                          0 0  91 -> delay_nus
                          0 0  91 -> hex2Str
                          0 0  93 -> osal_memcpy
                          0 0  91 -> osal_memset
                          0 0  91 -> osal_strlen
                          0 0  91 -> set_code_name


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
      17  ?<Constant "0123456789ABCDEF">
      17  ?<Constant "0123456789ABCDEF">_1
      12  ?<Constant "Advertising">
      15  ?<Constant "BLE slave aico">
      16  ?<Constant "Bonding success">
      10  ?<Constant "Connected">
      13  ?<Constant "Disconnected">
       6  ?<Constant "Error">
      12  ?<Constant "Initialized">
      13  ?<Constant "Pairing fail">
      16  ?<Constant "Pairing fail--a">
      16  ?<Constant "Pairing started">
      16  ?<Constant "Pairing success">
      10  ?<Constant "Timed Out">
      26  ?<Constant "change to de_paddkey_...">
      14  ?<Constant "cur_data_len:">
      20  ?<Constant {0}>
      20  ?<Constant {0}>_1
      20  ?<Constant {0}>_2
      20  ?<Constant {0}>_3
      20  ?<Constant {0}>_4
      20  ?<Constant {0}>_5
      20  ?<Constant {0}>_6
      20  ?<Constant {0}>_7
      20  ?<Constant {0}>_8
      20  ?<Constant {0}>_9
       7  ?<Initializer for advertData>
     304  ?<Initializer for current_list>
      30  ?<Initializer for scanRspData>
       4  ?<Initializer for simpleBLEPeripheral_BondMgrC
       4  ?<Initializer for simpleBLEPeripheral_Peripher
       2  ?<Initializer for simpleBLEPeripheral_SimplePr
       6  ??SimpleBLEPeripheral_Init?relay
       6  ??SimpleBLEPeripheral_ProcessEvent?relay
       8  ??Subroutine7_0
       6  ??bdAddr2Str?relay
       6  ??hex2Str?relay
       6  ??peripheralStateNotificationCB?relay
       6  ??simpleBLEPeripheralPairStateCB?relay
       6  ??simpleProfileChangeCB?relay
       2  ?Subroutine0
       8  ?Subroutine1
       7  ?Subroutine2
      11  ?Subroutine3
      13  ?Subroutine4
      13  ?Subroutine5
      16  ?Subroutine6
       1  P1DIR
       1  P1SEL
       1  P2SEL
       1  PERCFG
     658  SimpleBLEPeripheral_Init
     129  SimpleBLEPeripheral_ProcessEvent
       1  TRANSFER_DATA_STATE_IN
       1  U1BAUD
       1  U1GCR
       1  _A_P1
       1  _A_U1CSR
       4  __Constant_ffffffff
       7  advertData
      99  bdAddr2Str
      20  buf
      20  bufrx
       1  cur_data_len
     304  current_list
       1  data_len
       1  data_len_index
       2  gapConnHandle
       1  gapProfileState
     109  hex2Str
     306  peripheralStateNotificationCB
     254  recv_value
      30  scanRspData
     115  simpleBLEPeripheralPairStateCB
       4  simpleBLEPeripheral_BondMgrCBs
       4  simpleBLEPeripheral_PeripheralCBs
       2  simpleBLEPeripheral_SimpleProfileCBs
       1  simpleBLEPeripheral_TaskID
     583  simpleProfileChangeCB
      15  str
      20  str
      10  temp_18b20
       1  temp_18b20_flag
       1  temp_flag
      20  temperature

 
 2 077 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     8 bytes in segment SFR_AN
   351 bytes in segment XDATA_I
   351 bytes in segment XDATA_ID
   434 bytes in segment XDATA_ROM_C
   369 bytes in segment XDATA_Z
 
 2 470 bytes of CODE  memory
   430 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 8 bytes shared)
   720 bytes of XDATA memory

Errors: none
Warnings: 5
