###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             18/Mar/2014  15:32:39 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\Source\simpleBLEPeripheral.c   #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\config\build #
#                          Components.cfg (-DBROADCASTER_CFG=0x01             #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\buildConfig #
#                          .cfg (-DHOST_CONFIG=PERIPHERAL_CFG                 #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\Source\simpleBLEPeripheral.c   #
#                          -D INT_HEAP_LEN=3074 -D HALNODEBUG -D              #
#                          OSAL_CBTIMER_NUM_TASKS=1 -D xHAL_AES_DMA=TRUE -D   #
#                          HAL_DMA=TRUE -D POWER_SAVING -D xPLUS_BROADCASTER  #
#                          -D HAL_LCD=TRUE -D HAL_LED=TRUE -D HAL_UART=TRUE   #
#                          -D HAL_ADC=TRUE -lcN E:\TexasInstruments\BLE-CC254 #
#                          x-1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\ #
#                          CC2541\List\ -o E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheral\CC2541DB\CC254 #
#                          1\Obj\ -e --debug --core=plain --dptr=16,1         #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\ -I   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\include\ -I     #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\hal\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\hal\target\CC2541EB\ -I        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\osal\include\ -I E:\TexasInstruments\BLE-CC254x- #
#                          1.4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\.. #
#                          \..\..\..\Components\services\saddr\ -I            #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\include\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheral\CC2541DB\..\ #
#                          ..\..\..\Components\ble\controller\phy\ -I         #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\controller\include\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\..\..\Component #
#                          s\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\. #
#                          .\..\Components\ble\host\ -I                       #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\common\cc2540\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheral\CC2541DB\..\..\common\npi\n #
#                          pi_np\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profi #
#                          les\Roles\ -I E:\TexasInstruments\BLE-CC254x-1.4.0 #
#                          \Projects\ble\SimpleBLEPeripheral\CC2541DB\..\..\P #
#                          rofiles\SimpleProfile\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\..\..\Profiles\DevInf #
#                          o\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Project #
#                          s\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profiles\ #
#                          Batt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Proj #
#                          ects\ble\SimpleBLEPeripheral\CC2541DB\..\..\Profil #
#                          es\HIDDev\ -Ohz                                    #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\List\simpleBLE #
#                          Peripheral.lst                                     #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheral\CC2541DB\CC2541\Obj\simpleBLEP #
#                          eripheral.r51                                      #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\SimpleBLEPeripheral\Source\simpleBLEPeripheral.c
      1          /**************************************************************************************************
      2           Filename:       simpleBLEPeripheral.c
      3           Revised:        $Date: 2010-08-06 08:56:11 -0700 (Fri, 06 Aug 2010) $
      4           Revision:       $Revision: 23333 $
      5          
      6           Description:    This file contains the Simple BLE Peripheral sample application
      7           for use with the CC2540 Bluetooth Low Energy Protocol Stack.
      8          
      9           Copyright 2010 - 2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11           IMPORTANT: Your use of this Software is limited to those specific rights
     12           granted under the terms of a software license agreement between the user
     13           who downloaded the software, his/her employer (which must be your employer)
     14           and Texas Instruments Incorporated (the "License").  You may not use this
     15           Software unless you agree to abide by the terms of the License. The License
     16           limits your use, and you acknowledge, that the Software may not be modified,
     17           copied or distributed unless embedded on a Texas Instruments microcontroller
     18           or used solely and exclusively in conjunction with a Texas Instruments radio
     19           frequency transceiver, which is integrated into your product.  Other than for
     20           the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21           works of, modify, distribute, perform, display or sell this Software and/or
     22           its documentation for any purpose.
     23          
     24           YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25           PROVIDED ï¿½AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26           INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27           NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28           TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29           NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30           LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31           INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32           OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33           OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34           (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36           Should you have any questions regarding your right to use this Software,
     37           contact Texas Instruments Incorporated at www.TI.com.
     38           **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bcomdef.h"
     45          #include "OSAL.h"
     46          #include "OSAL_PwrMgr.h"
     47          #include "osal_snv.h"
     48          
     49          #include "OnBoard.h"
     50          #include "hal_adc.h"
     51          #include "hal_led.h"
     52          #include "hal_key.h"
     53          #include "hal_lcd.h"
     54          #include "SimpleBLESerialUart.h"
     55          
     56          #include "gatt.h"
     57          
     58          #include "hci.h"
     59          
     60          #include "gapgattserver.h"
     61          #include "gattservapp.h"
     62          #include "devinfoservice.h"
     63          #include "simpleGATTprofile.h"
     64          
     65          #if defined ( PLUS_BROADCASTER )
     66          #include "peripheralBroadcaster.h"
     67          #else
     68          #include "peripheral.h"
     69          #endif
     70          
     71          #include "gapbondmgr.h"
     72          
     73          #include "simpleBLEPeripheral.h"
     74          
     75          #if defined FEATURE_OAD
     76          #include "oad.h"
     77          #include "oad_target.h"
     78          #endif
     79          
     80          #include "hal_i2c.h"
     81          #include "hal_eeprom.h"
     82          #include "hal_at24c32.h"
     83          #include "hal_ds1307.h"
     84          #include "SimpleEepromUtils.h"
     85          #include "SimpleRTCInterrupt.h"
     86          #include "SimpleBLESPIFlash.h"
     87          #include "battservice.h"
     88          #include "SimpleTemperature.h"
     89          #include "SimpleDS18B20.h"
     90          #include "Simplepasscode.h"
     91          /*********************************************************************
     92           * MACROS
     93           */
     94          
     95          /*********************************************************************
     96           * CONSTANTS
     97           */
     98          
     99          // How often to perform periodic event
    100          #define SBP_PERIODIC_EVT_PERIOD                   5000
    101          
    102          #define TEMP_CHECK_PERIOD                         5000
    103          
    104          // How often to check battery voltage (in ms)
    105          #define BATTERY_CHECK_PERIOD                     10000////////////////////////////////////batt
    106          
    107          // What is the advertising interval when device is discoverable (units of 625us, 160=100ms)
    108          #define DEFAULT_ADVERTISING_INTERVAL          160//16000
    109          /*//èå´20MS-10.24Sä¹é´ é¤å»å¹¿æ­å»¶æ¶æ¶é´0-10msï¼ä¸ºå¶å¯è®¾ç½®çèå´ã
    110          //è¥å¹¿æ­äºä»¶æ¯å¯æ«ææ åäºä»¶æéè¿æ¥æ åäºä»¶ å¶å¼ä¸å¾å°äº100MSï¼è¥å¹¿æ­äºä»¶æ¯å¯è¿æ¥æ åäºä»¶ï¼å¶å¼å¯ä»¥ä¸º20MSæèæ´å¤§   
    111          //ä¸ææºéä¿¡è¿ç¨ä¸­ç¨çæ¯,é»è®¤è®¾ç½®  GAP_ADTYPE_ADV_INDå³å¯è¿æ¥æ åäºä»¶  æµåèæ¶å¯ä»¥éå½è°æ´å¶å¼ */
    112          // Whether to enable automatic parameter update request when a connection is formed
    113          #define DEFAULT_ENABLE_UPDATE_REQUEST        TRUE 
    114          
    115          // Limited discoverable mode advertises for 30.72s, and then stops
    116          // General discoverable mode advertises indefinitely
    117          
    118          #if defined ( CC2540_MINIDK )
    119          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_LIMITED
    120          #else
    121          #define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_GENERAL
    122          #endif  // defined ( CC2540_MINIDK )
    123          // Minimum connection interval (units of 1.25ms, 80=100ms) if automatic parameter update request is enabled
    124          #define DEFAULT_DESIRED_MIN_CONN_INTERVAL     80
    125          
    126          // Maximum connection interval (units of 1.25ms, 800=1000ms) if automatic parameter update request is enabled
    127          #define DEFAULT_DESIRED_MAX_CONN_INTERVAL    180
    128          
    129          // Slave latency to use if automatic parameter update request is enabled
    130          #define DEFAULT_DESIRED_SLAVE_LATENCY         0//10  åæ°æ´æ°æå¼ ä¸ææºéä¿¡æ¶ è¦å°äº4
    131          
    132          // Supervision timeout value (units of 10ms, 1000=10s) if automatic parameter update request is enabled
    133          #define DEFAULT_DESIRED_CONN_TIMEOUT        500//ä¸ææºéä¿¡æ¶ è¦å°äºç­äº6S
    134          
    135          // Company Identifier: Texas Instruments Inc. (13)
    136          #define TI_COMPANY_ID                         0x000D
    137          
    138          #define INVALID_CONNHANDLE                    0xFFFF
    139          
    140          // Length of bd addr as a string
    141          #define B_ADDR_STR_LEN                        15
    142          
    143          #if defined ( PLUS_BROADCASTER )
    144          #define ADV_IN_CONN_WAIT                    500 // delay 500 ms
    145          #endif
    146          
    147          // GAP connection handle
    148          static uint16 gapConnHandle;
    149          
    150          extern uint8 SBP_UART_STUDY_CMD;
    151          extern uint8 SBP_UART_STUDY_CMD_LEN;
    152          
    153          /*************************************************************
    154           *  recv data define
    155           */
    156          //XDATA uint8 a[3000]={0};
    157          extern UartState u_state;
    158          #define TRANSFER_DATA_SIGN 0xFE
    159          #define TRANSFER_DATA_SIGN_RE 0xFF
    160          #define UART_DATA_START_INDEX 2
    161          #define one_time_data_len 125
    162          // uint8 code recv_value1[2540] = { 0 };
    163          static uint8  recv_value[254] = { 0 };
    164          static uint8 TRANSFER_DATA_STATE_IN = FALSE;
    165          //static char newValueBuf[20] = { 0 };
    166          static uint8 data_len = 0, cur_data_len = 0, data_len_index = 0;
    167          
    168          /*********************************************************************
    169           * SPI FLASH
    170           */
    171          uint8 buf[20];
    172          uint8 bufrx[20];
    173          
    174          /*********************************************************************
    175           * temperature
    176           */
    177          uint8 temperature[20];
    178          uint8 temp_18b20[10];
    179          uint8 temp_flag=0;
    180          uint8 temp_18b20_flag=0;
    181          /*************************************************************
    182           *  LIST
    183           */
    184          
    185           typedef struct
    186          {           
    187            
    188            uint8 listlen;                   
    189            uint8 value1[100]; 
    190            uint8 value2[100];                   
    191            uint8 value3[100]; 
    192             //uint8 value4[100]; 
    193              //uint8 value5[100]; 
    194              // uint8 value6[100]; 
    195            uint8 value1_len; 
    196            uint8 value2_len;                   
    197            uint8 value3_len;
    198          }list;
    199          //list current_list={1,{0},{0},0,0}; 
    200           //list current_list={1,{0},{0},{0},{0},{0},0,0,0};
    201          list current_list={1,{0},{0},{0},0,0,0};
    202          
    203          
    204          
    205          /*********************************************************************
    206           * GLOBAL VARIABLES
    207           */
    208          
    209          /*********************************************************************
    210           * EXTERNAL VARIABLES
    211           */
    212          
    213          /*********************************************************************
    214           * EXTERNAL FUNCTIONS
    215           */
    216          
    217          /*********************************************************************
    218           * LOCAL VARIABLES
    219           */
    220          static uint8 simpleBLEPeripheral_TaskID; // Task ID for internal task/event processing
    221          
    222          static gaprole_States_t gapProfileState = GAPROLE_INIT;
    223          
    224          // GAP - SCAN RSP data (max size = 31 bytes)
    225          static uint8 scanRspData[] = {
    226          // complete name
    227          		0x14,// length of this data
    228          		GAP_ADTYPE_LOCAL_NAME_COMPLETE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    229          		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    230          
    231          		// connection interval range
    232          		0x05,// length of this data
    233          		GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE, LO_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), // 100ms
    234          		HI_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL), LO_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL), // 1s
    235          		HI_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL),
    236          
    237          		// Tx power level
    238          		0x02,// length of this data
    239          		GAP_ADTYPE_POWER_LEVEL, 0 // 0dBm
    240          		};
    241          
    242          // GAP - Advertisement data (max size = 31 bytes, though this is
    243          // best kept short to conserve power while advertisting)
    244          static uint8 advertData[] = {
    245          // Flags; this sets the device to use limited discoverable
    246          // mode (advertises for 30 seconds at a time) instead of general
    247          // discoverable mode (advertises indefinitely)
    248          		0x02,// length of this data
    249          		GAP_ADTYPE_FLAGS, DEFAULT_DISCOVERABLE_MODE | GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED,
    250          
    251          		// service UUID, to notify central devices what services are included
    252          		// in this peripheral
    253          		0x03,// length of this data
    254          		GAP_ADTYPE_16BIT_MORE, // some of the UUID's, but not all
    255          		LO_UINT16(SIMPLEPROFILE_SERV_UUID), HI_UINT16(SIMPLEPROFILE_SERV_UUID),
    256          
    257          };
    258          
    259          /*********************************************************************
    260           * LOCAL FUNCTIONS
    261           */
    262          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg);
    263          static void peripheralStateNotificationCB(gaprole_States_t newState);
    264          static void performPeriodicTask(void);
    265          static void simpleProfileChangeCB(uint8 paramID);
    266          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys);
    267          //static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs);
    268          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status);
    269          static char *bdAddr2Str(uint8 *pAddr);
    270          static char *hex2Str(uint8 *hexcode);
    271          static void gettemp(void);
    272          //static void updateDeviceName(char *name, uint8 len);
    273          //static uint32 atoi(uint8 s[]);
    274          static void Uartsend_irdata(void);
    275          static void Receive_Save_Uartsend_irdata(void);
    276          
    277          /*********************************************************************
    278           * PROFILE CALLBACKS
    279           */
    280          
    281          // GAP Role Callbacks
    282          static gapRolesCBs_t simpleBLEPeripheral_PeripheralCBs = { peripheralStateNotificationCB, // Profile State Change Callbacks
    283          		NULL // When a valid RSSI is read from controller (not used by application)
    284          		};
    285          
    286          // GAP Bond Manager Callbacks
    287          static gapBondCBs_t simpleBLEPeripheral_BondMgrCBs = { NULL, // Passcode callback (not used by application)
    288          		simpleBLEPeripheralPairStateCB // Pairing / Bonding state Callback (not used by application)
    289          		};
    290          
    291          // Simple GATT Profile Callbacks
    292          static simpleProfileCBs_t simpleBLEPeripheral_SimpleProfileCBs = { simpleProfileChangeCB // Charactersitic value change callback
    293          		};
    294          
    295          /*********************************************************************
    296           * @fn      pairStateCB
    297           * @brief   Pairing state callback.
    298           * @return  none
    299           */
    300          static void simpleBLEPeripheralPairStateCB(uint16 connHandle, uint8 state, uint8 status) {
    301          	if (state == GAPBOND_PAIRING_STATE_STARTED) {
    302          		HalLcdWriteString("Pairing started", HAL_LCD_LINE_7);
    303          	} else if (state == GAPBOND_PAIRING_STATE_COMPLETE) {
    304          		if (status == SUCCESS) {
    305          			HalLcdWriteString("Pairing success", HAL_LCD_LINE_7);
    306          		} else {
    307          			HalLcdWriteStringValue("Pairing fail", status, 10, HAL_LCD_LINE_7);
    308          			uint8 a = GAPRole_TerminateConnection();
    309          			HalLcdWriteStringValue("Pairing fail--a", a, 10, HAL_LCD_LINE_7);
    310          		}
    311          	} else if (state == GAPBOND_PAIRING_STATE_BONDED) {
    312          		if (status == SUCCESS) {
    313          			HalLcdWriteString("Bonding success", HAL_LCD_LINE_1);
    314          		}
    315          	}
    316          
    317          	//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_ZEKEZANG_EVT, 5000);
    318          }
    319          
    320          /*********************************************************************
    321           * @fn      simpleBLECentralPasscodeCB
    322           * @brief   Passcode callback.
    323           * @return  none
    324          
    325           static void simpleBLEPeripheralPasscodeCB(uint8 *deviceAddr, uint16 connectionHandle, uint8 uiInputs, uint8 uiOutputs) {
    326           HalLcdWriteStringValue("uiInputs:", uiInputs, 10, HAL_LCD_LINE_5);
    327           HalLcdWriteStringValue("uiOutputs", uiOutputs, 10, HAL_LCD_LINE_6);
    328           }
    329           */
    330          
    331          /*********************************************************************
    332           * @fn      readWriteFlash
    333           * @brief   readWriteFlash
    334           * @return  none
    335          
    336           static uint32 passs = 0;
    337           static void readWriteFlash() {
    338           uint8 * aa;
    339           aa = osal_msg_allocate(15);
    340           osal_memset(aa, 0, 15);
    341           osal_memcpy(aa, "as", 2);
    342           uint16 p = 1234;
    343           if (osal_snv_write(0xE0, sizeof(uint16), &p) == SUCCESS) {
    344           HalLcdWriteString("write ok", HAL_LCD_LINE_2);
    345           }
    346           osal_msg_deallocate(aa);
    347           uint8 bb[15] = { 0x0 };
    348           uint16 bb = 0;
    349           if (osal_snv_read(0xE0, 15, &bb) == SUCCESS) {
    350           HalLcdWriteString("read ok", HAL_LCD_LINE_2);
    351           passs = bb;
    352           }
    353           }
    354           */
    355          
    356          static void gettemp(void)
    357          {
    358               // osal_snv_read(0xE0,6,&temperature);
    359                 // uint8 TempValue[6];  
    360                  uint8 AvgTemp=0,i=0,j;
    361                  uint8 sensor_data_value;  //ä¼ æå¨æ°æ®
    362          
    363                  initTempSensor();
    364                  AvgTemp = getTemperature();  
    365                  
    366                  temperature[temp_flag]=AvgTemp;
    367                  temp_flag++;
    368                 
    369                  DS18B20_SendConvert();
    370                  //å»¶æ¶1S
    371                  for(j=20; j>0; j--)
    372                    delay_nus(50);
    373                  sensor_data_value=DS18B20_GetTem();
    374                  temp_18b20[temp_18b20_flag]=sensor_data_value;
    375                  temp_18b20_flag++;
    376          
    377                  if(temp_flag==3)
    378                  {
    379          
    380                    for(i=0;i<temp_flag;i++)
    381                       HalLcdWriteStringValueValue("Temp,18b20:", temperature[i], 10, temp_18b20[i],10,i+1);
    382                  }
    383                  
    384                  
    385          }
    386          /*********************************************************************
    387           * PUBLIC FUNCTIONS
    388           */
    389          
    390          /*********************************************************************
    391           * @fn      SimpleBLEPeripheral_Init
    392           *
    393           * @brief   Initialization function for the Simple BLE Peripheral App Task.
    394           *          This is called during initialization and should contain
    395           *          any application specific initialization (ie. hardware
    396           *          initialization/setup, table initialization, power up
    397           *          notificaiton ... ).
    398           *
    399           * @param   task_id - the ID assigned by OSAL.  This ID should be
    400           *                    used to send messages and set timers.
    401           *
    402           * @return  none
    403           */
    404          void SimpleBLEPeripheral_Init(uint8 task_id) {
    405          
    406            simpleBLEPeripheral_TaskID = task_id;
    407          	SbpHalUART_Init(task_id);
    408                  
    409          	// Setup the GAP Peripheral Role Profile
    410          	{
    411          
    412          #if defined( CC2540_MINIDK )
    413          		// For the CC2540DK-MINI keyfob, device doesn't start advertising until button is pressed
    414          		uint8 initial_advertising_enable = FALSE;
    415          #else
    416          		// For other hardware platforms, device starts advertising upon initialization
    417          		uint8 initial_advertising_enable = TRUE;
    418          #endif
    419          
    420          		// By setting this to zero, the device will go into the waiting state after
    421          		// being discoverable for 30.72 second, and will not being advertising again
    422          		// until the enabler is set back to TRUE
    423          		uint16 gapRole_AdvertOffTime = 0;
    424          
    425          		uint8 enable_update_request = DEFAULT_ENABLE_UPDATE_REQUEST;
    426          		uint16 desired_min_interval = DEFAULT_DESIRED_MIN_CONN_INTERVAL;
    427          		uint16 desired_max_interval = DEFAULT_DESIRED_MAX_CONN_INTERVAL;
    428          		uint16 desired_slave_latency = DEFAULT_DESIRED_SLAVE_LATENCY;
    429          		uint16 desired_conn_timeout = DEFAULT_DESIRED_CONN_TIMEOUT;
    430          
    431          		// Set the GAP Role Parameters
    432          		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    433          		GAPRole_SetParameter(GAPROLE_ADVERT_OFF_TIME, sizeof(uint16), &gapRole_AdvertOffTime);
    434          
    435          		GAPRole_SetParameter(GAPROLE_SCAN_RSP_DATA, sizeof(scanRspData), scanRspData);
    436          		GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(advertData), advertData);
    437          
    438          		GAPRole_SetParameter(GAPROLE_PARAM_UPDATE_ENABLE, sizeof(uint8), &enable_update_request);
    439          		GAPRole_SetParameter(GAPROLE_MIN_CONN_INTERVAL, sizeof(uint16), &desired_min_interval);
    440          		GAPRole_SetParameter(GAPROLE_MAX_CONN_INTERVAL, sizeof(uint16), &desired_max_interval);
    441          		GAPRole_SetParameter(GAPROLE_SLAVE_LATENCY, sizeof(uint16), &desired_slave_latency);
    442          		GAPRole_SetParameter(GAPROLE_TIMEOUT_MULTIPLIER, sizeof(uint16), &desired_conn_timeout);
    443          	}
    444          
    445          	//readWriteFlash();
    446          
    447          
    448          	// Set advertising interval
    449          	{
    450          		uint16 advInt = DEFAULT_ADVERTISING_INTERVAL;
    451          
    452          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MIN, advInt);
    453          		GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MAX, advInt);
    454          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MIN, advInt);
    455          		GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MAX, advInt);
    456          	}
    457                  //set_passkey();
    458          
    459          
    460          	// Initialize GATT attributes
    461          	GGS_AddService(GATT_ALL_SERVICES); // GAP
    462          	GATTServApp_AddService(GATT_ALL_SERVICES); // GATT attributes
    463          	DevInfo_AddService(); // Device Information Service
    464          	SimpleProfile_AddService(GATT_ALL_SERVICES); // Simple GATT Profile
    465                  Batt_AddService();     // Battery Service
    466                  
    467                  
    468                  
    469                  
    470          #if defined FEATURE_OAD
    471          			VOID OADTarget_AddService(); // OAD Profile
    472          #endif
    473          
    474          	// Setup the SimpleProfile Characteristic Values
    475          	{
    476          		uint8 charValue1 = 1;
    477          		uint8 charValue2 = 2;
    478          		uint8 charValue3 = 3;
    479          		uint8 charValue4 = 4;
    480          		uint8 charValue5[SIMPLEPROFILE_CHAR5_LEN] = { 1, 2, 3, 4, 5 };
    481          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR1, sizeof(uint8), &charValue1);
    482          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR2, sizeof(uint8), &charValue2);
    483          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR3, sizeof(uint8), &charValue3);
    484          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &charValue4);
    485          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR5, SIMPLEPROFILE_CHAR5_LEN, charValue5);
    486          	}
    487          
    488          	HalLcdWriteString("BLE slave aico", HAL_LCD_LINE_1);
    489          
    490          	// Register callback with SimpleGATTprofile
    491          	VOID SimpleProfile_RegisterAppCBs(&simpleBLEPeripheral_SimpleProfileCBs);
    492          
    493          	//who open who byebye
    494          	//HCI_EXT_ClkDivOnHaltCmd(HCI_EXT_ENABLE_CLK_DIVIDE_ON_HALT); no no no...
    495          
    496          	// Register for all key events - This app will handle all key events
    497          	RegisterForKeys(simpleBLEPeripheral_TaskID);
    498          
    499          #if defined ( DC_DC_P0_7 )
    500          	// Enable stack to toggle bypass control on TPS62730 (DC/DC converter)
    501          	HCI_EXT_MapPmIoPortCmd( HCI_EXT_PM_IO_PORT_P0, HCI_EXT_PM_IO_PORT_PIN7 );
    502          #endif // defined ( DC_DC_P0_7 )
    503          	// Setup a delayed profile startup
    504          	osal_set_event(simpleBLEPeripheral_TaskID, SBP_START_DEVICE_EVT);
    505                  
    506                  
    507                   // initialize the ADC for battery reads
    508                  HalAdcInit();
    509          
    510          	/***********************************test something zekezang**********************************/
    511          	//HalLcdWriteString(" start", HAL_LCD_LINE_1);
    512          	
    513                      XNV_SPI_INIT();
    514                
    515          
    516          
    517          	/***********************************test something zekezang**********************************/
    518          }
    519          
    520          /*********************************************************************
    521           * @fn      SimpleBLEPeripheral_ProcessEvent
    522           *
    523           * @brief   Simple BLE Peripheral Application Task event processor.  This function
    524           *          is called to process all events for the task.  Events
    525           *          include timers, messages and any other user defined events.
    526           *
    527           * @param   task_id  - The OSAL assigned task ID.
    528           * @param   events - events to process.  This is a bit map and can
    529           *                   contain more than one event.
    530           *
    531           * @return  events not processed
    532           */
    533          uint16 SimpleBLEPeripheral_ProcessEvent(uint8 task_id, uint16 events) {
    534          
    535          	VOID task_id; // OSAL required parameter that isn't used in this function
    536                 // uint8 i;
    537          	if (events & SYS_EVENT_MSG) {
    538          		uint8 *pMsg;
    539          
    540          		if ((pMsg = osal_msg_receive(simpleBLEPeripheral_TaskID)) != NULL) {
    541          			simpleBLEPeripheral_ProcessOSALMsg((osal_event_hdr_t *) pMsg);
    542          
    543          			// Release the OSAL message
    544          			VOID osal_msg_deallocate(pMsg);
    545          		}
    546          
    547          		// return unprocessed events
    548          		return (events ^ SYS_EVENT_MSG);
    549          	}
    550          
    551          	if (events & SBP_START_DEVICE_EVT) {
    552          		// Start the Device
    553          		GAPRole_StartDevice(&simpleBLEPeripheral_PeripheralCBs);
    554          
    555          		// Start Bond Manager
    556          		GAPBondMgr_Register(&simpleBLEPeripheral_BondMgrCBs);
    557          
    558          		// Set timer for first periodic event
    559          		//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, SBP_PERIODIC_EVT_PERIOD);
    560                          
    561                          // Set timer for first battery read event
    562                          //osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, BATTERY_CHECK_PERIOD );
    563                          
    564          
    565                          //osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_TEMP_EVT, TEMP_CHECK_PERIOD );
    566                    
    567          		return (events ^ SBP_START_DEVICE_EVT);
    568          	}
    569          
    570          	if (events & SBP_PERIODIC_EVT) {
    571          		
    572                          //Restart timer
    573          //                if ( BATTERY_CHECK_PERIOD )
    574          //               {
    575          //                 osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, BATTERY_CHECK_PERIOD );
    576          //                }
    577          //                 
    578          //               HalLedSet(HAL_LED_1, HAL_LED_MODE_ON ); 
    579          //                 //å»¶æ¶1S
    580          //               for(i=20; i>0; i--)
    581          //                  delay_nus(50);
    582          //               HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF );
    583          //               // perform battery level check
    584          //               Batt_MeasLevel();
    585                         // Restart timer
    586          //		if (SBP_PERIODIC_EVT_PERIOD) {
    587          //			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_PERIODIC_EVT, SBP_PERIODIC_EVT_PERIOD);
    588          //		}
    589          //
    590          //		// Perform periodic application task
    591          //		performPeriodicTask();
    592          //               
    593          		return (events ^ SBP_PERIODIC_EVT);
    594          	}
    595          
    596          //	if (events & SBP_ZEKEZANG_EVT) {
    597          //		uint8 initial_advertising_enable = FALSE;
    598          //		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &initial_advertising_enable);
    599          //		return (events ^ SBP_ZEKEZANG_EVT);
    600          //	}
    601          
    602          //	if (events & SBP_SEND_IRDATA_EVT) {
    603          //		HalLcdWriteString("send plan compl", HAL_LCD_LINE_4);
    604          //		return (events ^ SBP_SEND_IRDATA_EVT);
    605          //	}
    606          //
    607          //	if (events & SBP_ADV_IN_CONNECTION_EVT) {
    608          //		uint8 turnOnAdv = TRUE;
    609          //		// Turn on advertising while in a connection
    610          //		GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8), &turnOnAdv);
    611          //
    612          //		return (events ^ SBP_ADV_IN_CONNECTION_EVT);
    613          //	}
    614                  
    615                  if (events & SBP_TEMP_EVT) {
    616                        // HalLcdWriteString("start get temp", HAL_LCD_LINE_5);
    617                        
    618          //              if ( SBP_TEMP_EVT)
    619          //               {
    620          //                  osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_TEMP_EVT, TEMP_CHECK_PERIOD ); 
    621          //               }
    622          //              
    623          //               HalLedSet(HAL_LED_2, HAL_LED_MODE_ON ); 
    624          //              
    625          //                 //å»¶æ¶1S
    626          //               for(i=20; i>0; i--)
    627          //                  delay_nus(500);
    628          //               HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF );
    629          //              //gettemp();
    630          //              
    631          //               //getTemperature();  
    632          //  
    633          //          HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF );
    634          	       return (events ^ SBP_TEMP_EVT);
    635          	}
    636                  
    637          
    638          	return 0;
    639          }
    640          
    641          /*********************************************************************
    642           * @fn      simpleBLEPeripheral_ProcessOSALMsg
    643           *
    644           * @brief   Process an incoming task message.
    645           *
    646           * @param   pMsg - message to process
    647           *
    648           * @return  none
    649           */
    650          static void simpleBLEPeripheral_ProcessOSALMsg(osal_event_hdr_t *pMsg) {
    651          	switch (pMsg->event) {
    652          	case KEY_CHANGE:
    653          		simpleBLEPeripheral_HandleKeys(((keyChange_t *) pMsg)->state, ((keyChange_t *) pMsg)->keys);
    654          		break;
    655          	default:
    656          		// do nothing
    657          		break;
    658          	}
    659          }
    660          
    661          static void simpleBLEPeripheral_HandleKeys(uint8 shift, uint8 keys) {
    662          	if (keys & HAL_KEY_UP) {
    663          		//u_state = IR_DATA_STUDY_CMD_START_BEGIN_STATE;
    664          		//SbpHalUARTWrite(&SBP_UART_STUDY_CMD, SBP_UART_STUDY_CMD_LEN);
    665          	}
    666          
    667          	if (keys & HAL_KEY_LEFT) {
    668          		HalLcdWriteString("change to de_paddkey_name", HAL_LCD_LINE_3);
    669                          set_de_passkey();
    670          	}
    671          
    672          	if (keys & HAL_KEY_DOWN) {
    673          		//HalLcdWriteString("send after 3s...", HAL_LCD_LINE_4);
    674          		//osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT, 3000);
    675          	}
    676          
    677          	if (keys & HAL_KEY_RIGHT) {
    678          		//HalLcdWriteStringValue("data_len:", data_len, 10, HAL_LCD_LINE_2);
    679          	}
    680          
    681          }
    682          
    683          /*********************************************************************
    684           * @fn      peripheralStateNotificationCB
    685           *
    686           * @brief   Notification from the profile of a state change.
    687           *
    688           * @param   newState - new state
    689           *
    690           * @return  none
    691           */
    692          static void peripheralStateNotificationCB(gaprole_States_t newState) {
    693          
    694          	//HalLcdWriteStringValue("newState", newState, 10, HAL_LCD_LINE_4);
    695          
    696          	switch (newState) {
    697          	case GAPROLE_STARTED: {
    698          		uint8 ownAddress[B_ADDR_LEN];
    699          		uint8 systemId[DEVINFO_SYSTEM_ID_LEN];
    700          
    701          		GAPRole_GetParameter(GAPROLE_BD_ADDR, ownAddress);
    702          
    703          		// use 6 bytes of device address for 8 bytes of system ID value
    704          		systemId[0] = ownAddress[0];
    705          		systemId[1] = ownAddress[1];
    706          		systemId[2] = ownAddress[2];
    707          
    708          		// set middle bytes to zero
    709          		systemId[4] = 0x00;
    710          		systemId[3] = 0x00;
    711          
    712          		// shift three bytes up
    713          		systemId[7] = ownAddress[5];
    714          		systemId[6] = ownAddress[4];
    715          		systemId[5] = ownAddress[3];
    716          
    717          		DevInfo_SetParameter(DEVINFO_SYSTEM_ID, DEVINFO_SYSTEM_ID_LEN, systemId);
    718          
    719          		// Display device address
    720          		bdAddr2Str(ownAddress);
    721          		HalLcdWriteString(bdAddr2Str(ownAddress), HAL_LCD_LINE_3);
    722          		HalLcdWriteString("Initialized", HAL_LCD_LINE_3);
    723          	}
    724          		break;
    725          
    726          	case GAPROLE_ADVERTISING: {
    727          		HalLcdWriteString("Advertising", HAL_LCD_LINE_3);
    728          	}
    729          		break;
    730          
    731          	case GAPROLE_CONNECTED: {
    732          		HalLcdWriteString("Connected", HAL_LCD_LINE_3);
    733          		//simpleProfile_StateNotify( uint16 connHandle, attHandleValueNoti_t *pNoti )
    734          		GAPRole_GetParameter(GAPROLE_CONNHANDLE, &gapConnHandle);
    735          	}
    736          		break;
    737          
    738          	case GAPROLE_WAITING: {
    739          		HalLcdWriteString("Disconnected", HAL_LCD_LINE_3);
    740          	}
    741          		break;
    742          
    743          	case GAPROLE_WAITING_AFTER_TIMEOUT: {
    744          		HalLcdWriteString("Timed Out", HAL_LCD_LINE_3);
    745          	}
    746          		break;
    747          
    748          	case GAPROLE_ERROR: {
    749          		HalLcdWriteString("Error", HAL_LCD_LINE_3);
    750          	}
    751          		break;
    752          
    753          	default: {
    754          		HalLcdWriteString("", HAL_LCD_LINE_3);
    755          	}
    756          		break;
    757          
    758          	}
    759          
    760          	gapProfileState = newState;
    761          
    762          #if !defined( CC2540_MINIDK )
    763          	VOID gapProfileState; // added to prevent compiler warning with
    764          						  // "CC2540 Slave" configurations
    765          #endif
    766          
    767          }
    768          
    769          /*********************************************************************
    770           * @fn      performPeriodicTask
    771           *
    772           * @brief   Perform a periodic application task. This function gets
    773           *          called every five seconds as a result of the SBP_PERIODIC_EVT
    774           *          OSAL event. In this example, the value of the third
    775           *          characteristic in the SimpleGATTProfile service is retrieved
    776           *          from the profile, and then copied into the value of the
    777           *          the fourth characteristic.
    778           *
    779           * @param   none
    780           *
    781           * @return  none
    782           */
    783          static void performPeriodicTask(void) {
    784          	uint8 valueToCopy;
    785          	uint8 stat;
    786          
    787          	// Call to retrieve the value of the third characteristic in the profile
    788          	stat = SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR2, &valueToCopy);
    789          
    790          	if (stat == SUCCESS) {
    791          		/*
    792          		 * Call to set that value of the fourth characteristic in the profile. Note
    793          		 * that if notifications of the fourth characteristic have been enabled by
    794          		 * a GATT client device, then a notification will be sent every time this
    795          		 * function is called.
    796          		 */
    797                         // HalLcdWriteString("ok", HAL_LCD_LINE_5);
    798          		SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8), &valueToCopy);
    799          	}
    800          }
    801          
    802          /*********************************************************************
    803           * @fn      simpleProfileChangeCB
    804           * @brief   Callback from SimpleBLEProfile indicating a value change
    805           * @param   paramID - parameter ID of the value that was changed.
    806           *
    807           * @return  none
    808           */
    809          static void simpleProfileChangeCB(uint8 paramID) {
    810          	 //osal_memset(buf, 0, 20);
    811                   uint8 valuechar1[20]={0},valuechar2[20]={0},valuechar3[20]={0};
    812          	 uint8 databuf_read[20]={0};
    813          	 uint8 datalen_read=0,i;
    814          	switch (paramID) {
    815          	case SIMPLEPROFILE_CHAR1:
    816                       SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR1,valuechar1);
    817                       set_code_name(valuechar1);
    818          		break;
    819                          
    820                  case SIMPLEPROFILE_CHAR2:
    821                       SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR2, valuechar2);
    822                     //  HalLcdWriteString(valuechar2, HAL_LCD_LINE_5);
    823          	
    824                      if ((valuechar2[0] == TRANSFER_DATA_SIGN) && (valuechar2[1] == TRANSFER_DATA_SIGN_RE)) 
    825          	     {
    826          			TRANSFER_DATA_STATE_IN = FALSE;
    827                                 
    828          	      }
    829                      
    830                      
    831          	   if ((valuechar2[3] != 0) && (!TRANSFER_DATA_STATE_IN)) 
    832          	    {
    833          			
    834                                  data_len = valuechar2[3];
    835          			TRANSFER_DATA_STATE_IN = TRUE;
    836          			data_len_index = 0;
    837          			osal_memset(recv_value, 0, data_len);
    838                         
    839          	    }
    840          	
    841          	  cur_data_len = osal_strlen((char*)valuechar2);//æé®é¢ æ¯0çè¯ é¿åº¦ä¸å¯¹
    842                   //  cur_data_len = sizeof(valuechar2);
    843                     HalLcdWriteStringValue("cur_data_len:",cur_data_len, 10, HAL_LCD_LINE_5); 
    844                     
    845          	   if (TRANSFER_DATA_STATE_IN) 
    846          	    {
    847          		osal_memcpy((recv_value + data_len_index), valuechar2, cur_data_len);
    848                          
    849          		data_len_index += cur_data_len;
    850                          
    851          	     }
    852                     //HalLcdWriteStringValue("data_len:", data_len, 10, HAL_LCD_LINE_6);
    853                     //HalLcdWriteStringValue("recv_value_len:", osal_strlen((char *)recv_value), 10, HAL_LCD_LINE_7); 
    854                     //HalLcdWriteStringValue("data_len_index:", data_len_index, 10, HAL_LCD_LINE_8);
    855                     
    856                     
    857                     
    858                     if (data_len_index == data_len) 
    859          	   {
    860                      
    861          //                 if(timer_flag==1)
    862          //		    Uartsend_irdata();
    863          //		
    864          //		 else if(timer_flag==2) 
    865          //		
    866          //		    Receive_Save_Uartsend_irdata();
    867          			
    868          			
    869          		HalSPIWrite(valuechar2[2]*256,recv_value+3,data_len-3);
    870          		TRANSFER_DATA_STATE_IN = FALSE;
    871          		//HalLcdWriteStringValue("data_len:", osal_strlen((char *)recv_value), 10, HAL_LCD_LINE_6); 
    872                         // HalLcdWriteStringValue("listlen:", current_list.listlen, 10, HAL_LCD_LINE_8);
    873          		data_len = 0;
    874          		cur_data_len = 0;
    875          		data_len_index = 0;
    876          		osal_memset(recv_value, 0, data_len);
    877                     }
    878          
    879                           break;
    880                           
    881          	case SIMPLEPROFILE_CHAR3:
    882          		SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR3, valuechar3);
    883                         
    884          		HalSPIRead(valuechar3[0]*256,&datalen_read,1);
    885          		    //å»¶æ¶1S
    886                         for(i=20; i>0; i--)
    887                            delay_nus(50);
    888                          HalSPIRead(valuechar3[0]*256+1,databuf_read,datalen_read-4);
    889          		
    890          		//HalLcd(HAL_LCD_LINE_5,hex2Str(databuf_read));
    891          		HalLcdWriteString(hex2Str(databuf_read), HAL_LCD_LINE_5);
    892          //		 for(i=20; i>0; i--)
    893          //                  delay_nus(500);
    894          		
    895          		break;
    896                  case SIMPLEPROFILE_CHAR4:
    897                     //  SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR4, newValueBuf);
    898                    
    899          		break;
    900                   case SIMPLEPROFILE_CHAR5:
    901                      // SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR5, newValueBuf);
    902                    
    903          		break;
    904                   
    905                  
    906          	default:
    907          		// should not reach here!
    908          		break;
    909          	}
    910          }
    911          /*********************************************************************
    912           * @fn      Receive_Save_Uartsend_irdata(void)
    913           * @brief  if
    914           * @param  
    915           * @return  none
    916           */
    917            static void Receive_Save_Uartsend_irdata(void)
    918           {
    919                         
    920          		/*if(current_list.listlen==1)
    921          		{	osal_memset(current_list.value1, 0, data_len);
    922          			osal_memcpy(current_list.value1, recv_value, data_len);
    923          			current_list.value1_len=data_len;
    924          			current_list.listlen++;
    925          			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT1, time);
    926          			
    927          			 
    928          			
    929          		}
    930          		else if(current_list.listlen==2)
    931          		{	osal_memset(current_list.value2, 0, data_len);
    932          			osal_memcpy(current_list.value2, recv_value, data_len);
    933          			current_list.value2_len=data_len;
    934          			current_list.listlen++;
    935          			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT2, time);
    936          			
    937          		}
    938          		else if(current_list.listlen==3)
    939          		{
    940          			osal_memset(current_list.value3, 0, data_len);
    941          			osal_memcpy(current_list.value3, recv_value, data_len);
    942          			current_list.value3_len=data_len;
    943          			osal_start_timerEx(simpleBLEPeripheral_TaskID, SBP_SEND_IRDATA_EVT3, time);
    944          			current_list.listlen++;
    945          		} 
    946          		SimpleProfile_SetParameter( SIMPLEPROFILE_CHAR2, sizeof(uint8), &current_list.listlen);
    947          	*/
    948          
    949          } 
    950          /*********************************************************************
    951           * @fn      Uartsend_irdata
    952           * @brief  
    953           * @param  
    954           * @return  none
    955           */
    956           static void Uartsend_irdata()
    957           {
    958          	        //HalLcdWriteString("ok", HAL_LCD_LINE_5); 
    959          		recv_value[UART_DATA_START_INDEX] = 0xE3;
    960                          SbpHalUARTWrite(recv_value + UART_DATA_START_INDEX, data_len-4);
    961           }
    962           
    963          
    964          /*********************************************************************
    965           * @fn      bdAddr2Str
    966           *
    967           * @brief   Convert Bluetooth address to string. Only needed when
    968           *          LCD display is used.
    969           *
    970           * @return  none
    971           */
    972          char *bdAddr2Str(uint8 *pAddr) {
    973          	uint8 i;
    974          	char hex[] = "0123456789ABCDEF";
    975          	static char str[B_ADDR_STR_LEN];
    976          	char *pStr = str;
    977          
    978          	*pStr++ = '0';
    979          	*pStr++ = 'x';
    980          
    981          	// Start from end of addr
    982          	pAddr += B_ADDR_LEN;
    983          
    984          	for (i = B_ADDR_LEN; i > 0; i--) {
    985          		*pStr++ = hex[*--pAddr >> 4];
    986          		*pStr++ = hex[*pAddr & 0x0F];
    987          	}
    988          
    989          	*pStr = 0;
    990          
    991          	return str;
    992          }
    993          char *hex2Str(uint8 *hexcode) {
    994          	uint8 i;
    995          	uint8 hexlen;
    996          	char hex[] = "0123456789ABCDEF";
    997          	hexlen=osal_strlen((char*)hexcode);
    998          	static char str[20];
    999          	char *pStr = str;
   1000          
   1001          	*pStr++ = '0';
   1002          	*pStr++ = 'x';
   1003          
   1004          	// Start from end of addr
   1005          	//pAddr += B_ADDR_LEN;
   1006                  for(i=0;i<hexlen;i++)
   1007          	{
   1008          	  *pStr++ = hex[*hexcode>>4];
   1009                    *pStr++ = hex[*hexcode&0x0F];
   1010                    *hexcode++;
   1011          	 
   1012          	}
   1013          
   1014          	*pStr = 0;
   1015          
   1016          	return str;
   1017          }
   1018          
   1019          /*********************************************************************
   1020           *********************************************************************/
   1021          //static int ascii2hex(char c) {
   1022          //	int ret = -1;
   1023          //	if ((c >= '0') && (c <= '9')) {
   1024          //		ret = c - '0';
   1025          //	} else if ((c >= 'A') && (c <= 'Z')) {
   1026          //		ret = c - 'A' + 65;
   1027          //	} else if ((c >= 'a') && (c <= 'z')) {
   1028          //		ret = c - 'a' + 97;
   1029          //	}
   1030          //	return ret;
   1031          //}
   1032          //static void updateDeviceName(char *name, uint8 len) {
   1033          //	uint8 k = 0;
   1034          //	for (k = 0; k < len; k++) {
   1035          //		scanRspData[k + 2] = ascii2hex(*(name + k));
   1036          //	}
   1037          //}
   1038          
   1039          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0     30  SimpleBLEPeripheral_Init
                          0 0 30 -> Batt_AddService
                          0 0 30 -> DevInfo_AddService
                          0 0 30 -> GAPRole_SetParameter
                          0 0 30 -> GAP_SetParamValue
                          0 0 30 -> GATTServApp_AddService
                          0 0 30 -> GGS_AddService
                          0 0 30 -> HalAdcInit
                          0 0 30 -> HalLcdWriteString
                          0 0 30 -> RegisterForKeys
                          0 0 30 -> SbpHalUART_Init
                          0 0 30 -> SimpleProfile_AddService
                          0 0 30 -> SimpleProfile_RegisterAppCBs
                          0 0 30 -> SimpleProfile_SetParameter
                          0 0 30 -> osal_set_event
       0      0     12  SimpleBLEPeripheral_ProcessEvent
                          0 0 12 -> GAPBondMgr_Register
                          0 0 12 -> GAPRole_StartDevice
                          0 0 12 -> HalLcdWriteString
                          0 0 12 -> osal_msg_deallocate
                          0 0 12 -> osal_msg_receive
                          0 0 12 -> set_de_passkey
       2      0     49  bdAddr2Str
       2      0    117  hex2Str
                          0 0 26 -> osal_strlen
       1      0     23  peripheralStateNotificationCB
                          0 0 23 -> DevInfo_SetParameter
                          0 0 23 -> GAPRole_GetParameter
                          0 0 23 -> HalLcdWriteString
                          0 0 23 -> bdAddr2Str
       0      0     12  simpleBLEPeripheralPairStateCB
                          0 0 12 -> GAPRole_TerminateConnection
                          0 0 11 -> HalLcdWriteString
                          0 0 12 -> HalLcdWriteStringValue
       2      0     95  simpleProfileChangeCB
                          0 0 91 -> HalLcdWriteString
                          0 0 92 -> HalLcdWriteStringValue
                          0 0 95 -> HalSPIRead
                          0 0 95 -> HalSPIWrite
                          0 0 91 -> SimpleProfile_GetParameter
                          0 0 91 -> delay_nus
                          0 0 91 -> hex2Str
                          0 0 93 -> osal_memcpy
                          0 0 91 -> osal_memset
                          0 0 91 -> osal_strlen
                          0 0 91 -> set_code_name


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
      17  ?<Constant "0123456789ABCDEF">
      17  ?<Constant "0123456789ABCDEF">_1
      12  ?<Constant "Advertising">
      15  ?<Constant "BLE slave aico">
      16  ?<Constant "Bonding success">
      10  ?<Constant "Connected">
      13  ?<Constant "Disconnected">
       6  ?<Constant "Error">
      12  ?<Constant "Initialized">
      13  ?<Constant "Pairing fail">
      16  ?<Constant "Pairing fail--a">
      16  ?<Constant "Pairing started">
      16  ?<Constant "Pairing success">
      10  ?<Constant "Timed Out">
      26  ?<Constant "change to de_paddkey_...">
      14  ?<Constant "cur_data_len:">
      20  ?<Constant {0}>
      20  ?<Constant {0}>_1
      20  ?<Constant {0}>_2
      20  ?<Constant {0}>_3
       5  ?<Constant {1, 2, 3, 4, 5}>
       7  ?<Initializer for advertData>
     304  ?<Initializer for current_list>
      30  ?<Initializer for scanRspData>
       4  ?<Initializer for simpleBLEPeripheral_BondMgrC
       4  ?<Initializer for simpleBLEPeripheral_Peripher
       2  ?<Initializer for simpleBLEPeripheral_SimplePr
       6  ??SimpleBLEPeripheral_Init?relay
       6  ??SimpleBLEPeripheral_ProcessEvent?relay
       8  ??Subroutine7_0
       6  ??bdAddr2Str?relay
       6  ??hex2Str?relay
       6  ??peripheralStateNotificationCB?relay
       6  ??simpleBLEPeripheralPairStateCB?relay
       6  ??simpleProfileChangeCB?relay
       2  ?Subroutine0
       8  ?Subroutine1
       7  ?Subroutine2
      11  ?Subroutine3
      13  ?Subroutine4
      13  ?Subroutine5
      16  ?Subroutine6
       1  P1DIR
       1  P1SEL
       1  P2SEL
       1  PERCFG
     529  SimpleBLEPeripheral_Init
     129  SimpleBLEPeripheral_ProcessEvent
       1  TRANSFER_DATA_STATE_IN
       1  U1BAUD
       1  U1GCR
       1  _A_P1
       1  _A_U1CSR
       4  __Constant_ffffffff
       7  advertData
      99  bdAddr2Str
      20  buf
      20  bufrx
       1  cur_data_len
     304  current_list
       1  data_len
       1  data_len_index
       2  gapConnHandle
       1  gapProfileState
     109  hex2Str
     306  peripheralStateNotificationCB
     254  recv_value
      30  scanRspData
     115  simpleBLEPeripheralPairStateCB
       4  simpleBLEPeripheral_BondMgrCBs
       4  simpleBLEPeripheral_PeripheralCBs
       2  simpleBLEPeripheral_SimpleProfileCBs
       1  simpleBLEPeripheral_TaskID
     583  simpleProfileChangeCB
      15  str
      20  str
      10  temp_18b20
       1  temp_18b20_flag
       1  temp_flag
      20  temperature

 
 1 948 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     8 bytes in segment SFR_AN
   351 bytes in segment XDATA_I
   351 bytes in segment XDATA_ID
   319 bytes in segment XDATA_ROM_C
   369 bytes in segment XDATA_Z
 
 2 341 bytes of CODE  memory
   315 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 8 bytes shared)
   720 bytes of XDATA memory

Errors: none
Warnings: 5
