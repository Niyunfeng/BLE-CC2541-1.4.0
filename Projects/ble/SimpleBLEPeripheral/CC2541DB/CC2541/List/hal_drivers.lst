###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             28/Feb/2014  16:48:40 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\common\hal_drivers.c                             #
#    Command line       =  -f E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\config\b #
#                          uildComponents.cfg (-DBROADCASTER_CFG=0x01         #
#                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04          #
#                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01            #
#                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04                #
#                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_C #
#                          FG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                #
#                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CON #
#                          N_CFG) -f E:\TexasInstruments\BLE-CC254x-1.4.0\Pro #
#                          jects\ble\SimpleBLEPeripheralzeke\CC2541DB\buildCo #
#                          nfig.cfg (-DHOST_CONFIG=PERIPHERAL_CFG             #
#                          -DGAP_PRIVACY_RECONNECT -DCC2541                   #
#                          -DOAD_IMAGE_VERSION=0x0000                         #
#                          "-DOAD_IMAGE_A_USER_ID='A', 'A', 'A', 'A'"         #
#                          "-DOAD_IMAGE_B_USER_ID='B', 'B', 'B', 'B'")        #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Components\ha #
#                          l\common\hal_drivers.c -D INT_HEAP_LEN=3074 -D     #
#                          HALNODEBUG -D OSAL_CBTIMER_NUM_TASKS=1 -D          #
#                          HAL_AES_DMA=TRUE -D HAL_DMA=TRUE -D POWER_SAVING   #
#                          -D xPLUS_BROADCASTER -D HAL_LCD=TRUE -D            #
#                          HAL_LED=TRUE -D HAL_UART=TRUE -lcN                 #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\ -o   #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\ -e    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\common\  #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\include\ #
#                           -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ #
#                          ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\C #
#                          omponents\hal\include\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\hal\target\CC2541EB\ -I                      #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\osal\include\ -I E:\TexasInstruments\BLE-CC2 #
#                          54x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2 #
#                          541DB\..\..\..\..\Components\services\saddr\ -I    #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\include\ -I E:\TexasInstruments\BLE-CC25 #
#                          4x-1.4.0\Projects\ble\SimpleBLEPeripheralzeke\CC25 #
#                          41DB\..\..\..\..\Components\ble\controller\phy\    #
#                          -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\b #
#                          le\SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Co #
#                          mponents\ble\controller\include\ -I                #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\..\..\Compo #
#                          nents\ble\hci\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\..\..\Components\ble\host\ -I               #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\common\cc25 #
#                          40\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\comm #
#                          on\npi\npi_np\ -I E:\TexasInstruments\BLE-CC254x-1 #
#                          .4.0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB #
#                          \..\..\Profiles\Roles\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Si #
#                          mpleProfile\ -I E:\TexasInstruments\BLE-CC254x-1.4 #
#                          .0\Projects\ble\SimpleBLEPeripheralzeke\CC2541DB\. #
#                          .\..\Profiles\DevInfo\ -I                          #
#                          E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\..\..\Profiles\Ba #
#                          tt\ -I E:\TexasInstruments\BLE-CC254x-1.4.0\Projec #
#                          ts\ble\SimpleBLEPeripheralzeke\CC2541DB\..\..\Prof #
#                          iles\HIDDev\ -Ohz                                  #
#    List file          =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\List\hal_d #
#                          rivers.lst                                         #
#    Object file        =  E:\TexasInstruments\BLE-CC254x-1.4.0\Projects\ble\ #
#                          SimpleBLEPeripheralzeke\CC2541DB\CC2541\Obj\hal_dr #
#                          ivers.r51                                          #
#                                                                             #
#                                                                             #
###############################################################################

E:\TexasInstruments\BLE-CC254x-1.4.0\Components\hal\common\hal_drivers.c
      1          /**************************************************************************************************
      2            Filename:       hal_drivers.c
      3            Revised:        $Date: 2007-07-06 10:42:24 -0700 (Fri, 06 Jul 2007) $
      4            Revision:       $Revision: 13579 $
      5          
      6            Description:    This file contains the interface to the Drivers Service.
      7          
      8          
      9            Copyright 2005-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /**************************************************************************************************
     41           *                                            INCLUDES
     42           **************************************************************************************************/
     43          
     44          #include "hal_adc.h"
     45          #if (defined HAL_AES) && (HAL_AES == TRUE)
     46          #include "hal_aes.h"
     47          #endif
     48          #if (defined HAL_BUZZER) && (HAL_BUZZER == TRUE)
     49          #include "hal_buzzer.h"
     50          #endif
     51          #if (defined HAL_DMA) && (HAL_DMA == TRUE)
     52          #include "hal_dma.h"
     53          #endif
     54          #include "hal_drivers.h"
     55          #include "hal_key.h"
     56          #include "hal_lcd.h"
     57          #include "hal_led.h"
     58          #include "hal_sleep.h"
     59          #include "hal_timer.h"
     60          #include "hal_types.h"
     61          #include "hal_uart.h"
     62          #ifdef CC2591_COMPRESSION_WORKAROUND
     63          #include "mac_rx.h"
     64          #endif
     65          #include "OSAL.h"
     66          #if defined POWER_SAVING
     67          #include "OSAL_PwrMgr.h"
     68          #endif
     69          #if (defined HAL_HID) && (HAL_HID == TRUE)
     70          #include "usb_hid.h"
     71          #endif
     72          #if (defined HAL_SPI) && (HAL_SPI == TRUE)
     73          #include "hal_spi.h"
     74          #endif
     75          
     76          /**************************************************************************************************
     77           *                                      GLOBAL VARIABLES
     78           **************************************************************************************************/
     79          uint8 Hal_TaskID;
     80          
     81          extern void HalLedUpdate( void ); /* Notes: This for internal only so it shouldn't be in hal_led.h */
     82          
     83          /**************************************************************************************************
     84           * @fn      Hal_Init
     85           *
     86           * @brief   Hal Initialization function.
     87           *
     88           * @param   task_id - Hal TaskId
     89           *
     90           * @return  None
     91           **************************************************************************************************/
     92          void Hal_Init( uint8 task_id )
     93          {
     94            /* Register task ID */
     95            Hal_TaskID = task_id;
     96          
     97          #ifdef CC2591_COMPRESSION_WORKAROUND
     98            osal_start_reload_timer( Hal_TaskID, PERIOD_RSSI_RESET_EVT, PERIOD_RSSI_RESET_TIMEOUT );
     99          #endif
    100          }
    101          
    102          /**************************************************************************************************
    103           * @fn      Hal_DriverInit
    104           *
    105           * @brief   Initialize HW - These need to be initialized before anyone.
    106           *
    107           * @param   task_id - Hal TaskId
    108           *
    109           * @return  None
    110           **************************************************************************************************/
    111          void HalDriverInit (void)
    112          {
    113            /* TIMER */
    114          #if (defined HAL_TIMER) && (HAL_TIMER == TRUE)
    115          #endif
    116          
    117            /* ADC */
    118          #if (defined HAL_ADC) && (HAL_ADC == TRUE)
    119            HalAdcInit();
    120          #endif
    121          
    122            /* DMA */
    123          #if (defined HAL_DMA) && (HAL_DMA == TRUE)
    124            // Must be called before the init call to any module that uses DMA.
    125            HalDmaInit();
    126          #endif
    127          
    128            /* AES */
    129          #if (defined HAL_AES) && (HAL_AES == TRUE)
    130            HalAesInit();
    131          #endif
    132          
    133            /* LCD */
    134          #if (defined HAL_LCD) && (HAL_LCD == TRUE)
    135            HalLcdInit();
    136          #endif
    137          
    138            /* LED */
    139          #if (defined HAL_LED) && (HAL_LED == TRUE)
    140            HalLedInit();
    141          #endif
    142          
    143            /* UART */
    144          #if (defined HAL_UART) && (HAL_UART == TRUE)
    145            HalUARTInit();
    146          #endif
    147          
    148            /* KEY */
    149          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    150            HalKeyInit();
    151          #endif
    152            
    153            /* SPI */
    154          #if (defined HAL_SPI) && (HAL_SPI == TRUE)
    155            HalSpiInit();
    156          #endif
    157          
    158            /* HID */
    159          #if (defined HAL_HID) && (HAL_HID == TRUE)
    160            usbHidInit();
    161          #endif
    162          }
    163          
    164          /**************************************************************************************************
    165           * @fn      Hal_ProcessEvent
    166           *
    167           * @brief   Hal Process Event
    168           *
    169           * @param   task_id - Hal TaskId
    170           *          events - events
    171           *
    172           * @return  None
    173           **************************************************************************************************/
    174          uint16 Hal_ProcessEvent( uint8 task_id, uint16 events )
    175          {
    176            uint8 *msgPtr;
    177          
    178            (void)task_id;  // Intentionally unreferenced parameter
    179          
    180            if ( events & SYS_EVENT_MSG )
    181            {
    182              msgPtr = osal_msg_receive(Hal_TaskID);
    183          
    184              while (msgPtr)
    185              {
    186                /* Do something here - for now, just deallocate the msg and move on */
    187          
    188                /* De-allocate */
    189                osal_msg_deallocate( msgPtr );
    190                /* Next */
    191                msgPtr = osal_msg_receive( Hal_TaskID );
    192              }
    193              return events ^ SYS_EVENT_MSG;
    194            }
    195          
    196          #if (defined HAL_BUZZER) && (HAL_BUZZER == TRUE)
    197            if (events & HAL_BUZZER_EVENT)
    198            {
    199              HalBuzzerStop();
    200              return events ^ HAL_BUZZER_EVENT;
    201            }
    202          #endif
    203          
    204          #ifdef CC2591_COMPRESSION_WORKAROUND
    205            if ( events & PERIOD_RSSI_RESET_EVT )
    206            {
    207              macRxResetRssi();
    208              return (events ^ PERIOD_RSSI_RESET_EVT);
    209            }
    210          #endif
    211          
    212            if ( events & HAL_LED_BLINK_EVENT )
    213            {
    214          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    215              HalLedUpdate();
    216          #endif /* BLINK_LEDS && HAL_LED */
    217              return events ^ HAL_LED_BLINK_EVENT;
    218            }
    219          
    220            if (events & HAL_KEY_EVENT)
    221            {
    222          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    223              /* Check for keys */
    224              HalKeyPoll();
    225          
    226              /* if interrupt disabled, do next polling */
    227              if (!Hal_KeyIntEnable)
    228              {
    229                osal_start_timerEx( Hal_TaskID, HAL_KEY_EVENT, 100);
    230              }
    231          #endif
    232              return events ^ HAL_KEY_EVENT;
    233            }
    234          
    235          #if defined POWER_SAVING
    236            if ( events & HAL_SLEEP_TIMER_EVENT )
    237            {
    238              halRestoreSleepLevel();
    239              return events ^ HAL_SLEEP_TIMER_EVENT;
    240            }
    241          
    242            if ( events & HAL_PWRMGR_HOLD_EVENT )
    243            {
    244              (void)osal_pwrmgr_task_state(Hal_TaskID, PWRMGR_HOLD);
    245          
    246              (void)osal_stop_timerEx(Hal_TaskID, HAL_PWRMGR_CONSERVE_EVENT);
    247              (void)osal_clear_event(Hal_TaskID, HAL_PWRMGR_CONSERVE_EVENT);
    248          
    249              return (events & ~(HAL_PWRMGR_HOLD_EVENT | HAL_PWRMGR_CONSERVE_EVENT));
    250            }
    251          
    252            if ( events & HAL_PWRMGR_CONSERVE_EVENT )
    253            {
    254              (void)osal_pwrmgr_task_state(Hal_TaskID, PWRMGR_CONSERVE);
    255              return events ^ HAL_PWRMGR_CONSERVE_EVENT;
    256            }
    257          #endif
    258          
    259            return 0;
    260          }
    261          
    262          /**************************************************************************************************
    263           * @fn      Hal_ProcessPoll
    264           *
    265           * @brief   This routine will be called by OSAL to poll UART, TIMER...
    266           *
    267           * @param   task_id - Hal TaskId
    268           *
    269           * @return  None
    270           **************************************************************************************************/
    271          void Hal_ProcessPoll ()
    272          {
    273          #if defined( POWER_SAVING )
    274            /* Allow sleep before the next OSAL event loop */
    275            ALLOW_SLEEP_MODE();
    276          #endif
    277            
    278            /* UART Poll */
    279          #if (defined HAL_UART) && (HAL_UART == TRUE)
    280            HalUARTPoll();
    281          #endif
    282            
    283            /* SPI Poll */
    284          #if (defined HAL_SPI) && (HAL_SPI == TRUE)
    285            HalSpiPoll();
    286          #endif
    287          
    288            /* HID poll */
    289          #if (defined HAL_HID) && (HAL_HID == TRUE)
    290            usbHidProcessEvents();
    291          #endif
    292           
    293          }
    294          
    295          /**************************************************************************************************
    296          **************************************************************************************************/
    297          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0      0  HalDriverInit
                          2 0  0 -> HalAdcInit
                          2 0  0 -> HalAesInit
                          2 0  0 -> HalDmaInit
                          2 0  0 -> HalKeyInit
                          2 0  0 -> HalLcdInit
                          2 0  0 -> HalLedInit
                          2 0  0 -> HalUARTInit
       2      0      0  Hal_Init
       0      0     14  Hal_ProcessEvent
                          0 0 10 -> HalKeyPoll
                          0 0 10 -> HalLedUpdate
                          0 0 10 -> halRestoreSleepLevel
                          0 0 10 -> osal_clear_event
                          0 0 10 -> osal_msg_deallocate
                          0 0 10 -> osal_msg_receive
                          0 0 10 -> osal_pwrmgr_task_state
                          0 0 14 -> osal_start_timerEx
                          0 0 10 -> osal_stop_timerEx
       2      0      0  Hal_ProcessPoll
                          2 0  0 -> HalUARTPoll


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??HalDriverInit?relay
       6  ??Hal_Init?relay
       6  ??Hal_ProcessEvent?relay
       6  ??Hal_ProcessPoll?relay
       7  ?Subroutine0
      27  HalDriverInit
       9  Hal_Init
     180  Hal_ProcessEvent
      13  Hal_ProcessPoll
       1  Hal_TaskID
       4  __Constant_64

 
 236 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   4 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
 260 bytes of CODE  memory
   0 bytes of CONST memory (+ 4 bytes shared)
   1 byte  of XDATA memory

Errors: none
Warnings: 1
